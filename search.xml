<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java SE入门教程</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用语句和注意事项"><a href="#常用语句和注意事项" class="headerlink" title="常用语句和注意事项"></a>常用语句和注意事项</h1><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><h2 id="静态方法和实例方法"><a href="#静态方法和实例方法" class="headerlink" title="静态方法和实例方法"></a>静态方法和实例方法</h2><p>在Java中，方法和静态方法有几个关键的区别：</p><ol><li><p><strong>定义方式</strong>：</p><ul><li><strong>实例方法</strong>：属于类的实例（对象）的方法。它们可以在类的任何实例上调用，并且可以访问类的实例变量和方法。</li><li><strong>静态方法</strong>：属于类本身的方法，而不是类的任何特定实例。它们通过类名直接调用，不需要创建类的实例。</li></ul></li><li><p><strong>调用方式</strong>：</p><ul><li><strong>实例方法</strong>：必须通过类的实例来调用，例如：<code>objectName.instanceMethod();</code></li><li><strong>静态方法</strong>：可以通过类名直接调用，也可以通过实例调用，但通常推荐使用类名调用，例如：<code>ClassName.staticMethod();</code> 或者 <code>objectName.staticMethod();</code>（不推荐）</li></ul></li><li><p><strong>访问实例变量</strong>：</p><ul><li><strong>实例方法</strong>：可以访问和修改实例变量（非静态字段）。</li><li><strong>静态方法</strong>：不能直接访问实例变量，因为静态方法是属于类的，而不是属于任何特定的实例。静态方法只能访问静态变量。</li></ul></li><li><p><strong>内存分配</strong>：</p><ul><li><strong>实例方法</strong>：每次创建类的实例时，都会为该实例分配内存，实例方法与这些内存相关联。</li><li><strong>静态方法</strong>：在类被加载到JVM时，就分配了内存，并且这些内存是共享的，不依赖于类的实例。</li></ul></li><li><p><strong>使用场景</strong>：</p><ul><li><strong>实例方法</strong>：通常用于操作对象的状态或者行为。</li><li><strong>静态方法</strong>：通常用于执行不依赖于对象状态的操作，例如工具类的方法、工厂方法等。</li></ul></li><li><p><strong>多态性</strong>：</p><ul><li><strong>实例方法</strong>：可以表现出多态性，即子类可以覆盖父类的实例方法。</li><li><strong>静态方法</strong>：不能表现出多态性，静态方法是绑定到类而不是对象的，所以子类无法覆盖父类的静态方法，但可以隐藏（通过声明同名静态方法）。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    // 实例变量</span><br><span class="line">    private int value;</span><br><span class="line"></span><br><span class="line">    // 实例方法</span><br><span class="line">    public void setValue(int value) &#123;</span><br><span class="line">        this.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实例方法</span><br><span class="line">    public int getValue() &#123;</span><br><span class="line">        return this.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 静态方法</span><br><span class="line">    public static void printMessage() &#123;</span><br><span class="line">        System.out.println(&quot;这是一个静态方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyClass myObject = new MyClass();</span><br><span class="line">        myObject.setValue(10); // 调用实例方法</span><br><span class="line">        System.out.println(myObject.getValue()); // 调用实例方法</span><br><span class="line"></span><br><span class="line">        MyClass.printMessage(); // 调用静态方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代参无参"><a href="#代参无参" class="headerlink" title="代参无参"></a>代参无参</h3>无参构造法，一般默认有无参<br>![[Pasted image 20240712102947.png]]<br>有参<br>![[Pasted image 20240712103031.png]]<br>常规方法<br>![[Pasted image 20240712103118.png]]<br>在有参和无参构造中public+类的名字。例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Zi extends Fu&#123;  </span><br><span class="line">    public int streng=65;  </span><br><span class="line">    public int height=34;  </span><br><span class="line">    public void yiyi()&#123;  </span><br><span class="line">        int streng=20;  </span><br><span class="line">        System.out.println(streng);  </span><br><span class="line">        System.out.println(height);  </span><br><span class="line">        System.out.println(super.height);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public  Zi()&#123;  </span><br><span class="line">        super();  </span><br><span class="line">        System.out.println(&quot;Zi中无参构造方法被调用&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public Zi(int age)&#123;  </span><br><span class="line">        super();  </span><br><span class="line">        System.out.println(&quot;Zi中带参构造方法被调用&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>在Java中，构造方法（Constructor）和常规方法（Method）有以下几个主要区别：</li></ul><ol><li><p><strong>名称</strong>：</p><ul><li><strong>构造方法</strong>：构造方法的名称必须与类名完全相同。</li><li><strong>常规方法</strong>：常规方法的名称可以是任意的，但不能与类名相同。</li></ul></li><li><p><strong>返回类型</strong>：</p><ul><li><strong>构造方法</strong>：构造方法没有返回类型，即使没有明确声明，也不可以有void或其他任何类型。</li><li><strong>常规方法</strong>：常规方法必须有返回类型，可以是void（无返回值）或任何其他数据类型。</li></ul></li><li><p><strong>调用方式</strong>：</p><ul><li><strong>构造方法</strong>：构造方法在创建对象时被调用，通常使用<code>new</code>关键字来调用。</li><li><strong>常规方法</strong>：常规方法可以在对象创建后，通过对象实例来调用。</li></ul></li><li><p><strong>目的</strong>：</p><ul><li><strong>构造方法</strong>：构造方法用于初始化新创建的对象的状态，即设置对象属性的初始值。</li><li><strong>常规方法</strong>：常规方法用于执行特定的操作或计算，可能需要参数也可能不需要，并且可以返回一个结果。</li></ul></li><li><p><strong>重载</strong>：</p><ul><li><strong>构造方法</strong>：构造方法可以重载，即同一个类可以有多个名称相同但参数列表不同的构造方法。</li><li><strong>常规方法</strong>：常规方法也可以重载，方法名相同但参数列表必须不同。</li></ul></li><li><p><strong>默认提供</strong>：</p><ul><li><strong>构造方法</strong>：如果一个类没有显式定义任何构造方法，Java编译器会提供一个默认的无参构造方法。</li><li><strong>常规方法</strong>：Java不会为类提供任何默认的常规方法，除非是Object类中的方法，如<code>toString()</code>, <code>equals()</code>, <code>hashCode()</code>等。</li></ul></li></ol><p>以下是一个包含构造方法和常规方法的Java类示例：</p><p>java</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    // 构造方法</span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 常规方法</span><br><span class="line">    public void introduce() &#123;</span><br><span class="line">        System.out.println(&quot;My name is &quot; + name + &quot; and I am &quot; + age + &quot; years old.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 常规方法（重载）</span><br><span class="line">    public void setAge(int newAge) &#123;</span><br><span class="line">        age = newAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 使用构造方法创建对象</span><br><span class="line">        Person person = new Person(&quot;Alice&quot;, 30);</span><br><span class="line">        </span><br><span class="line">        // 调用常规方法</span><br><span class="line">        person.introduce();</span><br><span class="line">        </span><br><span class="line">        // 调用重载的常规方法</span><br><span class="line">        person.setAge(31);</span><br><span class="line">        person.introduce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Person(String name, int age)</code>是构造方法，用于初始化<code>Person</code>对象的<code>name</code>和<code>age</code>属性。<code>introduce()</code>和<code>setAge(int newAge)</code>是常规方法，分别用于介绍个人信息和设置年龄。</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void yiyi(int[] arr)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;[&quot;);</span><br><span class="line">for(int x=0;x&lt;arr.length;x++)</span><br><span class="line">&#123;</span><br><span class="line">if(x==arr.length-1)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(arr[x]+&quot;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;]&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不去掉static，则可以在同一类里面使用；<br>如果去掉static则只能在另一个类里面使用：例如：s.show();<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void show()&#123;  </span><br><span class="line">    System.out.println(name+&quot;,&quot;+age);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="1-常用DOS命令"><a href="#1-常用DOS命令" class="headerlink" title="1.常用DOS命令"></a>1.常用DOS命令</h1><h2 id="1-1打开命令提示符窗口"><a href="#1-1打开命令提示符窗口" class="headerlink" title="1.1打开命令提示符窗口"></a>1.1打开命令提示符窗口</h2><ul><li>按下win+R</li><li>输入cmd</li><li>按下回车键<h2 id="1-2-常用命令"><a href="#1-2-常用命令" class="headerlink" title="1.2 常用命令"></a>1.2 常用命令</h2>![[Pasted image 20240708141815.png]]</li><li>在命令提示符窗口运行时，需要进入更详细的盘![[Pasted image 20240708142628.png]]</li><li>就比如这个，在进入D盘之后，还要进入JAVA这个盘里面</li><li>并且java 和javac 两个作用不一样![[Pasted image 20240708143215.png]]</li><li>![[Pasted image 20240708143310.png]]</li><li>上面的Hello.class就是Hello.java运行的结果(javac)</li></ul><h1 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2.基础语法"></a>2.基础语法</h1><h2 id="2-1注释"><a href="#2-1注释" class="headerlink" title="2.1注释"></a>2.1注释</h2><p>![[屏幕截图 1.png]]</p><h2 id="2-2关键字"><a href="#2-2关键字" class="headerlink" title="2.2关键字"></a>2.2关键字</h2><p>![[Pasted image 20240723072536.png]]</p><h2 id="2-3常量"><a href="#2-3常量" class="headerlink" title="2.3常量"></a>2.3常量</h2><p>![[Pasted image 20240708114444.png]]</p><h2 id="2-4数据类型"><a href="#2-4数据类型" class="headerlink" title="2.4数据类型"></a>2.4数据类型</h2><h3 id="2-4-1计算机的存储单元"><a href="#2-4-1计算机的存储单元" class="headerlink" title="2.4.1计算机的存储单元"></a>2.4.1计算机的存储单元</h3><p>![[Pasted image 20240708144024.png]]</p><ul><li>Java中的数据类型主要分为两大类：基本数据类型（Primitive Types）和引用数据类型（Reference Types）。每种数据类型都有其独特的特点和用途，以下是Java中各种数据类型的区别：</li></ul><h4 id="一、基本数据类型"><a href="#一、基本数据类型" class="headerlink" title="一、基本数据类型"></a>一、基本数据类型</h4><p>Java中的基本数据类型共有八种，分别是：byte、short、int、long、float、double、char、boolean。</p><p>整型（Integer Types）</p><ul><li>byte：8位有符号整数，取值范围是-128到127。常用于存储小的整数值或二进制数据。</li><li>short：16位有符号整数，取值范围是-32768到32767。常用于存储中等大小的整数值。</li><li>int：32位有符号整数，取值范围是-2^31到2^31-1，是Java中最常用的整数类型。</li><li>long：64位有符号整数，取值范围是-2^63到2^63-1。常用于存储非常大的整数值或需要高精度的浮点数运算。</li></ul><p>浮点型（Floating-Point Types）</p><ul><li>float：32位单精度浮点数，有效位数较短，精度不高，取值范围大约是-3.4E+38到3.4E+38。在赋值时需要加上f或F后缀，如3.14f。</li><li>double：64位双精度浮点数，有效位数长，精度高，取值范围大约是-1.8E+308到1.8E+308。Java中浮点数的默认类型是double，在赋值时可以省略d或D后缀。</li></ul><p>字符型（Character Type）</p><ul><li>char：16位Unicode字符，取值范围是0到65535。用于存储单个字符，如字母、数字或特殊符号。字符字面量用单引号括起来，如’A’、’中’等。</li></ul><p>布尔型（Boolean Type）</p><ul><li>boolean：表示逻辑值，只有两个取值true和false。常用于表示条件判断的结果或逻辑控制。<br><strong>（二没有涉及多少，仅参考一下）**</strong><h4 id="二、引用数据类型"><a href="#二、引用数据类型" class="headerlink" title="二、引用数据类型"></a>二、引用数据类型</h4></li></ul><p>引用数据类型不是直接存储数据值，而是存储数据的引用（或内存地址），指向实际的数据。Java中的引用数据类型包括类（Class）、接口（Interface）、数组（Array）等。</p><p>类（Class）：是创建对象的模板，包含了对象的状态（属性）和行为（方法）。<br>接口（Interface）：是一种引用类型，是一种抽象的类型，它是一种特殊的类，它是全抽象的（即不能有实现的方法）。<br>数组（Array）：用于存储固定大小的同类型元素，可以通过索引来访问数组中的元素。<br>基本数据类型与引用数据类型的区别</p><p>存储位置：</p><p>基本数据类型变量在栈内存中分配空间，存储的是具体的值。<br>引用数据类型变量在栈内存中分配空间，但存储的是引用（或内存地址），实际的数据存储在堆内存中。</p><p>传递方式：</p><p>基本数据类型作为参数传递时，是按值传递的，即传递的是变量值的副本。<br>引用数据类型作为参数传递时，是按引用传递的，即传递的是变量的引用（或内存地址），对参数的修改会影响到原变量。</p><p>默认值：</p><p>基本数据类型变量有默认值（如int的默认值是0，boolean的默认值是false）。<br>引用数据类型变量的默认值是null，表示它们不引用任何对象。</p><p>内存管理：</p><p>基本数据类型由JVM自动管理内存，不需要程序员手动释放。<br>引用数据类型需要程序员手动管理内存，包括创建对象、使用对象和释放对象（通过垃圾回收机制）。</p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>![[Pasted image 20240708144139.png]] ![[Pasted image 20240708144404.png]]</p><h3 id="2-4-2变量的注意事项"><a href="#2-4-2变量的注意事项" class="headerlink" title="2.4.2变量的注意事项"></a>2.4.2变量的注意事项</h3><p>![[Pasted image 20240708160128.png]]![[Pasted image 20240708160144.png]]![[Pasted image 20240708160242.png]]</p><h3 id="2-5标识符"><a href="#2-5标识符" class="headerlink" title="2.5标识符"></a>2.5标识符</h3><p>![[Pasted image 20240708160758.png]]![[Pasted image 20240708161122.png]]</p><h2 id="2-6类型转换"><a href="#2-6类型转换" class="headerlink" title="2.6类型转换"></a>2.6类型转换</h2><p>![[Pasted image 20240708162018.png]]![[Pasted image 20240708162833.png]]</p><h1 id="3运算符"><a href="#3运算符" class="headerlink" title="3运算符"></a>3运算符</h1><h2 id="3-1算术运算符"><a href="#3-1算术运算符" class="headerlink" title="3.1算术运算符"></a>3.1算术运算符</h2><p>![[Pasted image 20240708163511.png]]![[Pasted image 20240708163541.png]]![[Pasted image 20240708164100.png]]![[Pasted image 20240708164136.png]]![[Pasted image 20240708165410.png]]![[Pasted image 20240708165509.png]]</p><h2 id="3-2赋值运算符"><a href="#3-2赋值运算符" class="headerlink" title="3.2赋值运算符"></a>3.2赋值运算符</h2><p>![[Pasted image 20240708172431.png]]</p><ul><li><p>一般采用”i+=20”相似的模式，相对来说比较简单，避免因为数据类型不同而出错的情况<br>![[Pasted image 20240708172751.png]]![[Pasted image 20240708173139.png]]![[Pasted image 20240708174011.png]]![[Pasted image 20240708173321.png]]</p><h2 id="3-3逻辑运算符"><a href="#3-3逻辑运算符" class="headerlink" title="3.3逻辑运算符"></a>3.3逻辑运算符</h2><p>![[Pasted image 20240708191120.png]]![[Pasted image 20240708191150.png]]![[Pasted image 20240708192506.png]]</p><h2 id="3-4三元运算符"><a href="#3-4三元运算符" class="headerlink" title="3.4三元运算符"></a>3.4三元运算符</h2><p>![[Pasted image 20240708193527.png]]![[Pasted image 20240708194212.png]]![[Pasted image 20240708194257.png]]</p><h3 id="3-4-1两只老虎"><a href="#3-4-1两只老虎" class="headerlink" title="3.4.1两只老虎"></a>3.4.1两只老虎</h3><p>![[Pasted image 20240708194659.png]]<br>![[Pasted image 20240708194639.png]]</p><h3 id="3-4-1三个和尚"><a href="#3-4-1三个和尚" class="headerlink" title="3.4.1三个和尚"></a>3.4.1三个和尚</h3><p>![[Pasted image 20240708195911.png]]![[Pasted image 20240708200444.png]]</p><h1 id="4-数据输入"><a href="#4-数据输入" class="headerlink" title="4.数据输入"></a>4.数据输入</h1><h2 id="4-1数据输入"><a href="#4-1数据输入" class="headerlink" title="4.1数据输入"></a>4.1数据输入</h2><h3 id="4-1-1"><a href="#4-1-1" class="headerlink" title="4.1.1"></a>4.1.1</h3><p>![[Pasted image 20240708201207.png]]<br>![[Pasted image 20240708201339.png]]</p><h3 id="第一个程序-3-4-1三个和尚-4-1-2三个和尚升级版"><a href="#第一个程序-3-4-1三个和尚-4-1-2三个和尚升级版" class="headerlink" title="[[第一个程序#3.4.1三个和尚]]4.1.2三个和尚升级版"></a>[[第一个程序#3.4.1三个和尚]]4.1.2三个和尚升级版</h3><p>![[Pasted image 20240708203709.png]]![[Pasted image 20240708203753.png]]![[Pasted image 20240708204156.png]]</p><h2 id="4-2分支语句"><a href="#4-2分支语句" class="headerlink" title="4.2分支语句"></a>4.2分支语句</h2><h3 id="4-2-1流程控制"><a href="#4-2-1流程控制" class="headerlink" title="4.2.1流程控制"></a>4.2.1流程控制</h3></li><li><p>顺序结构</p><h4 id="4-2-1-1分支结构-if-swith"><a href="#4-2-1-1分支结构-if-swith" class="headerlink" title="4.2.1.1分支结构(if,swith)"></a>4.2.1.1分支结构(if,swith)</h4><p>![[Pasted image 20240708211605.png]]![[Pasted image 20240708211750.png]]![[Pasted image 20240708214001.png]]![[Pasted image 20240709071719.png]]![[Pasted image 20240709071936.png]]</p><h4 id="4-2-1-2循环结构-for-whlie-do…whlie"><a href="#4-2-1-2循环结构-for-whlie-do…whlie" class="headerlink" title="4.2.1.2循环结构(for,whlie,do…whlie)"></a>4.2.1.2循环结构(for,whlie,do…whlie)</h4></li><li><p>![[Pasted image 20240709075203.png]]</p></li><li>for循环和while循环可以相互转换</li><li>![[Pasted image 20240709083633.png]]![[Pasted image 20240709084854.png]]</li></ul><h3 id="4-2-2奇偶数案例"><a href="#4-2-2奇偶数案例" class="headerlink" title="4.2.2奇偶数案例"></a>4.2.2奇偶数案例</h3><p>![[Pasted image 20240708212014.png]]![[Pasted image 20240708212300.png]]![[Pasted image 20240708213619.png]]</p><h3 id="4-2-3考试奖励案例"><a href="#4-2-3考试奖励案例" class="headerlink" title="4.2.3考试奖励案例"></a>4.2.3考试奖励案例</h3><p>![[Pasted image 20240708214419.png]]![[Pasted image 20240708215054.png]]</p><h3 id="4-2-4春夏秋冬案例"><a href="#4-2-4春夏秋冬案例" class="headerlink" title="4.2.4春夏秋冬案例"></a>4.2.4春夏秋冬案例</h3><p>![[Pasted image 20240709074025.png]]![[Pasted image 20240709074259.png]]![[Pasted image 20240709074716.png]]</p><h3 id="4-2-5偶数求和水仙花"><a href="#4-2-5偶数求和水仙花" class="headerlink" title="4.2.5偶数求和水仙花"></a>4.2.5偶数求和水仙花</h3><p>![[Pasted image 20240709080456.png]]![[Pasted image 20240709080725.png]]![[Pasted image 20240709080915.png]]![[Pasted image 20240709081230.png]]</p><h3 id="4-2-6珠峰"><a href="#4-2-6珠峰" class="headerlink" title="4.2.6珠峰"></a>4.2.6珠峰</h3><p>![[Pasted image 20240709084056.png]]</p><h3 id="4-2-7三种循环体的区别"><a href="#4-2-7三种循环体的区别" class="headerlink" title="4.2.7三种循环体的区别"></a>4.2.7三种循环体的区别</h3><p>![[Pasted image 20240709085701.png]]<br>1、do…whlie循环体。先已经运行了一此<br>![[Pasted image 20240709085822.png]]![[Pasted image 20240709090043.png]]![[Pasted image 20240709090126.png]] </p><h3 id="4-2-8跳转控制语句"><a href="#4-2-8跳转控制语句" class="headerlink" title="4.2.8跳转控制语句"></a>4.2.8跳转控制语句</h3><p>![[Pasted image 20240709091250.png]]</p><h3 id="4-3Random"><a href="#4-3Random" class="headerlink" title="4.3Random"></a>4.3Random</h3><p>![[Pasted image 20240709092625.png]]![[Pasted image 20240709093005.png]]![[Pasted image 20240709094839.png]]</p><h1 id="5-IDEA"><a href="#5-IDEA" class="headerlink" title="5 IDEA"></a>5 IDEA</h1><p>![[Pasted image 20240709100743.png]]![[Pasted image 20240709101031.png]]</p><h1 id="6-数组"><a href="#6-数组" class="headerlink" title="6.数组"></a>6.数组</h1><h2 id="6-1-数组定义格式"><a href="#6-1-数组定义格式" class="headerlink" title="6.1 数组定义格式"></a>6.1 数组定义格式</h2><p>![[Pasted image 20240709102333.png]]</p><h2 id="6-2动态初始化"><a href="#6-2动态初始化" class="headerlink" title="6.2动态初始化"></a>6.2动态初始化</h2><p>![[Pasted image 20240709102658.png]]</p><h2 id="6-3内存分配"><a href="#6-3内存分配" class="headerlink" title="6.3内存分配"></a>6.3内存分配</h2><p>![[Pasted image 20240709103909.png]]![[Pasted image 20240709104334.png]]</p><h2 id="6-4-静态初始化格式"><a href="#6-4-静态初始化格式" class="headerlink" title="6.4 静态初始化格式"></a>6.4 静态初始化格式</h2><p>![[Pasted image 20240709105040.png]]</p><h2 id="6-5元素数量"><a href="#6-5元素数量" class="headerlink" title="6.5元素数量"></a>6.5元素数量</h2><p>![[Pasted image 20240709111918.png]]![[Pasted image 20240709140532.png]]</p><h2 id="6-6-获取最值"><a href="#6-6-获取最值" class="headerlink" title="6.6 获取最值"></a>6.6 获取最值</h2><p>![[Pasted image 20240709141124.png]]![[Pasted image 20240709141746.png]]</p><h1 id="7-方法"><a href="#7-方法" class="headerlink" title="7.方法"></a>7.方法</h1><h2 id="7-1方法的定义和调用"><a href="#7-1方法的定义和调用" class="headerlink" title="7.1方法的定义和调用"></a>7.1方法的定义和调用</h2><p>方法的名字是可以自定义的，但是也有部分限制<br>![[Pasted image 20240709142235.png]]![[Pasted image 20240709142328.png]]![[Pasted image 20240709142546.png]]![[Pasted image 20240709143224.png]]</p><ul><li>比较两个数的大小<br>![[Pasted image 20240709144233.png]]<h2 id="7-2带参数方法的定义与调用"><a href="#7-2带参数方法的定义与调用" class="headerlink" title="7.2带参数方法的定义与调用"></a>7.2带参数方法的定义与调用</h2></li></ul><p>![[Pasted image 20240709144652.png]]![[Pasted image 20240709144758.png]]![[Pasted image 20240709145004.png]]![[Pasted image 20240709145811.png]]</p><h2 id="7-3形参和实参"><a href="#7-3形参和实参" class="headerlink" title="7.3形参和实参"></a>7.3形参和实参</h2><ul><li>形参带有变量名</li><li>实参不带有变量名<br>![[Pasted image 20240709150102.png]]<h2 id="7-4到返回值方法的定义和调用"><a href="#7-4到返回值方法的定义和调用" class="headerlink" title="7.4到返回值方法的定义和调用"></a>7.4到返回值方法的定义和调用</h2>![[Pasted image 20240709151200.png]]![[Pasted image 20240709151428.png]]![[Pasted image 20240709151646.png]]![[Pasted image 20240709152655.png]]![[Pasted image 20240709152918.png]]<h2 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h2>![[Pasted image 20240709153222.png]]<br>![[Pasted image 20240709153205.png]]![[Pasted image 20240709153504.png]]![[Pasted image 20240709153638.png]]</li></ul><h2 id="7-5-方法重载"><a href="#7-5-方法重载" class="headerlink" title="7.5 方法重载"></a>7.5 方法重载</h2><p>![[Pasted image 20240709154255.png]]<br>![[Pasted image 20240709154131.png]]![[Pasted image 20240709154402.png]]![[Pasted image 20240709155909.png]]![[Pasted image 20240709161959.png]]![[Pasted image 20240709161746.png]]</p><h2 id="7-6数组遍历"><a href="#7-6数组遍历" class="headerlink" title="7.6数组遍历"></a>7.6数组遍历</h2><p>![[Pasted image 20240709162834.png]]![[Pasted image 20240709165437.png]]![[Pasted image 20240709165502.png]]![[Pasted image 20240709170119.png]]</p><h1 id="8-练习"><a href="#8-练习" class="headerlink" title="8.练习"></a>8.练习</h1><h2 id="8-1题if"><a href="#8-1题if" class="headerlink" title="8.1题if"></a>8.1题if</h2><p>![[Pasted image 20240709173451.png]]<br>![[Pasted image 20240709173350.png]]</p><h2 id="8-2switch"><a href="#8-2switch" class="headerlink" title="8.2switch"></a>8.2switch</h2><p>![[Pasted image 20240709175101.png]]</p><h2 id="8-3不死兔子和百钱百鸡"><a href="#8-3不死兔子和百钱百鸡" class="headerlink" title="8.3不死兔子和百钱百鸡"></a>8.3不死兔子和百钱百鸡</h2><p>![[Pasted image 20240709190740.png]]![[Pasted image 20240709192007.png]]![[Pasted image 20240709192221.png]]![[Pasted image 20240709192458.png]]![[Pasted image 20240709193417.png]]</p><h2 id="8-4数组内容相同"><a href="#8-4数组内容相同" class="headerlink" title="8.4数组内容相同"></a>8.4数组内容相同</h2><p>![[Pasted image 20240709194845.png]]![[Pasted image 20240709202017.png]]</p><h2 id="8-5调用"><a href="#8-5调用" class="headerlink" title="8.5调用"></a>8.5调用</h2><p>![[Pasted image 20240709202758.png]]![[Pasted image 20240709202819.png]]</p><h1 id="9-面向对象基础"><a href="#9-面向对象基础" class="headerlink" title="9.面向对象基础"></a>9.面向对象基础</h1><h2 id="有参和无参："><a href="#有参和无参：" class="headerlink" title="有参和无参："></a>有参和无参：</h2><p>无参构造法就就是创建public student(){},然后在测试类里面引用之后，运行{}里面的程序<br>和无参的方法差不多<br>![[Pasted image 20240711112651.png]]![[Pasted image 20240711112939.png]]</p><p> 在您提供的代码中：<br>public Student() {} 是无参构造方法。它没有参数，当你创建Student对象时如果不传递任何参数，就会调用这个构造方法。<br>public Student(String age, String name, String sid, String address) { … } 是有参构造方法。它有四个参数：age（应该为int类型，但您误写为String类型），name，sid，和address。当你创建Student对象并传递这四个参数时，就会调用这个构造方法。<br>下面是区分无参和有参构造方法的示例：<br>java<br>复制<br>// 无参构造方法<br>public Student() {<br>    // 初始化代码（如果有的话）<br>}</p><p>// 有参构造方法<br>public Student(String age, String name, String sid, String address) {<br>    this.age = Integer.parseInt(age); // 正确地将String转换为int<br>    this.name = name;<br>    this.sid = sid;<br>    this.address = address;<br>}<br>请注意，为了使代码逻辑正确，我已将有参构造方法中的age参数从String类型转换为int类型，因为在类的成员变量中，age被声明为int类型。</p><p>例如这两个代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student1 s=new student1();  </span><br><span class="line">s.setName(name);  </span><br><span class="line">s.setAge(age);  </span><br><span class="line">ad.add(s);//这个就是无参的</span><br><span class="line">如果是有参的话，（）里面会有值</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">public class arraylist4 &#123;  </span><br><span class="line">    private String name;  </span><br><span class="line">  </span><br><span class="line">    private int age;  </span><br><span class="line">  </span><br><span class="line">    public arraylist4()&#123;  </span><br><span class="line">        System.out.println(&quot;这是一个无参的&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public arraylist4(String name,int age)&#123;  </span><br><span class="line">    this.name=name;  </span><br><span class="line">    this.age=age;  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;这是一个you参的&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setName(String name)&#123;  </span><br><span class="line">    this.name=name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public String getName()&#123;  </span><br><span class="line">    return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setAge(int age)&#123;  </span><br><span class="line">    this.age=age;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public int getAge()&#123;  </span><br><span class="line">    return age;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">public class arraylist5 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        //创建集合对象  </span><br><span class="line">        ArrayList&lt;arraylist4&gt; sc = new ArrayList&lt;arraylist4&gt;();  </span><br><span class="line">        //创建学生对象  </span><br><span class="line">        arraylist4 arr=new arraylist4();  </span><br><span class="line">        arraylist4 s1 = new arraylist4(&quot;刘凤华&quot;, 11);  </span><br><span class="line">        arraylist4 s2 = new arraylist4(&quot;董&quot;, 11);  </span><br><span class="line">        arraylist4 s3 = new arraylist4(&quot;刘凤&quot;, 11);  </span><br><span class="line">        sc.add(s1);  </span><br><span class="line">        sc.add(s2);  </span><br><span class="line">        sc.add(s3);  </span><br><span class="line">        for (int i = 0; i &lt; sc.size(); i++) &#123;  </span><br><span class="line">            arraylist4 s = sc.get(i);  </span><br><span class="line">            System.out.println(s.getName() + &quot;,&quot; + s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-1类和对象"><a href="#9-1类和对象" class="headerlink" title="9.1类和对象"></a>9.1类和对象</h2><p>![[Pasted image 20240709210504.png]]![[Pasted image 20240709210818.png]]![[Pasted image 20240709210926.png]]![[Pasted image 20240709211011.png]]![[Pasted image 20240709211259.png]]</p><h2 id="9-2对象的使用"><a href="#9-2对象的使用" class="headerlink" title="9.2对象的使用"></a>9.2对象的使用</h2><p>![[Pasted image 20240709211552.png]]![[Pasted image 20240709211834.png]]![[Pasted image 20240709212001.png]]![[Pasted image 20240709213514.png]]![[Pasted image 20240709213648.png]]</p><h2 id="9-3运行方法"><a href="#9-3运行方法" class="headerlink" title="9.3运行方法"></a>9.3运行方法</h2><p>![[Pasted image 20240710072231.png]]![[Pasted image 20240710072650.png]]</p><h2 id="9-4成员变量和局部变量"><a href="#9-4成员变量和局部变量" class="headerlink" title="9.4成员变量和局部变量"></a>9.4成员变量和局部变量</h2><p>![[Pasted image 20240710073019.png]]![[Pasted image 20240710073135.png]]</p><h2 id="9-5-private关键字的使用"><a href="#9-5-private关键字的使用" class="headerlink" title="9.5 private关键字的使用"></a>9.5 private关键字的使用</h2><ul><li>get变量名的代码和set的代码没有先后顺序<br>![[Pasted image 20240710090648.png]]![[Pasted image 20240710140639.png]]![[Pasted image 20240710091038.png]]![[Pasted image 20240710091338.png]]![[Pasted image 20240710091458.png]]![[Pasted image 20240710111725.png]]![[Pasted image 20240710112532.png]]<h2 id="9-6-this关键字"><a href="#9-6-this关键字" class="headerlink" title="9.6 this关键字"></a>9.6 this关键字</h2>![[Pasted image 20240710140225.png]]![[Pasted image 20240710140705.png]]</li></ul><h2 id="9-7封装"><a href="#9-7封装" class="headerlink" title="9.7封装"></a>9.7封装</h2><p>![[Pasted image 20240710141325.png]]</p><h2 id="9-8构造方法"><a href="#9-8构造方法" class="headerlink" title="9.8构造方法"></a>9.8构造方法</h2><p>当没有输入自己的构造方法时，系统会有一个默认的构造方法。<br>![[Pasted image 20240710145057.png]]<br>![[Pasted image 20240710141725.png]]![[Pasted image 20240710144454.png]]![[Pasted image 20240710145142.png]]</p><h2 id="9-9标准类的制作"><a href="#9-9标准类的制作" class="headerlink" title="9.9标准类的制作"></a>9.9标准类的制作</h2><p>![[Pasted image 20240710151413.png]]![[Pasted image 20240710151748.png]]![[Pasted image 20240710151711.png]]![[Pasted image 20240710154033.png]]ed image 20240710154033.png]</p><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><h2 id="10-1API"><a href="#10-1API" class="headerlink" title="10.1API"></a>10.1API</h2><p>![[Pasted image 20240710161317.png]]![[Pasted image 20240710163024.png]]![[Pasted image 20240710163145.png]]</p><h2 id="10-2String"><a href="#10-2String" class="headerlink" title="10.2String"></a>10.2String</h2><p>![[Pasted image 20240710163818.png]]![[Pasted image 20240710164005.png]]![[Pasted image 20240710165321.png]]推荐使用直接赋值的方式创建字符串对象<br>2，特点<br>![[Pasted image 20240710170506.png]]![[Pasted image 20240710170550.png]]![[Pasted image 20240710171152.png]]![[Pasted image 20240710173120.png]]</p><h3 id="10-3-1用户登录"><a href="#10-3-1用户登录" class="headerlink" title="10.3.1用户登录"></a>10.3.1用户登录</h3><p>![[Pasted image 20240710173120.png]]![[Pasted image 20240710180009.png]]![[Pasted image 20240710180049.png]]![[Pasted image 20240710175907.png]]</p><h3 id="10-3-2遍历字符串"><a href="#10-3-2遍历字符串" class="headerlink" title="10.3.2遍历字符串"></a>10.3.2遍历字符串</h3><p>![[Pasted image 20240710184815.png]]![[Pasted image 20240710185349.png]]![[Pasted image 20240710191343.png]]</p><h3 id="10-3-3统计字符次数"><a href="#10-3-3统计字符次数" class="headerlink" title="10.3.3统计字符次数"></a>10.3.3统计字符次数</h3><p>![[Pasted image 20240710191717.png]]![[Pasted image 20240710193252.png]]</p><h3 id="10-3-4字符串拼接和反转"><a href="#10-3-4字符串拼接和反转" class="headerlink" title="10.3.4字符串拼接和反转"></a>10.3.4字符串拼接和反转</h3><p>在同一个类里面需要利用retuen 将数值返回<br>![[Pasted image 20240710194432.png]]![[Pasted image 20240711072843.png]]<br>![[Pasted image 20240710194406.png]]<br>反转：适适应s.charAt(i)进项遍历。<br>![[Pasted image 20240711075128.png]]![[Pasted image 20240711075151.png]]</p><h2 id="10-3StringBuilder"><a href="#10-3StringBuilder" class="headerlink" title="10.3StringBuilder"></a>10.3StringBuilder</h2><p>![[Pasted image 20240711075343.png]]![[Pasted image 20240711080050.png]]![[Pasted image 20240711080202.png]]![[Pasted image 20240711091540.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class stringbuider &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        StringBuilder sb=new StringBuilder();  </span><br><span class="line">        System.out.println(sb.length());  </span><br><span class="line">        StringBuilder sb2=new StringBuilder(&quot;hello&quot;);  </span><br><span class="line">        System.out.println(&quot;sb2:&quot;+sb2);  </span><br><span class="line">        System.out.println(sb2.length());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="1-stringbuilder的添加和反转方法"><a href="#1-stringbuilder的添加和反转方法" class="headerlink" title="1.stringbuilder的添加和反转方法"></a>1.stringbuilder的添加和反转方法</h4><p>![[Pasted image 20240711081129.png]]![[Pasted image 20240711081457.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class stringbuilderdemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        StringBuilder sb=new StringBuilder();  </span><br><span class="line">        sb.append(&quot;hello&quot;);  </span><br><span class="line">        sb.append(&quot;wo&quot;).append(&quot;zhi&quot;).append(&quot;dao&quot;).append(&quot;le&quot;);  </span><br><span class="line">        System.out.println(&quot;sb:&quot;+sb);  </span><br><span class="line">        sb.reverse();  </span><br><span class="line">        System.out.println(sb);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-stringbulider与string的转换"><a href="#2-stringbulider与string的转换" class="headerlink" title="2.stringbulider与string的转换"></a>2.stringbulider与string的转换</h4><p> ![[Pasted image 20240711082237.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> public static void main(String[] args) &#123;  </span><br><span class="line">    StringBuilder sb=new StringBuilder();  </span><br><span class="line">    sb.append(&quot;happy&quot;);  </span><br><span class="line">    String s=sb.toString();  </span><br><span class="line">    System.out.println(s+&quot;,&quot;);  </span><br><span class="line">    String d=&quot;word&quot;;  </span><br><span class="line">        StringBuilder t=new StringBuilder(d);  </span><br><span class="line">    System.out.println(t);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>![[Pasted image 20240711083504.png]]<br>![[Pasted image 20240711083426.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class stringbuilber2 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        int[] arr=&#123;1,2,3,4&#125;;  </span><br><span class="line">        String s=yiyi(arr);  </span><br><span class="line">        System.out.println(s);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static String yiyi(int[] arr)  </span><br><span class="line">    &#123;  </span><br><span class="line">        StringBuilder sb=new StringBuilder();  </span><br><span class="line">        sb.append(&quot;[&quot;);  </span><br><span class="line">        for(int i=0;i&lt;arr.length;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            if(i==arr.length-1)  </span><br><span class="line">            &#123;  </span><br><span class="line">                sb.append(arr[i]);  </span><br><span class="line">            &#125;  </span><br><span class="line">            else&#123;  </span><br><span class="line">                sb.append(arr[i]).append(&quot;,&quot;);  </span><br><span class="line">  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        sb.append(&quot;]&quot;);  </span><br><span class="line">        String s=sb.toString();  </span><br><span class="line">        return s;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-调转字符串"><a href="#3-调转字符串" class="headerlink" title="3.调转字符串"></a>3.调转字符串</h4><p>![[Pasted image 20240711091439.png]]![[Pasted image 20240711091628.png]]<br><figure class="highlight plaintext"><figcaption><span>java.util.Scanner;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class stringbuilber3 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Scanner sb=new Scanner(System.in);  </span><br><span class="line">        System.out.println(&quot;请输入一一串字符串&quot;);  </span><br><span class="line">        String line=sb.nextLine();  </span><br><span class="line">        String s=yiyi(line);  </span><br><span class="line">        System.out.println(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">public static String yiyi(String s)  </span><br><span class="line">&#123;  </span><br><span class="line">    StringBuilder sc=new StringBuilder(s);  </span><br><span class="line">    sc.reverse();  </span><br><span class="line">    String ss=sc.toString();  </span><br><span class="line">    return ss;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>也可以用return new StringBuilder(s).reverse().toString();代替上面的部分</p><h1 id="11集合"><a href="#11集合" class="headerlink" title="11集合"></a>11集合</h1><h2 id="11-1-ArrayList"><a href="#11-1-ArrayList" class="headerlink" title="11.1 ArrayList"></a>11.1 ArrayList</h2><p>![[Pasted image 20240711092726.png]]<br>![[Pasted image 20240711092750.png]]<br>和Scanner一样，也需要在前面输入import java.util.ArrayList;</p><p>![[Pasted image 20240711093511.png]]</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>![[Pasted image 20240711094714.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Objects;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">public class arraylist2 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; s=new ArrayList&lt;String&gt;();  </span><br><span class="line">        s.add(&quot;hello&quot;);  </span><br><span class="line">        s.add(&quot;world&quot;);  </span><br><span class="line">        s.add(&quot;java&quot;);  </span><br><span class="line">        s.add(&quot;ddsd&quot;);  </span><br><span class="line">        s.add(&quot;ddsd&quot;);  </span><br><span class="line">        s.add(&quot;ddsd&quot;);  </span><br><span class="line">  </span><br><span class="line">       //public boolean remove(Objects 0):  </span><br><span class="line">        System.out.println(s.remove(&quot;world&quot;));  </span><br><span class="line">        System.out.println(s.remove(1));  </span><br><span class="line">        System.out.println(s);  </span><br><span class="line">        System.out.println(s.set(3,&quot;javaee&quot;));  </span><br><span class="line">        System.out.println(s.get(0));  </span><br><span class="line">        System.out.println(s.get(2));  </span><br><span class="line">        System.out.println(s.size());</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h2 id="11-2案例"><a href="#11-2案例" class="headerlink" title="11.2案例"></a>11.2案例</h2><p>![[Pasted image 20240711101457.png]]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">public class arraylist4 &#123;  </span><br><span class="line">    private String name;  </span><br><span class="line">  </span><br><span class="line">    private int age;  </span><br><span class="line">  </span><br><span class="line">    public arraylist4()&#123;  </span><br><span class="line">        System.out.println(&quot;这是一个无参的&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public arraylist4(String name,int age)&#123;  </span><br><span class="line">    this.name=name;  </span><br><span class="line">    this.age=age;  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;这是一个you参的&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setName(String name)&#123;  </span><br><span class="line">    this.name=name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public String getName()&#123;  </span><br><span class="line">    return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setAge(int age)&#123;  </span><br><span class="line">    this.age=age;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public int getAge()&#123;  </span><br><span class="line">    return age;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">public class arraylist5 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        //创建集合对象  </span><br><span class="line">        ArrayList&lt;arraylist4&gt; sc = new ArrayList&lt;arraylist4&gt;();  </span><br><span class="line">        //创建学生对象  </span><br><span class="line">        arraylist4 arr=new arraylist4();  </span><br><span class="line">        arraylist4 s1 = new arraylist4(&quot;刘凤华&quot;, 11);  </span><br><span class="line">        arraylist4 s2 = new arraylist4(&quot;董&quot;, 11);  </span><br><span class="line">        arraylist4 s3 = new arraylist4(&quot;刘凤&quot;, 11);  </span><br><span class="line">        sc.add(s1);  </span><br><span class="line">        sc.add(s2);  </span><br><span class="line">        sc.add(s3);  </span><br><span class="line">        for (int i = 0; i &lt; sc.size(); i++) &#123;  </span><br><span class="line">            arraylist4 s = sc.get(i);  </span><br><span class="line">            System.out.println(s.getName() + &quot;,&quot; + s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![[Pasted image 20240711151500.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class student1 &#123;  </span><br><span class="line">     private String name;  </span><br><span class="line">     private String age;  </span><br><span class="line">    public student1()&#123;&#125;  //无参的定义</span><br><span class="line">    public  student1(String name,String age)  </span><br><span class="line">    &#123;  </span><br><span class="line">        this.name=name;  </span><br><span class="line">        this.age=age;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setName(String name)  </span><br><span class="line">    &#123;  </span><br><span class="line">        this.name=name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public String getName()&#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setAge(String age)  </span><br><span class="line">    &#123;  </span><br><span class="line">        this.age=age;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public String getAge()  </span><br><span class="line">    &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">public class arraylist6 &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;student1&gt; ad =new ArrayList&lt;student1&gt;();  </span><br><span class="line">        addstudent(ad);  </span><br><span class="line">        addstudent(ad);  </span><br><span class="line">        addstudent(ad);  </span><br><span class="line">        for(int i=0;i&lt;ad.size();i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            student1 s=ad.get(i);  </span><br><span class="line">            System.out.println(s.getName()+&quot;,&quot;+s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    public static void addstudent(ArrayList&lt;student1&gt; ad)&#123;  </span><br><span class="line">        Scanner sc=new Scanner(System.in);  </span><br><span class="line">        System.out.println(&quot;请输入学生的姓名&quot;);  </span><br><span class="line">        String name=sc.nextLine();  </span><br><span class="line">        System.out.println(&quot;请输入学生的年龄&quot;);  </span><br><span class="line">        String age=sc.nextLine();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        student1 s=new student1();  //这里为无参的用法，需要在student1定义</span><br><span class="line">        s.setName(name);  </span><br><span class="line">        s.setAge(age);  </span><br><span class="line">        ad.add(s);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="12-学生管理"><a href="#12-学生管理" class="headerlink" title="12.学生管理"></a>12.学生管理</h1><h2 id="12-1学生管理系统"><a href="#12-1学生管理系统" class="headerlink" title="12.1学生管理系统"></a>12.1学生管理系统</h2><h3 id="12-1-1定义学生"><a href="#12-1-1定义学生" class="headerlink" title="12.1.1定义学生"></a>12.1.1定义学生</h3><p>有快捷方法，Alt+Insert，必须在{}大括号内，然后无参的话，点击构造函数；有参的话，点击构造函数后，把其余选项都选上</p><p>![[Pasted image 20240711152538.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class student &#123;  </span><br><span class="line">    private String sid;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private String age;  </span><br><span class="line">    private String address;  </span><br><span class="line">  </span><br><span class="line">    public student() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public student(String sid, String name, String age, String address) &#123;  </span><br><span class="line">  </span><br><span class="line">        this.sid = sid;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">        this.address = address;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getSid() &#123;  </span><br><span class="line">        return sid;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setSid(String sid) &#123;  </span><br><span class="line">        this.sid = sid;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getAge() &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAge(String age) &#123;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getAddress() &#123;  </span><br><span class="line">        return address;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAddress(String address) &#123;  </span><br><span class="line">        this.address = address;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="12-1-2主界面的代码编写"><a href="#12-1-2主界面的代码编写" class="headerlink" title="12.1.2主界面的代码编写"></a>12.1.2主界面的代码编写</h3><p>System.exit(0);//JAM退出，虚拟机退出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;  </span><br><span class="line">  </span><br><span class="line">public class studentManager &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        while (true) &#123;  </span><br><span class="line">            System.out.println(&quot;--------欢迎来到学生管理系统--------&quot;);  </span><br><span class="line">            System.out.println(&quot;1 添加学生&quot;);  </span><br><span class="line">            System.out.println(&quot;2 删除学生&quot;);  </span><br><span class="line">            System.out.println(&quot;3 修改学生&quot;);  </span><br><span class="line">            System.out.println(&quot;4 查看所有学生&quot;);  </span><br><span class="line">            System.out.println(&quot;5 退出&quot;);  </span><br><span class="line">            System.out.println(&quot;请输入你的选择：&quot;);  </span><br><span class="line">  </span><br><span class="line">            Scanner sc = new Scanner(System.in);  </span><br><span class="line">            String line = sc.nextLine();  </span><br><span class="line">            switch (line) &#123;  </span><br><span class="line">                case &quot;1&quot;: &#123;  </span><br><span class="line">                    System.out.println(&quot;添加学生成功&quot;);  </span><br><span class="line">                    break;  </span><br><span class="line">                &#125;  </span><br><span class="line">                case &quot;2&quot;: &#123;  </span><br><span class="line">                    System.out.println(&quot;删除学生成功&quot;);  </span><br><span class="line">                    break;  </span><br><span class="line">                &#125;  </span><br><span class="line">                case &quot;3&quot;: &#123;  </span><br><span class="line">                    System.out.println(&quot;修改学生成功&quot;);  </span><br><span class="line">                    break;  </span><br><span class="line">                &#125;  </span><br><span class="line">                case &quot;4&quot;: &#123;  </span><br><span class="line">                    System.out.println(&quot;查看所有学生&quot;);  </span><br><span class="line">                    break;  </span><br><span class="line">                &#125;  </span><br><span class="line">                case &quot;5&quot;: &#123;  </span><br><span class="line">                    System.out.println(&quot;退出成功&quot;);  </span><br><span class="line">                    //break;  </span><br><span class="line">                    System.exit(0);//JAM退出  </span><br><span class="line">                &#125;  </span><br><span class="line">  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="12-1-3"><a href="#12-1-3" class="headerlink" title="12.1.3"></a>12.1.3</h3><p>![[Pasted image 20240711171623.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static  void findstudent(ArrayList&lt;student&gt; array)&#123;  </span><br><span class="line">    if(array.size()==0)  </span><br><span class="line">    &#123;  </span><br><span class="line">        System.out.println(&quot;无信息，请先添加信息再查询&quot;);  </span><br><span class="line">        return;  </span><br><span class="line">    &#125;  </span><br><span class="line">    System.out.println(&quot;学号\t\t\t姓名\t\t\t年龄\t\t\t居住地&quot;);  </span><br><span class="line">    for(int i=0;i&lt;array.size();i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        student s=array.get(i);  </span><br><span class="line">        System.out.println(s.getSid()+&quot;\t&quot;+s.getName()+&quot;\t&quot;+s.getAge()+&quot;\t&quot;+s.getAddress());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="12-1-3删除学生的代码"><a href="#12-1-3删除学生的代码" class="headerlink" title="12.1.3删除学生的代码"></a>12.1.3删除学生的代码</h3><p>![[Pasted image 20240711172608.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void  deletestudent(ArrayList&lt;student&gt; array)  </span><br><span class="line">  </span><br><span class="line">&#123;  </span><br><span class="line">    Scanner sc=new Scanner(System.in);  </span><br><span class="line">    System.out.println(&quot;请输入你的学号：&quot;);  </span><br><span class="line">    String sid=sc.nextLine();  </span><br><span class="line">    for(int i=0;i&lt;array.size();i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        student s=array.get(i);  </span><br><span class="line">        if(s.getSid().equals(sid))&#123;  </span><br><span class="line">            array.remove(i);  </span><br><span class="line">                    break;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12-2继承"><a href="#12-2继承" class="headerlink" title="12.2继承"></a>12.2继承</h2><h3 id="12-2-1"><a href="#12-2-1" class="headerlink" title="12.2.1"></a>12.2.1</h3><p>this:代表本类对象的引用<br>super:代表父类储存空间的标识（可以理解为父类对象引用）<br>![[Pasted image 20240712073241.png]]<br>![[Pasted image 20240711213924.png]]<br>![[Pasted image 20240711215808.png]]![[Pasted image 20240711215839.png]]![[Pasted image 20240711215911.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Customize Toolbar...</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Zi extends Fu&#123;  </span><br><span class="line">    public int streng=65;  </span><br><span class="line">    public void yiyi()&#123;  </span><br><span class="line">        int streng=20;  </span><br><span class="line">        System.out.println(streng);  </span><br><span class="line">        System.out.println(height);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class demo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Zi s=new Zi();  </span><br><span class="line">        Fu z=new Fu();  </span><br><span class="line">        z.show();  </span><br><span class="line">        System.out.println(s.height);  </span><br><span class="line">        s.show();  </span><br><span class="line">        s.yiyi();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="12-2-2-构造方法的特点"><a href="#12-2-2-构造方法的特点" class="headerlink" title="12.2.2  构造方法的特点"></a>12.2.2  构造方法的特点</h3><p>![[Pasted image 20240712082242.png]]<br>![[Pasted image 20240712075112.png]]-  在有参和无参构造中public+类的名字。例如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Zi extends Fu&#123;  </span><br><span class="line">    public int streng=65;  </span><br><span class="line">    public int height=34;  </span><br><span class="line">    public void yiyi()&#123;  </span><br><span class="line">        int streng=20;  </span><br><span class="line">        System.out.println(streng);  </span><br><span class="line">        System.out.println(height);  </span><br><span class="line">        System.out.println(super.height);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public  Zi()&#123;  </span><br><span class="line">        super();  </span><br><span class="line">        System.out.println(&quot;Zi中无参构造方法被调用&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public Zi(int age)&#123;  </span><br><span class="line">        super();  </span><br><span class="line">        System.out.println(&quot;Zi中带参构造方法被调用&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="12-2-3-成员访问特点"><a href="#12-2-3-成员访问特点" class="headerlink" title="12.2.3 成员访问特点"></a>12.2.3 成员访问特点</h3><p>![[Pasted image 20240712082743.png]]<br>@Override</p><ul><li>是一个注解（注解后面会学到）</li><li>可以帮助我们检查重写方法的方法声明的正确性</li></ul><h3 id="12-2-4-方法重写"><a href="#12-2-4-方法重写" class="headerlink" title="12.2.4 方法重写"></a>12.2.4 方法重写</h3><p>@Override</p><ul><li>是一个注解（注解后面会学到）</li><li>可以帮助我们检查重写方法的方法声明的正确性<br>1、私有方法不能被重写（父类私有成员是不能继承的）<br>2、子类方法访问权限不能更低（public&gt;默认&gt;私有）<h2 id="12-3继承的注意事项"><a href="#12-3继承的注意事项" class="headerlink" title="12.3继承的注意事项"></a>12.3继承的注意事项</h2>java中类只支持单继承，不支持多继承<br>java中类支持多层继承<br>![[Pasted image 20240712105311.png]]<h1 id="13-包和修饰符"><a href="#13-包和修饰符" class="headerlink" title="13 包和修饰符"></a>13 包和修饰符</h1>导包的格式</li><li>格式：import包名</li><li>范例：importcn.itcast.Teacher<br>其实就是import+引用的方法的包名.方法</li></ul><h2 id="13-1权限修饰符"><a href="#13-1权限修饰符" class="headerlink" title="13.1权限修饰符"></a>13.1权限修饰符</h2><p>![[Pasted image 20240712152933.png]]<br>不同包中的子类就像是所创建的“继承”包里面的Zi与其他包里面的Fu的关系；<br>不同包无关类就是在不同包，也没有父子关系的</p><h2 id="状态修饰符"><a href="#状态修饰符" class="headerlink" title="状态修饰符"></a>状态修饰符</h2><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>![[Pasted image 20240712153822.png]]![[Pasted image 20240712153853.png]]<br>父类中添加这个之后，子类之中就不能被重写<br>![[Pasted image 20240712154044.png]]<br>添加final之后，age的值就不能被修改了<br>![[Pasted image 20240712154346.png]]<br>一个类被final修饰之后，就不能作为父类</p><h2 id="final修饰局部变量"><a href="#final修饰局部变量" class="headerlink" title="final修饰局部变量"></a>final修饰局部变量</h2><p> ![[Pasted image 20240712155028.png]]<br>![[Pasted image 20240712155012.png]]</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>3.7 static访问特点</p><p>非静态的成员方法</p><p>·能访问静态的成员变量</p><p>·能访问非静态的成员变量</p><p>·能访问静态的成员方法</p><p>·能访问非静态的成员方法</p><p>静态的成员方法</p><p>·能访问静态的成员变量</p><p>·能访问静态的成员方法</p><p>总结成一句话就是:静态成员方法只能访问静态成员</p><p>![[Pasted image 20240712160444.png]]<br>static的意思是共享的 ，（就相当于配备了一台饮水机，供所有人使用）可以通过下面的操作，完成对多个学生相同学校的赋值</p><p>![[Pasted image 20240712155527.png]]<br>![[Pasted image 20240712155619.png]]</p><h1 id="14多态"><a href="#14多态" class="headerlink" title="14多态"></a>14多态</h1><h2 id="14-1-多态中成员的访问特点和好处"><a href="#14-1-多态中成员的访问特点和好处" class="headerlink" title="14.1 多态中成员的访问特点和好处"></a>14.1 多态中成员的访问特点和好处</h2><p>多态的好处和弊端</p><p>多态的好处:提高了程序的扩展性</p><p>具体体现:定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作</p><p>多态的弊端:不能使用子类的特有功能<br>![[Pasted image 20240712162447.png]]<br>这个例子里面有多态成员访问特点的讲解<br>例如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Cat extends Animal  </span><br><span class="line">&#123;  </span><br><span class="line">    public void eat()&#123;  </span><br><span class="line">        System.out.println(&quot;猫吃鱼&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class AnimalDemo &#123;  </span><br><span class="line">    public static void main(String[] args)&#123;  </span><br><span class="line">    //创建动物操作类的对象，调用方法</span><br><span class="line">        AnimalOperator ao=new AnimalOperator();  </span><br><span class="line">       Cat a=new Cat();  </span><br><span class="line">  </span><br><span class="line">        //Animal a=new Animal();  </span><br><span class="line">        ao.useAnimal(a);  </span><br><span class="line">  </span><br><span class="line">        Dog d=new Dog();  </span><br><span class="line">        ao.useAnimal(d);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class AnimalOperator &#123;</span><br><span class="line">/* public void useAnimal(Cat c)&#123;  </span><br><span class="line">     c.eat(); &#125;</span><br><span class="line">     如果采用这个的话，就相当于Cat c=new Cat();</span><br><span class="line">     只是创造一个相同类型的数</span><br><span class="line">     其实他输入 c 的数不会被带入，只是说会使得这个方法运行而已</span><br><span class="line">*/</span><br><span class="line">public void useAnimal(Animal a)&#123;  </span><br><span class="line">  </span><br><span class="line">        a.eat();  </span><br><span class="line">         /*Animal a=new Cat();  </span><br><span class="line">    就相当与这个，根据多态成  </span><br><span class="line">   员访问特点，编译看左边，在Animal中  </span><br><span class="line">   有eat的方法，然后采用Cat里面的eat方法  </span><br><span class="line">     */    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在图中，System.out.println(a.age)是成员变量<br>a.eat()是成员方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Animal &#123;  </span><br><span class="line">    public int age=40;  </span><br><span class="line">  </span><br><span class="line">    public void  eat()&#123;  </span><br><span class="line">        System.out.println(&quot;动物吃东西&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Cat extends Animal&#123;  </span><br><span class="line">    public int age=20;  </span><br><span class="line">    public int weight=10;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void eat()&#123;  </span><br><span class="line">        System.out.println(&quot;猫吃鱼&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void playGame()&#123;  </span><br><span class="line">        System.out.println(&quot;猫捉老鼠&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![[Pasted image 20240712162345.png]]</p><h2 id="14-2-多态中的转型"><a href="#14-2-多态中的转型" class="headerlink" title="14.2 多态中的转型"></a>14.2 多态中的转型</h2><p>多态转型解决子代不能展示特有功能，例如<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class AnimalDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Animal s=new Cat();  </span><br><span class="line">        s.eat();  </span><br><span class="line">        Cat sc=(Cat)s;  //这里就是向下转型的</span><br><span class="line">        sc.eat();  </span><br><span class="line">        sc.CatchMouse();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>![[Pasted image 20240712204620.png]]<br>![[Pasted image 20240712212448.png]]</p><h1 id="15抽象类"><a href="#15抽象类" class="headerlink" title="15抽象类"></a>15抽象类</h1><h2 id="15-1-抽象类的特点"><a href="#15-1-抽象类的特点" class="headerlink" title="15.1 抽象类的特点"></a>15.1 抽象类的特点</h2><ul><li><p>抽象类和抽象方法必须使用abstract关键字修饰<br>   public abstract class  类名{}<br>   例如：public  abstrcat class AnimalDemo</p><p>   public abstract void eat();<br>   例如：public abstract class Animal</p></li><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</li><li>抽象不能实例化<pre><code>  抽象类如何实例化呢？参照多态的方式，通过子类对象实例化，这叫抽象类多态</code></pre><ul><li>抽象类的子类<br>要么重写抽象类中的所有方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   public  abstract class Animal &#123;  </span><br><span class="line">    public  abstract void eat();  </span><br><span class="line">    public void sleep()&#123;  </span><br><span class="line">        System.out.println(&quot;睡觉&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   public class Cat extends Animal&#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void eat()&#123;  </span><br><span class="line">        System.out.println(&quot;猫吃鱼&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>要么是抽象类<br>public  abstract class Dog extends Animal<ul><li>抽象类中可以有非抽象方法<br>成员特点：</li><li>成员变量<br>可以是变量<br>如：private int age=11;<br>也可以是常量<br>private final String name=“北京”；</li></ul></li><li>构造方法<br> 有构造方法，但是不能实例化<br> 那么，构造方法的作用是什么呢？用于子类访问父类数据的初始化</li><li>成员方法<br>可以有抽象方法：限定子类必须完成某些动作<br>也可以有非抽象方法：提高代码复用性<h1 id="16接口"><a href="#16接口" class="headerlink" title="16接口"></a>16接口</h1><h2 id="16-1接口的特点"><a href="#16-1接口的特点" class="headerlink" title="16.1接口的特点"></a>16.1接口的特点</h2>接口用关键字interface修饰</li></ul></li></ul><p>public interface 接口名{</p><p>}</p><p>类实现接口用implements表示</p><p>public class 类名 implements 接口名 {</p><p>}</p><p>接口不能实例化</p><p>接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态。</p><p>多态的形式：具体类多态，抽象类多态，接口多态。</p><p>多态的前提：有继承或者实现关系；有方法重写；有父(类/接口)引用指向(子/实现)类对象</p><p>接口的实现类</p><p>要么重写接口中的所有抽象方法</p><p>要么是抽象类</p><h2 id="16-2接口成员特点"><a href="#16-2接口成员特点" class="headerlink" title="16.2接口成员特点"></a>16.2接口成员特点</h2><ul><li>成员变量<br>只能是常量<br>默认修饰符：public static fiinal<ul><li>构造方法<br> 接口中没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在<br> 一个类如果没有父类，默认继承Objectl类</li></ul></li><li>成员方法<br>只能是抽象方法<br>默认修饰符：public absract<h2 id="16-3类和接口的关系"><a href="#16-3类和接口的关系" class="headerlink" title="16.3类和接口的关系"></a>16.3类和接口的关系</h2></li><li>类和类的关系<br>继承关系，只能单继承，但是可以多层继承<ul><li>类和接口的关系<br>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口<br>![[Pasted image 20240713155820.png]]<ul><li>接口与接口的关系<br>继承关系，可以单继承，也可以多继承<br>![[Pasted image 20240713155836.png]]<h2 id="16-4抽象类和接口的区别"><a href="#16-4抽象类和接口的区别" class="headerlink" title="16.4抽象类和接口的区别"></a>16.4抽象类和接口的区别</h2></li></ul></li></ul></li><li>成员区别<br>抽象类    变量，常量；有构造方法；有抽象方法，也有非抽象方法<br>接口        常量；抽象方法<ul><li>关系区别<br>类与类   继承，单继承<br>类与接口 实现，可以单实现，也可以多实现<br>接口与接口     继承，单继承，多继承<ul><li>设计理念区别<br>抽象类 对类抽象，包括属性、行为<br>接口     对行为抽象，主要是行为<br>![[Pasted image 20240713161937.png]]<br>其实接口在里面就相当于插件，需要安装锁子的时候，安装锁子<h2 id="16-5案例"><a href="#16-5案例" class="headerlink" title="16.5案例"></a>16.5案例</h2>![[Pasted image 20240713163303.png]]</li></ul></li></ul></li></ul><p>![[Pasted image 20240713162947.png]]</p><h1 id="17形参和返回值"><a href="#17形参和返回值" class="headerlink" title="17形参和返回值"></a>17形参和返回值</h1><h2 id="17-1-类名作为形参和返回值"><a href="#17-1-类名作为形参和返回值" class="headerlink" title="17.1 类名作为形参和返回值"></a>17.1 类名作为形参和返回值</h2><ul><li>方法的形参是类名，其实需要的是该类的对象</li><li>方法的返回值是类名，其实返回的是该类的对象</li></ul><p>抽象类名作为形参和返回值</p><ul><li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</li><li>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</li></ul><p>抽象类比类多一个类，主要是抽象类编译看左边，执行看右边，抽象类还需要一个类似于animal的类</p><p>接口名作为形参和返回值</p><ul><li>方法的形参是接口名，其实需要的是该接口的实现类对象</li><li>方法的返回值是接口名，其实返回的是该接口的实现类对象<br>其实和抽象类差不多<h2 id="17-2内部类"><a href="#17-2内部类" class="headerlink" title="17.2内部类"></a>17.2内部类</h2>![[Pasted image 20240715082855.png]]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Outer &#123;  </span><br><span class="line">    private int num=10;  </span><br><span class="line">    public class Inner&#123;  </span><br><span class="line">        public void show()&#123;  </span><br><span class="line">            System.out.println(num);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void method()&#123;  </span><br><span class="line">        Inner i=new Inner();  </span><br><span class="line">        i.show();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>局部内部类是在方法中定义的类，所以外界是无法直接使用，需要在方法内部创建对象并使用<br>该类可以直接访问外部类的成员，也可以访问方法内的局部变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Outer &#123;  </span><br><span class="line">    private int num=10;  </span><br><span class="line">    private int num2=32;  </span><br><span class="line">    public void method()&#123;  </span><br><span class="line">        class Inner&#123;  </span><br><span class="line">            public void show()&#123;  </span><br><span class="line">                System.out.println(num);  </span><br><span class="line">                System.out.println(num2);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        Inner i=new Inner();  </span><br><span class="line">        i.show();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class OuterDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Outer o=new Outer();  </span><br><span class="line">        o.method();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>![[Pasted image 20240715094001.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Inter &#123;  </span><br><span class="line">    void show();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Outer &#123;  </span><br><span class="line">    public void method()&#123;  </span><br><span class="line">        new Inter()&#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public void show()&#123;  </span><br><span class="line">                System.out.println(&quot;匿名内部类&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;.show();  </span><br><span class="line">        Inter i=new Inter() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public void show() &#123;  </span><br><span class="line">                System.out.println(&quot;匿名内部类&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;;  </span><br><span class="line">        i.show();  </span><br><span class="line">        i.show();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class OuterDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Outer o=new Outer();  </span><br><span class="line">        o.method();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240715103710.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Cat implements Eat &#123;  </span><br><span class="line">    public void eat()&#123;  </span><br><span class="line">        System.out.println(&quot;猫吃鱼&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class EatDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        EatOperater ao=new EatOperater();  </span><br><span class="line">        Eat j=new Cat();  </span><br><span class="line">        ao.useeat(j);  </span><br><span class="line">  </span><br><span class="line">        ao.useeat(new Cat()&#123;  </span><br><span class="line">            public void eat()&#123;  </span><br><span class="line">                System.out.println(&quot;狗吃骨头&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Eat &#123;  </span><br><span class="line">    void eat();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Out &#123;  </span><br><span class="line">    private int num=12;  </span><br><span class="line">    public class Inner&#123;  </span><br><span class="line">        public void show()&#123;  </span><br><span class="line">            System.out.println(num);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    private class InnerPrivate&#123;  </span><br><span class="line">        public void yiyi()&#123;  </span><br><span class="line">            System.out.println(num);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void method()&#123;  </span><br><span class="line">        InnerPrivate i=new InnerPrivate();  </span><br><span class="line">        i.yiyi();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class OutDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Out.Inner i=new Out().new Inner();  </span><br><span class="line">        i.show();  </span><br><span class="line">  </span><br><span class="line">        Out o=new Out();  </span><br><span class="line">        o.method();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-API"><a href="#18-API" class="headerlink" title="18.API"></a>18.API</h1><h2 id="18-1Math"><a href="#18-1Math" class="headerlink" title="18.1Math"></a>18.1Math</h2><p>![[Pasted image 20240715104310.png]]![[Pasted image 20240715110206.png]]</p><h2 id="18-2System"><a href="#18-2System" class="headerlink" title="18.2System"></a>18.2System</h2><p>![[Pasted image 20240715110126.png]]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class yiyi &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">//        System.out.println(&quot;开始&quot;);  </span><br><span class="line">//        // public static void exit(int status):  </span><br><span class="line">//        System.exit(0);  </span><br><span class="line">//        System.out.println(&quot;结束&quot;);  </span><br><span class="line">       //System.out.println(System.currentTimeMillis());        long start =System.currentTimeMillis();  </span><br><span class="line">        for(int i=0;i&lt;10000;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        long end =System.currentTimeMillis();  </span><br><span class="line">        System.out.println(&quot;共好时：&quot;+(end-start)+&quot;毫秒&quot;);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        //System.out.println(System.currentTimeMillis()*1.0/1000/60/60/24/365+&quot;年&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-3object"><a href="#18-3object" class="headerlink" title="18.3object"></a>18.3object</h2><p>类Object是类层次结构的根。每个类都有object作为超类。所有类都直接或者间接的继承该类<br>构造方法：public Object()<br>回想面向对象中，为什么说子类的构造方法默认访问的是父类的无参构造方法？<br>因为他们的顶级父类只有无参构造法<br>看方法的码源，选中方法，按下Ctrl+B<br>建议所有子类重写字方法<br>如何重写呢？自动生成即可<br>![[Pasted image 20240715144541.png]]</p><h2 id="18-4Arrays"><a href="#18-4Arrays" class="headerlink" title="18.4Arrays"></a>18.4Arrays</h2><p> ![[Pasted image 20240715144732.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> public class ArrayDemo  </span><br><span class="line">&#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        int[] arr = &#123;23, 34, 45, 24, 45&#125;;  </span><br><span class="line">        for (int x = 0; x &lt; arr.length - 1; x++) &#123;  </span><br><span class="line">            for (int i = 0; i &lt; arr.length - 1 - x; i++) &#123;  </span><br><span class="line">                if (arr[i] &gt; arr[i + 1]) &#123;  </span><br><span class="line">                    int temp = arr[i];  </span><br><span class="line">                    arr[i] = arr[i + 1];  </span><br><span class="line">                    arr[i + 1] = temp;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(arrayToString(arr));  </span><br><span class="line">    &#125;  </span><br><span class="line">        public static String arrayToString( int[] arr)&#123;  </span><br><span class="line">        StringBuilder sb=new StringBuilder();  </span><br><span class="line">        sb.append(&quot;[&quot;);  </span><br><span class="line">        for(int i=0;i&lt;arr.length;i++)&#123;  </span><br><span class="line">            if(i== arr.length-1)&#123;  </span><br><span class="line">                sb.append(arr[i]);  </span><br><span class="line">  </span><br><span class="line">            &#125;  </span><br><span class="line">            else&#123;  </span><br><span class="line">                sb.append(arr[i]).append(&quot;,&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        sb.append(&quot;]&quot;);  </span><br><span class="line">    String s= sb.toString();  </span><br><span class="line">    return s;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">//        yiyi(arr);  </span><br><span class="line">  </span><br><span class="line">//    &#125;  </span><br><span class="line">//  </span><br><span class="line">//        public static void yiyi(int[] arr)  </span><br><span class="line">//        &#123;  </span><br><span class="line">//            System.out.println(&quot;[&quot;);  </span><br><span class="line">//            for(int x=0;x&lt;arr.length;x++)  </span><br><span class="line">//            &#123;  </span><br><span class="line">//                if(x==arr.length-1)  </span><br><span class="line">//                &#123;  </span><br><span class="line">//                    System.out.println(arr[x]);  </span><br><span class="line">//                &#125;  </span><br><span class="line">//                else  </span><br><span class="line">//                &#123;  </span><br><span class="line">//                    System.out.println(arr[x]+&quot;,&quot;);  </span><br><span class="line">//                &#125;  </span><br><span class="line">//            &#125;  </span><br><span class="line">//            System.out.println(&quot;]&quot;);  </span><br><span class="line">//  </span><br><span class="line">//  </span><br><span class="line">//        &#125;  </span><br><span class="line">//  </span><br><span class="line">//  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br> ![[Pasted image 20240715154157.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> import java.util.Arrays;  </span><br><span class="line">public class ArraysDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        int[] arr=&#123;23,34,24,45,65&#125;;  </span><br><span class="line">        System.out.println(Arrays.toString(arr));  </span><br><span class="line">        Arrays.sort(arr);  </span><br><span class="line">        System.out.println(Arrays.toString(arr));  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="18-5基本类型包装类概述"><a href="#18-5基本类型包装类概述" class="headerlink" title="18.5基本类型包装类概述"></a>18.5基本类型包装类概述</h2><p>![[Pasted image 20240715160240.png]]![[Pasted image 20240715160417.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class integerDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Integer i1=Integer.valueOf(100);  </span><br><span class="line">        System.out.println((i1));  </span><br><span class="line">        Integer i2=Integer.valueOf(&quot;2&quot;);  </span><br><span class="line">        System.out.println(i2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="18-6-int-和String的相互转换"><a href="#18-6-int-和String的相互转换" class="headerlink" title="18.6 int 和String的相互转换"></a>18.6 int 和String的相互转换</h2><p>基本类型包装类的最常见操作就是：用于基本类型和字符串之间的相互转换<br>![[Pasted image 20240715163727.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class zhuanhuan &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        int number=100;  </span><br><span class="line">        String s1=&quot;&quot;+number;  </span><br><span class="line">        System.out.println(s1);  </span><br><span class="line">  </span><br><span class="line">        String s2=String.valueOf(number);  </span><br><span class="line">        System.out.println(s2);  </span><br><span class="line">  </span><br><span class="line">        String s=&quot;100&quot;;  </span><br><span class="line">        Integer i=Integer.valueOf(s);  </span><br><span class="line">        int x=i.intValue();  </span><br><span class="line">        System.out.println(x);  </span><br><span class="line">  </span><br><span class="line">        int y=Integer.parseInt(s);  </span><br><span class="line">        System.out.println(y);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240715164153.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;  </span><br><span class="line">  </span><br><span class="line">public class IntegerTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        String s=&quot;12 34 45 65 45&quot;;  </span><br><span class="line">        String[] strArray=s.split(&quot;&quot;);  </span><br><span class="line">  </span><br><span class="line">        int[] arr=new int[strArray.length];  </span><br><span class="line">        for(int i=0;i&lt;arr.length; i++)&#123;  </span><br><span class="line">            arr[i]=Integer.parseInt(strArray[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Arrays.sort(arr);  </span><br><span class="line">StringBuilder sb=new StringBuilder();  </span><br><span class="line">for(int i=0;i&lt;arr.length;i++)&#123;  </span><br><span class="line">    if(i==arr.length-1)&#123;  </span><br><span class="line">        sb.append(arr[i]);  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        sb.append(arr[i]).append(&quot;&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">String result=sb.toString();  </span><br><span class="line">System.out.println(&quot;result:&quot;+result);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h2><ul><li>装箱：把基本数据类型转换为对应的包装类类型</li><li>拆箱：把包装类类型转换为对应的基本数据类型</li></ul><p>![[Pasted image 20240715173926.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class zhuangxiang &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Integer i=Integer.valueOf(100);  </span><br><span class="line">        Integer ii=100;//自动装箱  </span><br><span class="line">  </span><br><span class="line">       //ii=ii.intValue()+200;//拆箱然后装箱  </span><br><span class="line">        ii+=200;  </span><br><span class="line">        System.out.println(ii);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Date类概述和构造方法"><a href="#Date类概述和构造方法" class="headerlink" title="Date类概述和构造方法"></a>Date类概述和构造方法</h2><p>![[Pasted image 20240715193000.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Date;  </span><br><span class="line">public class Datelei &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">    Date d1=new Date();  </span><br><span class="line">    System.out.println(d1);  </span><br><span class="line">    long date=1000*60*60;  </span><br><span class="line">    Date d2=new Date();  </span><br><span class="line">    System.out.println(d2);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>![[Pasted image 20240715200759.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class DateDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Date d=new Date();  </span><br><span class="line">        System.out.println(d.getTime()*1.0/1000/60/60/24/365+&quot;年&quot;);  </span><br><span class="line">        long time=System.currentTimeMillis();  </span><br><span class="line">        d.setTime(time);  </span><br><span class="line">        System.out.println(d);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><p>SimpleDateFormat是一个具体的类，用于以区域设置敏感的方式格式化和解析日期。我们重点学习日期格式化和解析<br>日期和时间格式由日期和时间模式字符串制定，在日期和时间模式字符串中，从‘A’到’Z‘以及从’a‘到’z‘引导的字母被解释为表示日期或时间字符串的组件的模式字母<br>常用的模式字母以及对应关系如下：<br>![[Pasted image 20240715202339.png]]![[Pasted image 20240715202354.png]]<br>![[Pasted image 20240715202432.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.text.ParseException;  </span><br><span class="line">import java.util.Date;  </span><br><span class="line">import java.text.SimpleDateFormat;  </span><br><span class="line">  </span><br><span class="line">public class SimpleDateformademo &#123;  </span><br><span class="line">    public static void main(String[] args) throws ParseException &#123;  </span><br><span class="line">        Date d=new Date();  </span><br><span class="line">        SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy年MM月dd日HH:mm:ss&quot;);  </span><br><span class="line">        String s=sdf.format(d);  </span><br><span class="line">        System.out.println(s);  </span><br><span class="line">        String ss=&quot;2048-08-09 11:11:11&quot;;  </span><br><span class="line">        SimpleDateFormat sdf2=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  </span><br><span class="line">        Date dd=sdf2.parse(ss);  </span><br><span class="line">        System.out.println(dd);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240715210902.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.text.ParseException;  </span><br><span class="line">import java.text.SimpleDateFormat;  </span><br><span class="line">import java.util.Date;  </span><br><span class="line">  </span><br><span class="line">public class DateUtils &#123;  </span><br><span class="line">    private DateUtils()&#123;&#125;  </span><br><span class="line">    public static String dateToString(Date date,String format)&#123;  </span><br><span class="line">        SimpleDateFormat sdf =new SimpleDateFormat(format);  </span><br><span class="line">        String s= sdf.format(date);  </span><br><span class="line">        return s;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static Date stringToDate(String s,String format) throws ParseException &#123;  </span><br><span class="line">        SimpleDateFormat sdf=new SimpleDateFormat(format);  </span><br><span class="line">        Date d=sdf.parse(s);  </span><br><span class="line">        return d;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.text.ParseException;  </span><br><span class="line">import java.util.Date;  </span><br><span class="line">  </span><br><span class="line">public class Date1 &#123;  </span><br><span class="line">    public static void main(String[] args) throws ParseException &#123;  </span><br><span class="line">        Date d=new Date();  </span><br><span class="line">        String s1=DateUtils.dateToString(d,&quot;yyyy年MM月dd日 HH：mm:ss&quot;);  </span><br><span class="line">        System.out.println(s1);  </span><br><span class="line">        String s2=DateUtils.dateToString(d,&quot;yyyy年MM月dd日 &quot;);  </span><br><span class="line">        System.out.println(s1);  </span><br><span class="line">        String s3=DateUtils.dateToString(d,&quot; HH：mm:ss&quot;);  </span><br><span class="line">        System.out.println(s1);  </span><br><span class="line">        System.out.println(&quot;------&quot;);  </span><br><span class="line">        String s=&quot;2048-08-09 12:12:12&quot;;  </span><br><span class="line">        Date dd=DateUtils.stringToDate(s,&quot;yyyy-MM-dd HH:mm:ss&quot;);  </span><br><span class="line">        System.out.println(d);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>![[Pasted image 20240716081923.png]]<br>get方法其实就是将Calendar里面的语句输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Calendar;  </span><br><span class="line">  </span><br><span class="line">public class CalendarDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Calendar c=Calendar.getInstance();  </span><br><span class="line">        int year=c.get(Calendar.YEAR);  </span><br><span class="line">        int month=c.get(Calendar.MONTH)+1;  </span><br><span class="line">        int date=c.get(Calendar.DATE);  </span><br><span class="line">        System.out.println(year+&quot;年&quot;+month+&quot;月&quot;+date+&quot;日&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240716082624.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Calendar;  </span><br><span class="line">  </span><br><span class="line">public class CalendarDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Calendar c=Calendar.getInstance();  </span><br><span class="line">//        int year=c.get(Calendar.YEAR);  </span><br><span class="line">//        int month=c.get(Calendar.MONTH)+1;  </span><br><span class="line">//        int date=c.get(Calendar.DATE);  </span><br><span class="line">//        System.out.println(year+&quot;年&quot;+month+&quot;月&quot;+date+&quot;日&quot;);  </span><br><span class="line">  </span><br><span class="line">        c.add(Calendar.YEAR,-3);  </span><br><span class="line">        int year=c.get(Calendar.YEAR);  </span><br><span class="line">        int month=c.get(Calendar.MONTH)+1;  </span><br><span class="line">        int date=c.get(Calendar.DATE);  </span><br><span class="line">        System.out.println(year+&quot;年&quot;+month+&quot;月&quot;+date+&quot;日&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240716085419.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;  </span><br><span class="line">import java.util.Calendar;  </span><br><span class="line">  </span><br><span class="line">public class Calendar1 &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        public static void main(String[] args) &#123;  </span><br><span class="line">            Scanner sc=new Scanner(System.in);  </span><br><span class="line">            System.out.println(&quot;请输入年份：&quot;);  </span><br><span class="line">            int year=sc.nextInt();  </span><br><span class="line">  </span><br><span class="line">            Calendar c=Calendar.getInstance();  </span><br><span class="line">            c.set(year,2,1);  </span><br><span class="line">            c.add(Calendar.DATE,-1);  </span><br><span class="line">            int date=c.get(Calendar.DATE);  </span><br><span class="line">            System.out.println(year+&quot;年的2月份有&quot;+date+&quot;天&quot;);  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="19异常"><a href="#19异常" class="headerlink" title="19异常"></a>19异常</h1><h2 id="19-1异常概述"><a href="#19-1异常概述" class="headerlink" title="19.1异常概述"></a>19.1异常概述</h2><p>![[Pasted image 20240716091831.png]]</p><h2 id="19-2JVM的默认处理方案"><a href="#19-2JVM的默认处理方案" class="headerlink" title="19.2JVM的默认处理方案"></a>19.2JVM的默认处理方案</h2><p>![[Pasted image 20240716092217.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class _01 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        System.out.println(&quot;kaishi&quot;);  </span><br><span class="line">        method();  </span><br><span class="line">        System.out.println(&quot;jieshu&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void method()&#123;  </span><br><span class="line">        int[] arr=&#123;1,2,3&#125;;  </span><br><span class="line">        System.out.println(arr[3]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">//kaishi  </span><br><span class="line">//Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3  </span><br><span class="line">//  at 异常._01.method(_01.java:11)  </span><br><span class="line">//  at 异常._01.main(_01.java:6)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="19-3异常处理"><a href="#19-3异常处理" class="headerlink" title="19.3异常处理"></a>19.3异常处理</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try{}catch(){}"></a>try{}catch(){}</h3><p>![[Pasted image 20240716094536.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class _02 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        System.out.println(&quot;开始&quot;);  </span><br><span class="line">        method();  </span><br><span class="line">        System.out.println(&quot;结束&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void method()&#123;  </span><br><span class="line">        try&#123;  </span><br><span class="line">            int[] arr=&#123;112,324,45,324,34&#125;;  </span><br><span class="line">            System.out.println(arr[5]);  </span><br><span class="line">        &#125;catch(ArrayIndexOutOfBoundsException e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Throeable的成员方法"><a href="#Throeable的成员方法" class="headerlink" title="Throeable的成员方法"></a>Throeable的成员方法</h3><p>![[Pasted image 20240716100658.png]]<br>第三种方法是最详细的<br>![[Pasted image 20240716100641.png]]</p><h2 id="19-4编译时异常和运行时异常的区别"><a href="#19-4编译时异常和运行时异常的区别" class="headerlink" title="19.4编译时异常和运行时异常的区别"></a>19.4编译时异常和运行时异常的区别</h2><p>![[Pasted image 20240716105039.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mport java.text.ParseException;  </span><br><span class="line">import java.text.SimpleDateFormat;  </span><br><span class="line">import java.util.Date;  </span><br><span class="line">  </span><br><span class="line">public class _03 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        //method2();  </span><br><span class="line">         method();  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void method()&#123;  </span><br><span class="line">        try&#123;  </span><br><span class="line">            String s=&quot;2048-08-09&quot;;  </span><br><span class="line">            SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);  </span><br><span class="line">            Date d=sdf.parse(s);  </span><br><span class="line">            System.out.println(d);  </span><br><span class="line">        &#125;catch(ParseException e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    //运行时异常  </span><br><span class="line">//    public static void method2()&#123;  </span><br><span class="line">//        try&#123;  </span><br><span class="line">//            int[] arr=&#123;1,2,3&#125;;  </span><br><span class="line">//            System.out.println(3);  </span><br><span class="line">//        &#125;catch(ArithmeticException e)&#123;  </span><br><span class="line">//            e.printStackTrace();  </span><br><span class="line">//        &#125;  </span><br><span class="line">//  </span><br><span class="line">//    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="19-5异常处理之throws"><a href="#19-5异常处理之throws" class="headerlink" title="19.5异常处理之throws"></a>19.5异常处理之throws</h2><p>throws 异常类名 只是把错误抛出去，程序不会再运行下去，要是想让程序运行下去，就必须使用try…catch…进行处理<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import java.text.ParseException;  </span><br><span class="line">import java.text.SimpleDateFormat;  </span><br><span class="line">import java.util.Date;  </span><br><span class="line">  </span><br><span class="line">public class _03 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        //method2();  </span><br><span class="line">        try &#123;  </span><br><span class="line">            method();  </span><br><span class="line">        &#125; catch (ParseException e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void method()throws ParseException&#123;  </span><br><span class="line">        try&#123;  </span><br><span class="line">            String s=&quot;2048-08-09&quot;;  </span><br><span class="line">            SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);  </span><br><span class="line">            Date d=sdf.parse(s);  </span><br><span class="line">            System.out.println(d);  </span><br><span class="line">        &#125;catch(ParseException e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    //运行时异常  </span><br><span class="line">//    public static void method2()&#123;  </span><br><span class="line">//        try&#123;  </span><br><span class="line">//            int[] arr=&#123;1,2,3&#125;;  </span><br><span class="line">//            System.out.println(3);  </span><br><span class="line">//        &#125;catch(ArithmeticException e)&#123;  </span><br><span class="line">//            e.printStackTrace();  </span><br><span class="line">//        &#125;  </span><br><span class="line">//  </span><br><span class="line">//    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="19-6自定义异常"><a href="#19-6自定义异常" class="headerlink" title="19.6自定义异常"></a>19.6自定义异常</h2><p>![[Pasted image 20240716112359.png]]<br>![[Pasted image 20240716112341.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class ScoreExcption extends Exception &#123;  </span><br><span class="line">    public ScoreExcption() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public ScoreExcption(String message) &#123;  </span><br><span class="line">        super(message);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Teacher &#123;  </span><br><span class="line">    public void checkScore(int score)throws ScoreExcption&#123;  </span><br><span class="line">        if(score&lt;0||score&gt;100)&#123;  </span><br><span class="line">            throw new ScoreExcption(&quot;你给的分数有误，分数应该在0-100之间&quot;);  </span><br><span class="line">        &#125;else&#123;  </span><br><span class="line">            System.out.println(&quot;分数正常&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">public class TeacherTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Scanner  sc=new Scanner(System.in);  </span><br><span class="line">        System.out.println(&quot;请输入分数&quot;);  </span><br><span class="line">        int score=sc.nextInt();  </span><br><span class="line">        Teacher t=new Teacher();  </span><br><span class="line">        try &#123;  </span><br><span class="line">            t.checkScore(score);  </span><br><span class="line">        &#125; catch (ScoreExcption e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="20-集合进阶"><a href="#20-集合进阶" class="headerlink" title="20 集合进阶"></a>20 集合进阶</h1><h2 id="20-1Collection"><a href="#20-1Collection" class="headerlink" title="20.1Collection"></a>20.1Collection</h2><p>![[Pasted image 20240716142542.png]]</p><h3 id="1-1Collection-集合概述和使用"><a href="#1-1Collection-集合概述和使用" class="headerlink" title="1.1Collection 集合概述和使用"></a>1.1Collection 集合概述和使用</h3><p>![[Pasted image 20240716143427.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Collection;  </span><br><span class="line">public class CollectionDem0 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Collection&lt;String&gt; c=new ArrayList&lt;String&gt;();  </span><br><span class="line">        c.add(&quot;hello&quot;);  </span><br><span class="line">        c.add(&quot;world&quot;);  </span><br><span class="line">        c.add(&quot;java&quot;);  </span><br><span class="line">        System.out.println(c);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-2Collection集合常用的方法"><a href="#1-2Collection集合常用的方法" class="headerlink" title="1.2Collection集合常用的方法"></a>1.2Collection集合常用的方法</h3><p>![[Pasted image 20240716144721.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Collection;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">public class Demo1 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Collection&lt;String&gt; c=new ArrayList&lt;&gt;();  </span><br><span class="line">        c.add(&quot;hello&quot;);  </span><br><span class="line">        c.add(&quot;world&quot;);  </span><br><span class="line">        c.add(&quot;world&quot;);  </span><br><span class="line">        System.out.println(c);  </span><br><span class="line">      //  System.out.println(c.remove(&quot;hello&quot;));  </span><br><span class="line">        //c.clear();       // System.out.println(c.contains(&quot;world&quot;));        //System.out.println(c);        //System.out.println(c.isEmpty());        System.out.println(c.size());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-3Collection集合的遍历"><a href="#1-3Collection集合的遍历" class="headerlink" title="1.3Collection集合的遍历"></a>1.3Collection集合的遍历</h3><p>![[Pasted image 20240716152935.png]]<br>![[Pasted image 20240716152831.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Collection;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Iterator;  </span><br><span class="line">public class IteratorDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Collection&lt;String&gt; c=new ArrayList&lt;&gt;();  </span><br><span class="line">        c.add(&quot;hello&quot;);  </span><br><span class="line">        c.add(&quot;world&quot;);  </span><br><span class="line">        c.add(&quot;java&quot;);  </span><br><span class="line">        Iterator&lt;String&gt; it=c.iterator();  </span><br><span class="line">        while (it.hasNext())&#123;  </span><br><span class="line">            String s= it.next();  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>![[Pasted image 20240716154830.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private int age;  </span><br><span class="line">  </span><br><span class="line">    public Student() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Student(String name, int age) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getAge() &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAge(int age) &#123;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Itgerator;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class StudentDeno(String[] args)&#123;</span><br><span class="line">Collection&lt;Student&gt; c=new ArrayList&lt;&gt;()；</span><br><span class="line">student s1=new student(&quot;林青霞&quot;，23)；</span><br><span class="line">student s2=new student(&quot;张曼玉&quot;,34);</span><br><span class="line">student s3=new student(&quot;王祖贤&quot;,34);</span><br><span class="line">c.add(s1);</span><br><span class="line">c.add(s2);</span><br><span class="line">c.add(s3);</span><br><span class="line"></span><br><span class="line">Interator&lt;Student&gt; it=c.iterator();</span><br><span class="line">while(it.hasNext())&#123;</span><br><span class="line">Student s=it.next();</span><br><span class="line">System.out.println(s.getName()+&quot;,&quot;+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="List集合概述和特点"><a href="#List集合概述和特点" class="headerlink" title="List集合概述和特点"></a>List集合概述和特点</h3><ul><li>List 集合概述</li><li>有序集合（也称为序列），用户可以精确控制列表中每个元素的插入位置。用户可以通过索引访问元素，并搜索列表中的元素</li><li>与Set 集合不同，列表通常允许重复的元素<br>List集合特点</li><li>有序：储存和取出的元素顺序一致</li><li>可重复：储存的元素可以重复<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Iterator;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">public class LIstDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;String&gt; list=new ArrayList&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        list.add(&quot;hell0&quot;);  </span><br><span class="line">        list.add(&quot;world&quot;);  </span><br><span class="line">        list.add(&quot;java&quot;);  </span><br><span class="line">        list.add(&quot;world&quot;);  </span><br><span class="line">        System.out.println(list);  </span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();  </span><br><span class="line">        while(it.hasNext())&#123;  </span><br><span class="line">            String s = it.next();  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="List集合特有方法"><a href="#List集合特有方法" class="headerlink" title="List集合特有方法"></a>List集合特有方法</h3><p>![[Pasted image 20240716170627.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">public class ListDemo2 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;String&gt; list=new ArrayList&lt;&gt;();  </span><br><span class="line">        list.add(&quot;hello&quot;);  </span><br><span class="line">        list.add(&quot;world&quot;);  </span><br><span class="line">        list.add(&quot;java&quot;);  </span><br><span class="line">        list.add(1,&quot;dsd&quot; );  </span><br><span class="line">        System.out.println(list.remove(1));  </span><br><span class="line">        System.out.println(list.set(1,&quot;javase&quot;));  </span><br><span class="line">        System.out.println(list.get(1));  </span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;  </span><br><span class="line">            String s=list.get(i);  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240716170714.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Iterator;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">public class LIstDemo3 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;Student&gt; list =new ArrayList&lt;&gt;();  </span><br><span class="line">        Student s1=new Student(&quot;林重阳&quot;,24);  </span><br><span class="line">        Student s2=new Student(&quot;刘凤华&quot;,24);  </span><br><span class="line">        Student s3=new Student(&quot;白素贞&quot;,24);  </span><br><span class="line">  </span><br><span class="line">list.add(s1);  </span><br><span class="line">list.add(s2);  </span><br><span class="line">list.add(s3);  </span><br><span class="line">        Iterator&lt;Student&gt; it=list.iterator();  </span><br><span class="line">        while(it.hasNext())&#123;  </span><br><span class="line">            Student s=it.next();  </span><br><span class="line">            System.out.println(s.getName()+ s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;  </span><br><span class="line">            Student s = list.get(i);  </span><br><span class="line">            System.out.println(s.getName()+ s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并发修改异常<br>![[Pasted image 20240716173459.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Iterator;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">public class 并发 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;String&gt; list=new ArrayList&lt;&gt;();  </span><br><span class="line">        list.add(&quot;hello&quot;);  </span><br><span class="line">        list.add(&quot;world&quot;);  </span><br><span class="line">        list.add(&quot;java&quot;);  </span><br><span class="line">        Iterator&lt;String&gt; it= list.iterator();  </span><br><span class="line">//        while(it.hasNext())&#123;  </span><br><span class="line">//            String s=it.next();  </span><br><span class="line">//            if(s.equals(&quot;world&quot;))&#123;  </span><br><span class="line">//                list.add(&quot;javaee&quot;);  </span><br><span class="line">//            &#125;  </span><br><span class="line">//        &#125;  </span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;  </span><br><span class="line">            String s=list.get(i);  </span><br><span class="line">            if(s.equals(&quot;world&quot;))&#123;  </span><br><span class="line">                list.add(&quot;javaee&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Listlterator"><a href="#Listlterator" class="headerlink" title="Listlterator"></a>Listlterator</h3><p>Listlterator:列表迭代器</p><ul><li>通过List集合listlterator()方法得到，所以说它是List集合特有的迭代器</li><li>用于允许程序员沿任意方向遍历列表的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置<br>Listlterator 中的常用方法<ul><li>E next():返回迭代器中的下一个元素</li><li>boolean hasNext():如果迭代具有更多元素，则返回true；</li><li>E previous():返回列表中的上一个元素</li><li>boolean hasPrevious():如果此列表迭代器在相反方向遍历列表时具有更过元素，则返回true</li><li>void add(E e):将指定的元素插入列表 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> import java.util.ArrayList;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">import java.util.ListIterator;  </span><br><span class="line">  </span><br><span class="line">public class ListlteratorDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;String&gt; s=new ArrayList&lt;&gt;();  </span><br><span class="line">        s.add(&quot;hello&quot;);  </span><br><span class="line">        s.add(&quot;world&quot;);  </span><br><span class="line">        s.add(&quot;java&quot;);  </span><br><span class="line">        ListIterator&lt;String&gt; lit=s.listIterator();  </span><br><span class="line">        while (lit.hasNext())&#123;  </span><br><span class="line">            String d=lit.next();  </span><br><span class="line">            if(d</span><br><span class="line">            .equals(&quot;world&quot;))&#123;  </span><br><span class="line">                lit.add(&quot;javaee&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2>![[Pasted image 20240716192556.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">public class ForDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">        int[] arr=&#123;1,2,3,4,5&#125;;  </span><br><span class="line">        for(int i:arr)&#123;  </span><br><span class="line">            System.out.println(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        String[] strArray=&#123;&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;&#125;;  </span><br><span class="line">        for(String d:strArray)&#123;  </span><br><span class="line">            System.out.println(d);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        List&lt;String&gt; list=new ArrayList&lt;&gt;();  </span><br><span class="line">        list.add(&quot;hello&quot;);  </span><br><span class="line">        list.add(&quot;world&quot;);  </span><br><span class="line">        list.add(&quot;java&quot;);  </span><br><span class="line">        for(String s:list)&#123;  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        for(String s:list)&#123;  </span><br><span class="line">            if(s.equals(&quot;world&quot;))&#123;  </span><br><span class="line">                list.add(&quot;javaee&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3>![[Pasted image 20240716200234.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Iterator;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">public class anli  &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;Student&gt; list=new ArrayList&lt;&gt;();  </span><br><span class="line">        Student s1=new Student(&quot;林青霞&quot;,30);  </span><br><span class="line">        Student s2=new Student(&quot;张曼玉&quot;,30);  </span><br><span class="line">        Student s3=new Student(&quot;王祖贤&quot;,33);  </span><br><span class="line">        list.add(s1);  </span><br><span class="line">        list.add(s2);  </span><br><span class="line">        list.add(s3);  </span><br><span class="line">        Iterator&lt;Student&gt; it= list.iterator();  </span><br><span class="line">        while (it.hasNext())&#123;  </span><br><span class="line">            Student s=it.next();  </span><br><span class="line">            System.out.println(s.getName()+&quot;,&quot;+s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">  </span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;  </span><br><span class="line">            Student s=list.get(i);  </span><br><span class="line">            System.out.println(s.getName()+&quot;,&quot;+s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        for(Student s:list)&#123;  </span><br><span class="line">            System.out.println(s.getName()+&quot;,&quot;+s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List集合子类特点"><a href="#List集合子类特点" class="headerlink" title="List集合子类特点"></a>List集合子类特点</h3>![[Pasted image 20240716202255.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.LinkedList;  </span><br><span class="line">  </span><br><span class="line">public class LisrDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; array =new ArrayList&lt;String&gt;();  </span><br><span class="line">        array.add(&quot;hello&quot;);  </span><br><span class="line">        array.add(&quot;world&quot;);  </span><br><span class="line">        array.add(&quot;java&quot;);  </span><br><span class="line">        for(String s:array)&#123;  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        LinkedList&lt;String&gt; linkedList=new LinkedList&lt;String&gt;();  </span><br><span class="line">        linkedList.add(&quot;hello&quot;);  </span><br><span class="line">        linkedList.add(&quot;world&quot;);  </span><br><span class="line">        linkedList.add(&quot;java&quot;);  </span><br><span class="line">        for(String s:linkedList)&#123;  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![[Pasted image 20240716210705.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Iterator;  </span><br><span class="line">  </span><br><span class="line">public class ArrayListDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;Student&gt; s=new ArrayList&lt;&gt;();  </span><br><span class="line">        Student s1=new Student(&quot;林青霞&quot;,23);  </span><br><span class="line">        Student s2=new Student(&quot;liufernhuha&quot;,23);  </span><br><span class="line">        Student s3=new Student(&quot;zhangjiaxuan&quot;,23);  </span><br><span class="line">  </span><br><span class="line">        s.add(s1);  </span><br><span class="line">        s.add(s2);  </span><br><span class="line">        s.add(s3);  </span><br><span class="line">        Iterator&lt;Student&gt; it=s.iterator();  </span><br><span class="line">        while(it.hasNext())&#123;  </span><br><span class="line">            Student t=it.next();  </span><br><span class="line">            System.out.println(t.getName()+&quot;,&quot;+t.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        for(int i=0;i&lt;s.size();i++)&#123;  </span><br><span class="line">            Student t=s.get(i);  </span><br><span class="line">            System.out.println(t.getName()+&quot;,&quot;+t.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">        for(Student t:s)&#123;  </span><br><span class="line">  </span><br><span class="line">            System.out.println(t.getName()+&quot;,&quot;+t.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList集合的特有功能"><a href="#LinkedList集合的特有功能" class="headerlink" title="LinkedList集合的特有功能"></a>LinkedList集合的特有功能</h3>![[Pasted image 20240716211511.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.util.LinkedList;  </span><br><span class="line">  </span><br><span class="line">public class 集合的特有功能 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        LinkedList&lt;String&gt; linkedList=new LinkedList&lt;&gt;();  </span><br><span class="line">        linkedList.add(&quot;hello&quot;);  </span><br><span class="line">        linkedList.add(&quot;world&quot;);  </span><br><span class="line">        linkedList.add(&quot;java&quot;);  </span><br><span class="line">  </span><br><span class="line">        linkedList.addFirst(&quot;javase&quot;);  </span><br><span class="line">        linkedList.addFirst(&quot;javaee&quot;);  </span><br><span class="line">        System.out.println(linkedList.getFirst());  </span><br><span class="line">        System.out.println(linkedList.getLast());  </span><br><span class="line">        System.out.println(linkedList.removeFirst());  </span><br><span class="line">        System.out.println(linkedList.removeLast());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20-3set"><a href="#20-3set" class="headerlink" title="20.3set"></a>20.3set</h2><h3 id="20-3-1Set集合概述和特点"><a href="#20-3-1Set集合概述和特点" class="headerlink" title="20.3.1Set集合概述和特点"></a>20.3.1Set集合概述和特点</h3>![[Pasted image 20240716215526.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashSet;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class SetDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Set&lt;String&gt; set =new HashSet&lt;&gt;();  </span><br><span class="line">        set.add(&quot;hello&quot;);  </span><br><span class="line">        set.add(&quot;world&quot;);  </span><br><span class="line">        set.add(&quot;java&quot;);  </span><br><span class="line">        for(String s:set)&#123;  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h3><p>![[Pasted image 20240716215838.png]]</p><ul><li>哈希值相当于几个数字运算后的结果，不一定唯一，有相同的很正常，如“Aa”和“BB”的哈希值都是2112</li><li>在默认情况下，不同哈希值是不相同的</li><li>通过方法重写，可以实现不同对象的哈希值是相同的<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class HashDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Student s1=new Student(&quot;林青霞&quot;,30);  </span><br><span class="line">        System.out.println(s1.hashCode());  </span><br><span class="line">        System.out.println(s1.hashCode());  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        Student s2=new Student(&quot;林青霞&quot;,30);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(s2.hashCode());  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        System.out.println(&quot;hello&quot;.hashCode());  </span><br><span class="line">        System.out.println(&quot;world&quot;.hashCode());  </span><br><span class="line">        System.out.println(&quot;java&quot;.hashCode());  </span><br><span class="line">        System.out.println(&quot;----------&quot;);  </span><br><span class="line">        //哈希值相当于几个数字运算后的结果，不一定唯一，  </span><br><span class="line">        // 有相同的很正常，如“Aa&quot;和”BB“的哈希值都是2112  </span><br><span class="line">        System.out.println(&quot;重地&quot;.hashCode());  </span><br><span class="line">        System.out.println(&quot;通点&quot;.hashCode());  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">@Override  </span><br><span class="line">public int hashCode()&#123;  </span><br><span class="line">    return 0;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="HashSet集合概述和特点"><a href="#HashSet集合概述和特点" class="headerlink" title="HashSet集合概述和特点"></a>HashSet集合概述和特点</h3><p>![[Pasted image 20240717074540.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashSet;  </span><br><span class="line">  </span><br><span class="line">public class HashSetDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        HashSet&lt;String&gt; hs=new HashSet&lt;String&gt;();  </span><br><span class="line">        hs.add(&quot;hello&quot;);  </span><br><span class="line">        hs.add(&quot;world&quot;);  </span><br><span class="line">        hs.add(&quot;java&quot;);  </span><br><span class="line">        hs.add(&quot;world&quot;);  </span><br><span class="line">        for(String s:hs)&#123;  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="HashSet集合保证元素唯一性源码分析"><a href="#HashSet集合保证元素唯一性源码分析" class="headerlink" title="HashSet集合保证元素唯一性源码分析"></a>HashSet集合保证元素唯一性源码分析</h3><p>![[Pasted image 20240717080906.png]]</p><h3 id="常见数据结构之哈希表"><a href="#常见数据结构之哈希表" class="headerlink" title="常见数据结构之哈希表"></a>常见数据结构之哈希表</h3><p>![[Pasted image 20240717082008.png]]</p><h2 id=""><a href="#" class="headerlink" title="#"></a>#</h2><p>![[Pasted image 20240717093344.png]]</p><ul><li>不同对象的哈希值默认不同，就算储存的数据一模一样，无法保证储存内容一样，所以hasshest无法直接保证唯一性。需要重写两个方案，保证在对象内部储存一致时的哈希值相同，从而在通过hasshset保证元素唯一性</li><li>重写是因为要求成员变量相同时认为是同一个对象，hashSet依赖两个方法判断是不是重复元素，所以需要重写</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashSet;  </span><br><span class="line">  </span><br><span class="line">public class HashSetDeno &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        HashSet&lt;Student&gt; hs=new HashSet&lt;Student&gt;();  </span><br><span class="line">        Student s1=new Student(&quot;林黛玉&quot;,30);  </span><br><span class="line">        Student s2=new Student(&quot;林黛&quot;,30);  </span><br><span class="line">        Student s3=new Student(&quot;林玉&quot;,30);  </span><br><span class="line">        Student s4=new Student(&quot;林黛玉&quot;,30);  </span><br><span class="line">        hs.add(s1);  </span><br><span class="line">        hs.add(s2);  </span><br><span class="line">        hs.add(s3);  </span><br><span class="line">        hs.add(s4);  </span><br><span class="line">        for(Student s:hs)&#123;  </span><br><span class="line">            System.out.println(s.getName()+s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedHashSet集合概述和特点"><a href="#LinkedHashSet集合概述和特点" class="headerlink" title="LinkedHashSet集合概述和特点"></a>LinkedHashSet集合概述和特点</h3><ul><li>哈希表和链表实现的Set接口，具有可预测的迭代次序</li><li>由链表保证元素有序，也就是说元素的储存和取出顺序是一致的</li><li>由哈希表保证元素唯一，也就是说没有重复的元素<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.util.LinkedHashSet;  </span><br><span class="line">  </span><br><span class="line">public class LinkedHashSetDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        LinkedHashSet&lt;String&gt; linkedHashSet=new LinkedHashSet&lt;String&gt;();  </span><br><span class="line">        linkedHashSet.add(&quot;hello&quot;);  </span><br><span class="line">        linkedHashSet.add(&quot;world&quot;);  </span><br><span class="line">        linkedHashSet.add(&quot;java&quot;);  </span><br><span class="line">  </span><br><span class="line">        linkedHashSet.add(&quot;world&quot;);  </span><br><span class="line">        for(String s:linkedHashSet)&#123;  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>TreeSet集合特点</p><ul><li>元素有序，这里的顺序不是指储存和取出的顺序，而是按照一定的规则进行排序，具体排序方法取决于构造方法<pre><code>  TreeSet():根据其元素的自然排序进行排序  TreeSet(Comparator comparator):根据指定的比较器进行排序</code></pre></li><li>没有带索引的方法，所以不能使用普通for循环遍历</li><li>由于是Set集合，所以不包含重复元素的集合<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.util.TreeSet;  </span><br><span class="line">  </span><br><span class="line">public class TreeSetDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        TreeSet&lt;Integer&gt; ts=new TreeSet&lt;Integer&gt;();  </span><br><span class="line">        ts.add(10);  </span><br><span class="line">        ts.add(30);  </span><br><span class="line">        ts.add(24);  </span><br><span class="line">        ts.add(50);  </span><br><span class="line">        ts.add(30);  </span><br><span class="line">        for(Integer i:ts)&#123;  </span><br><span class="line">            System.out.println(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="自然排序Comparable的使用"><a href="#自然排序Comparable的使用" class="headerlink" title="自然排序Comparable的使用"></a>自然排序Comparable的使用</h3>![[Pasted image 20240717111819.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Student implements Comparable&lt;Student&gt;&#123;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private int age;  </span><br><span class="line">  </span><br><span class="line">    public Student() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Student(String name, int age) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getAge() &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAge(int age) &#123;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Override  </span><br><span class="line">    public int compareTo(Student s)&#123;  </span><br><span class="line">        int num=this.age-s.age;  </span><br><span class="line">        int num2=num==0?this.name.compareTo(s.name):num;  </span><br><span class="line">        return num2;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.TreeSet;  </span><br><span class="line">  </span><br><span class="line">public class TreeSetDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        TreeSet&lt;Student&gt; ts=new TreeSet&lt;Student&gt;();  </span><br><span class="line">        Student s1=new Student(&quot;xishi&quot;,29);  </span><br><span class="line">        Student s2=new Student(&quot;wangzhaojun&quot;,28);  </span><br><span class="line">        Student s3=new Student(&quot;diaochan&quot;,30);  </span><br><span class="line">        Student s4=new Student(&quot;yangyuhuan&quot;,33);  </span><br><span class="line">        Student s5=new Student(&quot;linqingxia&quot;,33);  </span><br><span class="line">        Student s6=new Student(&quot;linqingxia&quot;,33);  </span><br><span class="line">        ts.add(s1);  </span><br><span class="line">        ts.add(s2);  </span><br><span class="line">        ts.add(s3);  </span><br><span class="line">        ts.add(s4);  </span><br><span class="line">        ts.add(s5);  </span><br><span class="line">        ts.add(s6);  </span><br><span class="line">        for (Student s:ts)&#123;  </span><br><span class="line">            System.out.println(s.getName()+&quot;,&quot;+s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较器排序Comparator的使用"><a href="#比较器排序Comparator的使用" class="headerlink" title="比较器排序Comparator的使用"></a>比较器排序Comparator的使用</h3>![[Pasted image 20240717121703.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Comparator;  </span><br><span class="line">import java.util.TreeSet;  </span><br><span class="line">  </span><br><span class="line">public class TreeSetDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        TreeSet&lt;Student&gt; ts=new TreeSet&lt;Student&gt;(new Comparator&lt;Student&gt;() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public int compare(Student s1, Student s2) &#123;  </span><br><span class="line">                int num=s1.getAge()- s2.getAge();  </span><br><span class="line">                int num2=num==0?s1.getName().compareTo(s2.getName()):num;  </span><br><span class="line">                return num2;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">  </span><br><span class="line">    Student s1=new Student(&quot;xishi&quot;,29);  </span><br><span class="line">    Student s2=new Student(&quot;wangzhaojun&quot;,28);  </span><br><span class="line">    Student s3=new Student(&quot;diaochan&quot;,30);  </span><br><span class="line">    Student s4=new Student(&quot;yangyuhuan&quot;,33);  </span><br><span class="line">    Student s5=new Student(&quot;linqingxia&quot;,33);  </span><br><span class="line">    Student s6=new Student(&quot;linqingxia&quot;,33);  </span><br><span class="line">        ts.add(s1);  </span><br><span class="line">        ts.add(s2);  </span><br><span class="line">        ts.add(s3);  </span><br><span class="line">        ts.add(s4);  </span><br><span class="line">        ts.add(s5);  </span><br><span class="line">        ts.add(s6);  </span><br><span class="line">        for (Student s:ts)&#123;  </span><br><span class="line">            System.out.println(s.getName()+&quot;,&quot;+s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p>![[Pasted image 20240717121807.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Comparator;  </span><br><span class="line">import java.util.TreeSet;  </span><br><span class="line">  </span><br><span class="line">public class TreeSetDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        TreeSet&lt;Student&gt; ts=new TreeSet&lt;Student&gt;(new Comparator&lt;Student&gt;() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public int compare(Student s1, Student s2) &#123;  </span><br><span class="line">            int num=s2.getSum()- s1.getSum();  </span><br><span class="line">            int num2=num==0?s1.getChinese()-s2.getChinese():num;  </span><br><span class="line">            int num3=num2==0?s1.getName().compareTo(s2.getName()):num2;  </span><br><span class="line">            return num2;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        Student s1=new Student(&quot;linqingxia&quot;,35,57);  </span><br><span class="line">        Student s2=new Student(&quot;linqina&quot;,35,44);  </span><br><span class="line">        Student s3=new Student(&quot;linqgxia&quot;,35,54);  </span><br><span class="line">        Student s4=new Student(&quot;liingxia&quot;,35,53);  </span><br><span class="line">        Student s5=new Student(&quot;linqingxia&quot;,35,54);  </span><br><span class="line">        ts.add(s1);  </span><br><span class="line">        ts.add(s2);  </span><br><span class="line">        ts.add(s3);  </span><br><span class="line">        ts.add(s4);  </span><br><span class="line">        ts.add(s5);  </span><br><span class="line">for(Student s:ts)&#123;  </span><br><span class="line">    System.out.println(s.getName()+&quot;,&quot;+s.getChinese()+&quot;,&quot;+s.getMath());  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>![[Pasted image 20240717124447.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashSet;  </span><br><span class="line">import java.util.Random;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class SetDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Set&lt;Integer&gt; set=new HashSet&lt;Integer&gt;();  </span><br><span class="line">        //创建随机数对象  </span><br><span class="line">        Random r=new Random();  </span><br><span class="line">  </span><br><span class="line">        //判断集合的长度是不是小于10  </span><br><span class="line">        while(set.size()&lt;10)&#123;  </span><br><span class="line">            int number= r.nextInt(20)+1;  </span><br><span class="line">            set.add(number);  </span><br><span class="line">        &#125;  </span><br><span class="line">        for(Integer i:set)&#123;  </span><br><span class="line">            System.out.println(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="20-4泛型"><a href="#20-4泛型" class="headerlink" title="20.4泛型"></a>20.4泛型</h2><h3 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h3><p>![[Pasted image 20240717125925.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class GenericDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Student s=new Student();  </span><br><span class="line">        s.setName(&quot;林青霞&quot;);  </span><br><span class="line">        System.out.println(s.getName());  </span><br><span class="line">  </span><br><span class="line">        Teacher t=new Teacher();  </span><br><span class="line">        t.setAge(30);  </span><br><span class="line">        System.out.println(t.getAge());  </span><br><span class="line">Generic&lt;String&gt; g1=new Generic&lt;String&gt;();  </span><br><span class="line">g1.setT(&quot;林青霞&quot;);  </span><br><span class="line">        System.out.println(g1.getT());  </span><br><span class="line">        Generic&lt;Integer&gt; g2=new Generic&lt;Integer&gt;();  </span><br><span class="line">        g2.setT(30);  </span><br><span class="line">        System.out.println(g2.getT());  </span><br><span class="line">  </span><br><span class="line">        Generic&lt;Boolean&gt; g3=new Generic&lt;Boolean&gt;();  </span><br><span class="line">        g3.setT(true);  </span><br><span class="line">        System.out.println(g3.getT());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Generic&lt;T&gt; &#123;  </span><br><span class="line">    private T t;  </span><br><span class="line">    public T getT()&#123;  </span><br><span class="line">        return t;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setT(T t)&#123;  </span><br><span class="line">        this.t=t;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>![[Pasted image 20240717133530.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class yiyi &#123;  </span><br><span class="line">    public &lt;T&gt;void show(T t)&#123;  </span><br><span class="line">        System.out.println(t);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class yiyiDeno &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        yiyi g=new yiyi();  </span><br><span class="line">        g.show(&quot;linqingxia&quot;);  </span><br><span class="line">        g.show(23);  </span><br><span class="line">        g.show(12.34);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>![[Pasted image 20240717133914.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface yiyi&lt;T&gt; &#123;  </span><br><span class="line">    void show(T t);  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class yiyiImpl&lt;T&gt;  implements yiyi&lt;T&gt;&#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void show(T t)&#123;  </span><br><span class="line">        System.out.println(t);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class yiyiDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        yiyi  g1=new yiyiImpl();  </span><br><span class="line">            g1.show(&quot;linxiangx&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><p>![[Pasted image 20240717142712.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">import java.util.Objects;  </span><br><span class="line">  </span><br><span class="line">public class GenericDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;?&gt; list1=new ArrayList&lt;Objects&gt;();  </span><br><span class="line">        List&lt;?&gt; list2=new ArrayList&lt;Number&gt;();  </span><br><span class="line">        List&lt;?&gt; list3=new ArrayList&lt;Integer&gt;();  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">  </span><br><span class="line">        //类型通配符上限：&lt;? extend 类型&gt;  </span><br><span class="line">        List&lt;? extends Number&gt;list5=new ArrayList&lt;Number&gt;();  </span><br><span class="line">        List&lt;? extends Number&gt;list6=new ArrayList&lt;Integer&gt;();  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">  </span><br><span class="line">        List&lt;?super Number&gt;list7=new ArrayList&lt;Object&gt;();  </span><br><span class="line">        List&lt;? super Number&gt;list8=new ArrayList&lt;Number&gt;();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数又称参数个数可变，作用方法的形参出现，那么方法参数个数就是可变的了</p><ul><li>格式：修饰符 返回值类型 方法名（数据类型…变量名）{}</li><li>范例：public static int sum(int…a){}<br>可变参数注意事项<ul><li>这里的变量其实是一个数组</li><li>如果一个方法有多个参数，包含可变参数，可变参数要放在最后<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class ArgsDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        System.out.println(sum(2,3,4,5,5,34));  </span><br><span class="line">        System.out.println(sum(2,3,4,5,6,6,7,46,45));  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static int sum(int...a)&#123;  </span><br><span class="line">        int sum=0;  </span><br><span class="line">        for(int i:a)&#123;  </span><br><span class="line">            sum+=i;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        return sum;  </span><br><span class="line">    &#125;  </span><br><span class="line">    /*  </span><br><span class="line">    public static int sum(int b,int ...a)&#123;    return 0;&#125;  </span><br><span class="line">     */&#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数的使用"><a href="#可变参数的使用" class="headerlink" title="可变参数的使用"></a>可变参数的使用</h3>![[Pasted image 20240717151817.png]]Arrays工具类中有一个静态方法</li></ul></li><li>返回由指定数组支持的固定大小的列表</li><li>返回额度集合不能做增删操作，可以做修改操作<br>List接口中有一个静态方法：</li><li>返回包含任意数量元素的不可变列表</li><li>返回的集合不能做增删改操作<br>Set接口中有一个静态方法：<ul><li>返回一个包含任意数量元素的不可变集合</li><li>在给元素的时候，不能给重复的元素</li><li>返回的集合不能做增减操作，没有修改方法<h2 id="20-5MAP"><a href="#20-5MAP" class="headerlink" title="20.5MAP"></a>20.5MAP</h2><h3 id="MAP集合概述和使用"><a href="#MAP集合概述和使用" class="headerlink" title="MAP集合概述和使用"></a>MAP集合概述和使用</h3>![[Pasted image 20240717154526.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">  </span><br><span class="line">public class MaoDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Map&lt;String,String&gt;map=new HashMap&lt;String,String&gt;();  </span><br><span class="line">        map.put(&quot;itheima0001&quot;,&quot;lindaiyu&quot;);  </span><br><span class="line">        map.put(&quot;itheima002&quot;,&quot;zhangmayu&quot;);  </span><br><span class="line">        map.put(&quot;itheima003&quot;,&quot;王祖贤&quot;);  </span><br><span class="line">        System.out.println(map);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MAP集合的基本功能"><a href="#MAP集合的基本功能" class="headerlink" title="MAP集合的基本功能"></a>MAP集合的基本功能</h3>![[Pasted image 20240717155640.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">  </span><br><span class="line">public class MapDemo02 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Map&lt;String,String&gt; map=new HashMap&lt;String,String&gt;();  </span><br><span class="line">        map.put(&quot;张无忌&quot;,&quot;赵敏&quot;);  </span><br><span class="line">        map.put(&quot;郭靖&quot;,&quot;黄蓉&quot;);  </span><br><span class="line">        map.put(&quot;杨过&quot;,&quot;小龙女&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(map.remove(&quot;郭靖&quot;));  </span><br><span class="line">        System.out.println(map);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(map.containsKey(&quot;郭靖&quot;));  </span><br><span class="line">        System.out.println(map.isEmpty());  </span><br><span class="line">        System.out.println(map.size());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map集合的获取功能"><a href="#Map集合的获取功能" class="headerlink" title="Map集合的获取功能"></a>Map集合的获取功能</h3>![[Pasted image 20240717161328.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Collection;  </span><br><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class MapDemo03 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Map&lt;String,String&gt; map=new HashMap&lt;String,String&gt;();  </span><br><span class="line">        map.put(&quot;张无忌&quot;,&quot;赵敏&quot;);  </span><br><span class="line">        map.put(&quot;郭靖&quot;,&quot;黄蓉&quot;);  </span><br><span class="line">        map.put(&quot;杨过&quot;,&quot;小龙女&quot;);  </span><br><span class="line">        System.out.println(map.get(&quot;张无忌&quot;));  </span><br><span class="line">        Set&lt;String&gt; keySet=map.keySet();  </span><br><span class="line">        for(String key:keySet)&#123;  </span><br><span class="line">            System.out.println(key);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Collection&lt;String&gt; values=map.values();  </span><br><span class="line">        for(String value:values)&#123;  </span><br><span class="line">            System.out.println(value);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map集合遍历"><a href="#Map集合遍历" class="headerlink" title="Map集合遍历"></a>Map集合遍历</h3>![[Pasted image 20240717190455.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class MapDemo04 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Map&lt;String,String&gt; map=new HashMap&lt;String,String&gt;();  </span><br><span class="line">        map.put(&quot;张无忌&quot;,&quot;赵敏&quot;);  </span><br><span class="line">        map.put(&quot;郭靖&quot;,&quot;黄蓉&quot;);  </span><br><span class="line">        map.put(&quot;杨过&quot;,&quot;小龙女&quot;);  </span><br><span class="line">        //获取所有键的集合，用keySet()方法实现  </span><br><span class="line">        Set&lt;String&gt;keySet=map.keySet();  </span><br><span class="line">        //遍历键的集合，获取到每一个键。用增强for实现  </span><br><span class="line">        for(String key:keySet)&#123;  </span><br><span class="line">            //根据键去找  </span><br><span class="line">            String value=map.get(key);  </span><br><span class="line">            System.out.println(key+&quot;,&quot;+value);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>![[Pasted image 20240717191015.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class MapDemo05 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Map&lt;String,String&gt; map=new HashMap&lt;&gt;();  </span><br><span class="line">        map.put(&quot;张无忌&quot;,&quot;赵敏&quot;);  </span><br><span class="line">        map.put(&quot;郭靖&quot;,&quot;黄蓉&quot;);  </span><br><span class="line">        map.put(&quot;杨过&quot;,&quot;小龙女&quot;);  </span><br><span class="line">        Set&lt;Map.Entry&lt;String,String&gt;&gt; entrySet=map.entrySet();  </span><br><span class="line">        for(Map.Entry&lt;String,String&gt; me:entrySet)&#123;  </span><br><span class="line">            String key=me.getKey();  </span><br><span class="line">            String value=me.getValue();  </span><br><span class="line">            System.out.println(key+&quot;,&quot;+value);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><p>![[Pasted image 20240717194249.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;    </span><br><span class="line">import java.util.Map;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class HashMapDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        HashMap&lt;String,Student&gt; hm=new HashMap&lt;String,Student&gt;();  </span><br><span class="line">        Student s1=new Student(&quot;林青霞&quot;,30);  </span><br><span class="line">        Student s2=new Student(&quot;张曼玉&quot;,35);  </span><br><span class="line">        Student s3=new Student(&quot;王祖贤&quot;,23);  </span><br><span class="line">        hm.put(&quot;itheima01&quot;,s1);  </span><br><span class="line">        hm.put(&quot;itheima02&quot;,s2);  </span><br><span class="line">        hm.put(&quot;ithema03&quot;,s3);  </span><br><span class="line">  </span><br><span class="line">        //方法一，键找值  </span><br><span class="line">        Set&lt;String&gt; yiyi=hm.keySet();  </span><br><span class="line">        for(String yi:yiyi)&#123;  </span><br><span class="line">            Student value=hm.get(yi);  </span><br><span class="line">            System.out.println(value.getName()+&quot;,&quot;+value.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">        //方法二；键值对对象找键和值  </span><br><span class="line">        Set&lt;Map .Entry&lt;String,Student&gt;&gt; er=hm.entrySet();  </span><br><span class="line">        for(Map.Entry&lt;String,Student&gt; me: er)&#123;  </span><br><span class="line">            String key=me.getKey();  </span><br><span class="line">            Student value=me.getValue();  </span><br><span class="line">            System.out.println(key+&quot;,&quot;+value.getName()+&quot;,&quot;+value.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240717195814.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class MapDemo06 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;HashMap&lt;String,String&gt;&gt; array=new ArrayList&lt;HashMap&lt;String,String&gt;&gt;();  </span><br><span class="line">        HashMap&lt;String,String&gt; hm1=new HashMap&lt;String,String&gt;();  </span><br><span class="line">        hm1.put(&quot;孙策&quot;,&quot;大乔&quot;);  </span><br><span class="line">        hm1.put(&quot;周瑜&quot;,&quot;小乔&quot;);  </span><br><span class="line">        array.add(hm1);  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;String,String&gt; hm2=new HashMap&lt;String,String&gt;();  </span><br><span class="line">        hm2.put(&quot;郭靖&quot;,&quot;黄蓉&quot;);  </span><br><span class="line">        hm2.put(&quot;杨过&quot;,&quot;小龙女&quot;);  </span><br><span class="line">        array.add(hm2);  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;String,String&gt; hm3=new HashMap&lt;String,String&gt;();  </span><br><span class="line">        hm3.put(&quot;令狐冲&quot;,&quot;任盈盈&quot;);  </span><br><span class="line">        hm3.put(&quot;林平之&quot;,&quot;岳灵珊&quot;);  </span><br><span class="line">        array.add(hm3);  </span><br><span class="line">        for(HashMap&lt;String,String&gt; hm:array)&#123;  </span><br><span class="line">            Set&lt;String&gt; yiyi=hm.keySet();  </span><br><span class="line">            for(String key:yiyi)&#123;  </span><br><span class="line">                String value=hm.get(key);  </span><br><span class="line">                System.out.println(key+&quot;,&quot;+value);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240717201506.png]]![[Pasted image 20240717201627.png]]<br>![[Pasted image 20240717201659.png]]![[Pasted image 20240717204230.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Scanner;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class MapDemo7 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Scanner sc = new Scanner(System.in);  </span><br><span class="line">        System.out.println(&quot;请输入一个字符串&quot;);  </span><br><span class="line">        String line = sc.nextLine();  </span><br><span class="line">        HashMap&lt;Character,Integer&gt; hm=new HashMap&lt;Character,Integer&gt;();  </span><br><span class="line">         for(int i=0;i&lt;line.length();i++)&#123;  </span><br><span class="line">             char key=line.charAt(i);  </span><br><span class="line">             Integer value=hm.get(key);  </span><br><span class="line">             if(value==null)&#123;  </span><br><span class="line">                 hm.put(key,1);  </span><br><span class="line">             &#125;  </span><br><span class="line">             else&#123;  </span><br><span class="line">                 value++;  </span><br><span class="line">                 hm.put(key,value);  </span><br><span class="line">             &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">         StringBuilder sb=new StringBuilder();  </span><br><span class="line">        Set&lt;Character&gt; yiyi=hm.keySet();  </span><br><span class="line">        for(Character er:yiyi)&#123;  </span><br><span class="line">            Integer value=hm.get(er);  </span><br><span class="line">            sb.append(er).append(&quot;(&quot;).append(value).append(&quot;)&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        String result=sb.toString();  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="20-3Collections概述和使用"><a href="#20-3Collections概述和使用" class="headerlink" title="20.3Collections概述和使用"></a>20.3Collections概述和使用</h2><h3 id="Collections的使用"><a href="#Collections的使用" class="headerlink" title="Collections的使用"></a>Collections的使用</h3><p>![[Pasted image 20240717213827.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Collections;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">public class DollectionsDemo01 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;Integer&gt; list=new ArrayList&lt;Integer&gt;();  </span><br><span class="line">        list.add(30);  </span><br><span class="line">        list.add(20);  </span><br><span class="line">        list.add(34);  </span><br><span class="line">        list.add(50);  </span><br><span class="line">        list.add(40);  </span><br><span class="line">        Collections.sort(list);  </span><br><span class="line">        Collections.reverse(list);  </span><br><span class="line">        Collections.shuffle(list);  </span><br><span class="line">        System.out.println(list);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><p>![[Pasted image 20240717214930.png]]![[Pasted image 20240717215006.png]]![[Pasted image 20240717215117.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Collections;  </span><br><span class="line">import java.util.Comparator;  </span><br><span class="line">  </span><br><span class="line">public class CollectionsDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;Student&gt; array=new ArrayList&lt;Student&gt;();  </span><br><span class="line">        Student s1=new Student(&quot;linqingxia&quot;,30);  </span><br><span class="line">        Student s2=new Student(&quot;zhangmanyu&quot;,35);  </span><br><span class="line">        Student s3=new Student(&quot;wangzuxian&quot;,34);  </span><br><span class="line">        Student s4=new Student(&quot;liuyan&quot;,33);  </span><br><span class="line">        array.add(s1);  </span><br><span class="line">        array.add(s2);  </span><br><span class="line">        array.add(s3);  </span><br><span class="line">        array.add(s4);  </span><br><span class="line">        Collections.sort(array, new Comparator&lt;Student&gt;() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public int compare(Student o1, Student o2) &#123;  </span><br><span class="line">                int num=s1.getAge()-s2.getAge();  </span><br><span class="line">                int num2=num==0?s1.getName().compareTo(s2.getName()):num;  </span><br><span class="line">  </span><br><span class="line">                return num2;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        for(Student s:array)&#123;  </span><br><span class="line">            System.out.println(s.getName()+&quot;,&quot;+s.getAge());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><p>![[Pasted image 20240718080555.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">port java.util.ArrayList;  </span><br><span class="line"> import java.util.Collection;  </span><br><span class="line">import java.util.Collections;  </span><br><span class="line">  </span><br><span class="line">public class PokerDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;();  </span><br><span class="line">        String[] colors = &#123;&quot;♦&quot;, &quot;♣&quot;, &quot;♥&quot;, &quot;♠&quot;&#125;;  </span><br><span class="line">        String[] number = &#123;&quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;J&quot;, &quot;Q&quot;, &quot;K&quot;, &quot;A&quot;&#125;;  </span><br><span class="line">        for (String color : colors) &#123;  </span><br><span class="line">            for (String numbers : number) &#123;  </span><br><span class="line">                array.add(color + numbers);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        array.add(&quot;大王&quot;);  </span><br><span class="line">        array.add(&quot;小王&quot;);  </span><br><span class="line">        Collections.shuffle(array);  </span><br><span class="line">        ArrayList&lt;String&gt; lqxArray = new ArrayList&lt;String&gt;();  </span><br><span class="line">        ArrayList&lt;String&gt; fqyArray = new ArrayList&lt;String&gt;();  </span><br><span class="line">        ArrayList&lt;String&gt; dpArray = new ArrayList&lt;String&gt;();  </span><br><span class="line">  </span><br><span class="line">        for (int i = 0; i &lt; array.size(); i++) &#123;  </span><br><span class="line">            String poker = array.get(i);  </span><br><span class="line">            if (i &gt;= array.size() - 3) &#123;  </span><br><span class="line">                dpArray.add(poker);  </span><br><span class="line">            &#125; else if (i % 3 == 0) &#123;  </span><br><span class="line">                lqxArray.add(poker);  </span><br><span class="line">            &#125; else if (i % 3 == 1) &#123;  </span><br><span class="line">                fqyArray.add(poker);  </span><br><span class="line">            &#125; else if (i % 3 == 2) &#123;  </span><br><span class="line">                fqyArray.add(poker);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        lookPoker(&quot;林青霞&quot;,lqxArray);  </span><br><span class="line">        lookPoker(&quot;刘艳&quot;,fqyArray);  </span><br><span class="line">        lookPoker(&quot;杨青峰&quot;,fqyArray);  </span><br><span class="line">        lookPoker(&quot;底牌&quot;,dpArray);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void lookPoker(String name,ArrayList&lt;String&gt; array)&#123;  </span><br><span class="line">        System.out.println(name+&quot;的牌是&quot;  </span><br><span class="line">        );  </span><br><span class="line">        for(String poker:array)&#123;  </span><br><span class="line">            System.out.print(poker+&quot;&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240718084317.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">mport java.util.ArrayList;  </span><br><span class="line">import java.util.Collections;  </span><br><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.TreeSet;  </span><br><span class="line">  </span><br><span class="line">public class PokerDemo2 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        HashMap&lt;Integer, String&gt; hm = new HashMap&lt;Integer, String&gt;();  </span><br><span class="line">        ArrayList&lt;Integer&gt; array = new ArrayList&lt;&gt;();  </span><br><span class="line">        String[] colors = &#123;&quot;♦&quot;, &quot;♣&quot;, &quot;♥&quot;, &quot;♠&quot;&#125;;  </span><br><span class="line">        String[] numbers = &#123;&quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;J&quot;, &quot;Q&quot;, &quot;K&quot;, &quot;A&quot;&#125;;  </span><br><span class="line">        int index = 0;  </span><br><span class="line">        for (String color : colors) &#123;  </span><br><span class="line">            for (String number : numbers) &#123;  </span><br><span class="line">                hm.put(index, color + number);  </span><br><span class="line">                array.add(index);  </span><br><span class="line">                index++;  </span><br><span class="line">  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        hm.put(index, &quot;小王&quot;);  </span><br><span class="line">        array.add(index);  </span><br><span class="line">        index++;  </span><br><span class="line">        hm.put(index, &quot;大王&quot;);  </span><br><span class="line">        array.add(index);  </span><br><span class="line">        Collections.shuffle(array);  </span><br><span class="line">  </span><br><span class="line">        //发牌  </span><br><span class="line">        TreeSet&lt;Integer&gt; lqxSet = new TreeSet&lt;Integer&gt;();  </span><br><span class="line">        TreeSet&lt;Integer&gt; iySet = new TreeSet&lt;Integer&gt;();  </span><br><span class="line">        TreeSet&lt;Integer&gt; fqxSet = new TreeSet&lt;Integer&gt;();  </span><br><span class="line">        TreeSet&lt;Integer&gt; dpxSet = new TreeSet&lt;Integer&gt;();  </span><br><span class="line">  </span><br><span class="line">        for (int i = 0; i &lt; array.size(); i++) &#123;  </span><br><span class="line">            int x = array.get(i);  </span><br><span class="line">            if (i &gt;= array.size() - 3) &#123;  </span><br><span class="line">                iySet.add(x);  </span><br><span class="line">            &#125; else if (i % 3 == 0) &#123;  </span><br><span class="line">                lqxSet.add(x);  </span><br><span class="line">            &#125; else if (i % 3 == 1) &#123;  </span><br><span class="line">                fqxSet.add(x);  </span><br><span class="line">            &#125; else if (i % 3 == 2) &#123;  </span><br><span class="line">                dpxSet.add(x);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        lookPoker(&quot;林青霞&quot;,lqxSet,hm);  </span><br><span class="line">        lookPoker(&quot;柳岩&quot;,dpxSet,hm);  </span><br><span class="line">        lookPoker(&quot;风清扬&quot;,fqxSet,hm);  </span><br><span class="line">        lookPoker(&quot;底牌&quot;,iySet,hm);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void lookPoker(String name,TreeSet&lt;Integer&gt;ts,HashMap&lt;Integer,String&gt;hm)&#123;  </span><br><span class="line">        System.out.println(name+&quot;的牌是：&quot;);  </span><br><span class="line">        for(Integer key:ts)&#123;  </span><br><span class="line">            String poker=hm.get(key);  </span><br><span class="line">            System.out.print(poker+&quot;&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="21-IO流"><a href="#21-IO流" class="headerlink" title="21. IO流"></a>21. IO流</h1><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="File的构造"><a href="#File的构造" class="headerlink" title="File的构造"></a>File的构造</h3><p>File:他是文件和目录路径名的抽象表示</p><ul><li>文件和目录是可以通过File封装成对象的</li><li>对File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。将来是要通过具体的操作把这个路径的内容转换为具体存在的<br>![[Pasted image 20240718102403.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;  </span><br><span class="line">  </span><br><span class="line">public class FileDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        File f1=new File(&quot;E:\\itcast\\java.txt&quot;);  </span><br><span class="line">        System.out.println(f1);  </span><br><span class="line">        File f2=new File(&quot;E:\\itcast&quot;,&quot;java.txt&quot;);  </span><br><span class="line">        System.out.println(f2);  </span><br><span class="line">        File f3=new File(&quot;E:\\itcast&quot;);  </span><br><span class="line">        File f4=new File(f3,&quot;java.txt&quot;);  </span><br><span class="line">        System.out.println(f4);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="File类创建功能"><a href="#File类创建功能" class="headerlink" title="File类创建功能"></a>File类创建功能</h3></li><li>public boolean createNewFile() 当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件<pre><code>   如果文件不存在，就创建文件，并返回true   如果文件存在，就不创建文件，并返回false</code></pre></li><li>public boolean mkdir() 创建由此抽象路径名命名的目录<pre><code>  如果目录不存在，就创建目录，并返回true   如果目录存在，就不创建目录，并返回false</code></pre></li><li>public boolean mkdirs() 创建由此抽象路径名命名 的目录，包括任何必需但不存在的父目录<br>![[Pasted image 20240718105218.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _1 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        File f1=new File(&quot;E:\\itcast\\java.txt&quot;);  </span><br><span class="line">        System.out.println(f1.createNewFile());  </span><br><span class="line">        System.out.println(&quot;---------&quot;);  </span><br><span class="line">        File f2=new File(&quot;E:\\itcast\\JavaSE&quot;);  </span><br><span class="line">        System.out.println(f2.mkdir());  </span><br><span class="line">        File f3=new File(&quot;E:\\itcast\\JavaWEB\\HTML&quot;);  </span><br><span class="line">        System.out.println(f3.mkdirs());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flie类判断和获取功能"><a href="#Flie类判断和获取功能" class="headerlink" title="Flie类判断和获取功能"></a>Flie类判断和获取功能</h3>![[Pasted image 20240718110137.png]]<br>![[Pasted image 20240718111825.png]]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _2 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        File f=new File(&quot;E:\\itcast\\java.txt&quot;);  </span><br><span class="line">        System.out.println(f.createNewFile());  </span><br><span class="line">        System.out.println(f.isDirectory());  </span><br><span class="line">        System.out.println(f.isFile());  </span><br><span class="line">        System.out.println(f.exists());  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        System.out.println(f.getAbsolutePath());  </span><br><span class="line">        System.out.println(f.getPath());  </span><br><span class="line">        System.out.println(f.getName());  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        File f2=new File(&quot;E:\\itcast&quot;);  </span><br><span class="line">        String[] strArray=f2.list();  </span><br><span class="line">        for(String str:strArray)&#123;  </span><br><span class="line">            System.out.println(str);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        File[] fileArray=f2.listFiles();  </span><br><span class="line">        for(File file:fileArray)&#123;  </span><br><span class="line">            System.out.println(file);  </span><br><span class="line">            System.out.println(file.getName());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![[Pasted image 20240718145657.png]]<br>绝对路径和相对路径的区别</p><ul><li>绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件。例如：E:\itcast\java.txt</li><li>相对路径：必须使用取自其他路径名的信息进行解释，例如：myFile\java.txt<br>删除目录时的注意事项</li><li>如果一个目录中有内容（目录，文件）不能直接删除。应该先删除目录中的内容，最后才能删除目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _3 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        //在当前模块目录下创建java.txt文件  </span><br><span class="line">        File f1=new File(&quot;myFile\\java.txt&quot;);  </span><br><span class="line">      //  System.out.println(f1.createNewFile());  </span><br><span class="line">  </span><br><span class="line">        //删除当下模块目录下的文件  </span><br><span class="line">        System.out.println(f1.delete());  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        File f2=new File(&quot;myFile\\itcast&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(f2.delete());  </span><br><span class="line">  </span><br><span class="line">        File f3=new File(&quot;myFile\\itcast&quot;);  </span><br><span class="line">        System.out.println(f3.mkdir());  </span><br><span class="line">        File f4=new File(&quot;myFile\\itcast\\java.txt&quot;);  </span><br><span class="line">        System.out.println(f4.createNewFile());  </span><br><span class="line">        //删除当前模块下的目录  </span><br><span class="line">        System.out.println(f4.delete());  </span><br><span class="line">        System.out.println(f3.delete());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3>递归概述；以编程的角度来看，递归指的是方法定义中调用方法本身的现象<br>递归解决问腿的思路：<br>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解<br>递归策略只需要少量的程序就可描述出解题过程中需要的多次重复计算</li></ul><p>递归解决问题要找到两个内容：</p><ul><li>递归出口：否则会出现内存溢出</li><li>递归规则：与原问题相似的规模较小的问题<br>![[Pasted image 20240718154715.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class 递归求阶乘 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        int result=jc(5);  </span><br><span class="line">        System.out.println(&quot;5的阶乘是：&quot;+result);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static int jc(int n)&#123;  </span><br><span class="line">        if(n==1)&#123;  </span><br><span class="line">            return 1;  </span><br><span class="line">        &#125;else&#123;  </span><br><span class="line">            return n*jc(n-1);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h3>![[Pasted image 20240718155715.png]]<br>![[Pasted image 20240718161244.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;  </span><br><span class="line">  </span><br><span class="line">public class 遍历目录 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        File srcFile=new File(&quot;E:\\itcast&quot;);  </span><br><span class="line">getFile (srcFile);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void getFile(File s)&#123;  </span><br><span class="line">    File[] file= s.listFiles();  </span><br><span class="line">    if(file!=null)&#123;  </span><br><span class="line">        for(File yiyi:file)&#123;  </span><br><span class="line">            //判断该yiyi对象是否是目录  </span><br><span class="line">            if(yiyi.isDirectory())&#123;  </span><br><span class="line">                getFile(yiyi);  </span><br><span class="line">            &#125;else &#123;  </span><br><span class="line">                //不是，获取绝对路径输出在控制台  </span><br><span class="line">                System.out.println(yiyi);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="21-1字节流"><a href="#21-1字节流" class="headerlink" title="21.1字节流"></a>21.1字节流</h1><h3 id="IO流概述和分类"><a href="#IO流概述和分类" class="headerlink" title="IO流概述和分类"></a>IO流概述和分类</h3>![[Pasted image 20240718161817.png]]<br>![[Pasted image 20240718161754.png]]</li></ul><h3 id="字节流写数据"><a href="#字节流写数据" class="headerlink" title="字节流写数据"></a>字节流写数据</h3><p>字节流抽象基类</p><ul><li>InputStream:这个抽象类是表示字节输入流的所有类的超类</li><li>OutputStream：这个抽象类是表示字节输出流的所有类的超类</li><li>子类名特点：子类名称都是以其父类名作为子类名的后缀<br>![[Pasted image 20240718163421.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileOutputStream;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _1 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        FileOutputStream fos=new FileOutputStream(&quot;myByteStream\\fos.txt&quot;);  </span><br><span class="line">        fos.write(97);  </span><br><span class="line">        fos.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节流写数据的三种方式"><a href="#字节流写数据的三种方式" class="headerlink" title="字节流写数据的三种方式"></a>字节流写数据的三种方式</h3>![[Pasted image 20240718171040.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileOutputStream;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class 输入方法 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        FileOutputStream fos=new FileOutputStream(&quot;myByteStream\\fos.txt&quot;);  </span><br><span class="line">//        fos.write(97);  </span><br><span class="line">//        fos.write(98);  </span><br><span class="line">//        fos.write(99);  </span><br><span class="line">       // byte[] bys=&#123;97,98,99,100,101&#125;;        byte[] bys=&quot;abcde&quot;.getBytes();  </span><br><span class="line">        fos.write(bys,1,4);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![[Pasted image 20240718171742.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileOutputStream;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _2 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        FileOutputStream fos=new FileOutputStream(&quot;myByteStream\\fos.txt&quot;,true);  </span><br><span class="line">        for(int i=0;i&lt;10;i++)&#123;  </span><br><span class="line">            fos.write(&quot;hello&quot;.getBytes());  </span><br><span class="line">            fos.write(&quot;\r\n&quot;.getBytes());  </span><br><span class="line">        &#125;  </span><br><span class="line">        fos.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节流写数据加异常处理"><a href="#字节流写数据加异常处理" class="headerlink" title="字节流写数据加异常处理"></a>字节流写数据加异常处理</h3>![[Pasted image 20240718173532.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import javax.imageio.IIOException;  </span><br><span class="line">import java.io.FileOutputStream;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _3 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        FileOutputStream fos=null;  </span><br><span class="line">        try&#123;  </span><br><span class="line">            fos=new FileOutputStream(&quot;myByteStream\\fos.txt&quot;);  </span><br><span class="line">            fos.write(&quot;hello&quot;.getBytes());  </span><br><span class="line">        &#125;catch (IOException e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;finally &#123;  </span><br><span class="line">            if(fos!=null)&#123;  </span><br><span class="line">                try &#123;  </span><br><span class="line">                    fos.close();  </span><br><span class="line">                &#125;catch (IOException e)&#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节流读数据"><a href="#字节流读数据" class="headerlink" title="字节流读数据"></a>字节流读数据</h3>![[Pasted image 20240718175731.png]]<br>![[Pasted image 20240718182140.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileInputStream;  </span><br><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _4 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        FileInputStream fis=new FileInputStream(&quot;myByteStream\\fos.txt&quot;);  </span><br><span class="line">  </span><br><span class="line">        int by;  </span><br><span class="line">        while ((by=fis.read())!=-1)&#123;  </span><br><span class="line">            System.out.print((char) by);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![[Pasted image 20240718184344.png]]<br>![[Pasted image 20240718184401.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileInputStream;  </span><br><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileOutputStream;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _5 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        FileInputStream fis=new FileInputStream(&quot;E:\\itcast\\窗里窗外.txt&quot;);  </span><br><span class="line">        FileOutputStream fos=new FileOutputStream(&quot;myByteStream\\窗里窗外.txt&quot;);  </span><br><span class="line">  </span><br><span class="line">       int by;  </span><br><span class="line">  </span><br><span class="line">        while ((by=fis.read())!=-1)&#123;  </span><br><span class="line">            fos.write(by);  </span><br><span class="line">        &#125;  </span><br><span class="line">        fos.close();  </span><br><span class="line">        fis.close();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![[Pasted image 20240718193051.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> import java.io.FileInputStream;  </span><br><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _6 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        FileInputStream fis=new FileInputStream(&quot;myByteStream\\fos.txt&quot;);  </span><br><span class="line">  </span><br><span class="line">        byte[] bys=new byte[1024];  </span><br><span class="line">        int len;  </span><br><span class="line">        while((len=fis.read(bys))!=-1)&#123;  </span><br><span class="line">            System.out.println(new String(bys,0,len));  </span><br><span class="line">        &#125;  </span><br><span class="line">        fis.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![[Pasted image 20240718195458.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> import java.io.FileInputStream;  </span><br><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileOutputStream;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _7 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        FileInputStream fis=new FileInputStream(&quot;E:\\itcast\\mn.jpg&quot;);  </span><br><span class="line">        FileOutputStream fos=new FileOutputStream(&quot;myByteStream\\mn.jpg&quot;);  </span><br><span class="line">        byte[] bys=new byte[1024];  </span><br><span class="line">        int len;  </span><br><span class="line">        while((len=fis.read(bys))!=-1)&#123;  </span><br><span class="line">            fos.write(bys,0,len);  </span><br><span class="line">        &#125;  </span><br><span class="line">        fos.close();  </span><br><span class="line">        fis.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3>· BufferOutputStream:该类实现缓冲输出流。通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</li></ul><p>· BufferedInputStream:创建BufferedInputStream将创建一个内部缓冲区数组。当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</p><p>构造方法:</p><p>· 字节缓冲输出流: BufferedOutputStream(OutputStream out)</p><p>· 字节缓冲输入流: BufferedInputStream(InputStream in)</p><p>为什么构造方法需要的是字节流，而不是具体的文件或者路径呢?</p><p>· 字节缓冲流仅仅提供缓冲区，而真正的读写数据还得依靠基本的字节流对象进行操作<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class _8 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(&quot;myByteStream\\bos.txt&quot;));  </span><br><span class="line">        bos.write(&quot;hello\r\n&quot;.getBytes());  </span><br><span class="line">        bos.write(&quot;world\r\n&quot;.getBytes());  </span><br><span class="line">        bos.close();  </span><br><span class="line">        BufferedInputStream bis=new BufferedInputStream(new FileInputStream(&quot;myByteStream\\bos.txt&quot;));  </span><br><span class="line">        int by;  </span><br><span class="line">        while((by=bis.read())!=-1)&#123;  </span><br><span class="line">            System.out.print((char)by);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="案例-7"><a href="#案例-7" class="headerlink" title="案例"></a>案例</h3><p>![[Pasted image 20240718203110.png]]<br>![[Pasted image 20240718203424.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class _9 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        long startTime=System.currentTimeMillis();  </span><br><span class="line">         method3();  </span><br><span class="line">        long endTime=System.currentTimeMillis();  </span><br><span class="line">        System.out.println(&quot;共耗时；&quot;+(endTime-startTime)+&quot;毫秒&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">   public static void method3() throws IOException &#123;  </span><br><span class="line">       BufferedInputStream bis=new BufferedInputStream(new FileInputStream(&quot;E:\\itcast\\111.mp4&quot;));  </span><br><span class="line">       BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(&quot;myByteStream\\111.mp4&quot;));  </span><br><span class="line">       int by;  </span><br><span class="line">       while((by=bis.read())!=-1)&#123;  </span><br><span class="line">           bos.write(by);  </span><br><span class="line">       &#125;  </span><br><span class="line">       bos.close();  </span><br><span class="line">       bis.close();  </span><br><span class="line">  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    public static void method1() throws IOException &#123;  </span><br><span class="line">        FileInputStream fis=new FileInputStream(&quot;E:\\itcast\\111.mp4&quot;);  </span><br><span class="line">        FileOutputStream fos=new FileOutputStream(&quot;myByteStream\\111.mp4&quot;);  </span><br><span class="line">        int by;  </span><br><span class="line">        while((by=fis.read())!=-1)&#123;  </span><br><span class="line">            fos.write(by);  </span><br><span class="line">        &#125;  </span><br><span class="line">        fos.close();  </span><br><span class="line">        fis.close();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="为什么会出现字符流"><a href="#为什么会出现字符流" class="headerlink" title="为什么会出现字符流"></a>为什么会出现字符流</h3><p>由于字节流操作中文不是特别的方便，所以Java就提供字符流</p><p>字符流=字节流+编码表</p><p>用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层操作会自动进行字节拼接成中文，如何识别是中文的呢？</p><p>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</p><h3 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h3><p>GB2312：简体中文码表。一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名等都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的“全角”字符，而原来在127号以下的那些就叫“半角”字符了</p><p>GBK：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等</p><p>为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF32。最为常用的UTF-8编码</p><p>UTF-8编码: 可以用来自表示Unicode标准中任意字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组(IETF)要求所有互联网协议都必须支持UTF-8编码。它使用一至四个字节为每个字符编码</p><p>编码规则:</p><p>128个US-ASCII字符，只需一个字节编码</p><p>拉丁文等字符，需要二个字节编码</p><p>大部分常用字(含中文)，使用三个字节编码</p><p>其他极少使用的Unicode辅助字符，使用四字节编码<br>小结：采用何种规则编码，就要采用对应规则解码，否则会出现乱码</p><h3 id="字符串中的编码解码问题"><a href="#字符串中的编码解码问题" class="headerlink" title="字符串中的编码解码问题"></a>字符串中的编码解码问题</h3><p>![[Pasted image 20240718213115.png]]<br>![[Pasted image 20240718214942.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.io.UnsupportedEncodingException;  </span><br><span class="line">import java.util.Arrays;  </span><br><span class="line">  </span><br><span class="line">public class _1 &#123;  </span><br><span class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;  </span><br><span class="line">        String s=&quot;中国&quot;;  </span><br><span class="line">      // byte[] bys=s.getBytes();  </span><br><span class="line">  </span><br><span class="line">        //byte[] bys=s.getBytes(&quot;UTF-8&quot;);        byte[] bys=s.getBytes(&quot;GBK&quot;);  </span><br><span class="line">        System.out.println(Arrays.toString(bys));  </span><br><span class="line">  </span><br><span class="line">       // String ss=new String(bys);  </span><br><span class="line">       // String ss=new String(bys,&quot;UTF-8&quot;);        String ss=new String(bys,&quot;GBK&quot;);  </span><br><span class="line">        System.out.println(ss);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240719073549.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class _2 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        OutputStreamWriter osw=new OutputStreamWriter( new FileOutputStream(&quot;myCharStream\\osw.txt&quot;),&quot;UTF-8&quot;);  </span><br><span class="line">  </span><br><span class="line">       // OutputStreamWriter osw=new OutputStreamWriter( new FileOutputStream(&quot;myCharStream\\osw.txt&quot;));  </span><br><span class="line">  </span><br><span class="line">        osw.write(&quot;中国&quot;);  </span><br><span class="line">        osw.close();  </span><br><span class="line">  </span><br><span class="line">       // InputStreamReader isr=new InputStreamReader(new FileInputStream(&quot;myCharStream\\osw.txt&quot;));  </span><br><span class="line">        InputStreamReader isr=new InputStreamReader(new FileInputStream(&quot;myCharStream\\osw.txt&quot;),&quot;UTF-8&quot;);  </span><br><span class="line">        int ch;  </span><br><span class="line">        while((ch=isr.read())!=-1)&#123;  </span><br><span class="line">            System.out.print((char)ch);  </span><br><span class="line">        &#125;  </span><br><span class="line">        isr.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="字符流写数据的5种方式"><a href="#字符流写数据的5种方式" class="headerlink" title="字符流写数据的5种方式"></a>字符流写数据的5种方式</h3><p> 字符流写数据的5种方式</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void write(int c)</td><td>写一个字符</td></tr><tr><td>void write(char[] cbuf)</td><td>写入一个字符数组</td></tr><tr><td>void write(char[] cbuf, int off, int len)</td><td>写入字符数组的一部分</td></tr><tr><td>void write(String str)</td><td>写一个字符串</td></tr><tr><td>void write(String str, int off, int len)</td><td>写一个字符串的一部分</td></tr><tr><td>方法名</td><td>说明</td></tr><tr><td>flush()</td><td>刷新流，还可以继续写数据</td></tr><tr><td>close()</td><td>关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileOutputStream;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.OutputStreamWriter;  </span><br><span class="line">  </span><br><span class="line">public class _3 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        OutputStreamWriter osw=new OutputStreamWriter(new FileOutputStream(&quot;myCharStream\\osw.txt&quot;));  </span><br><span class="line">  </span><br><span class="line">        // osw.write(99);  </span><br><span class="line">        char[] cha=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;&#125;;  </span><br><span class="line">        osw.flush();  </span><br><span class="line">        osw.write(cha,1,3);  </span><br><span class="line">  </span><br><span class="line">osw.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符流读数据的2种方法"><a href="#字符流读数据的2种方法" class="headerlink" title="字符流读数据的2种方法"></a>字符流读数据的2种方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>int read()</td><td>一次读一个字符数据</td></tr><tr><td>int read(char[] cbuf)</td><td>一次读一个字符数组数据</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileInputStream;  </span><br><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.InputStreamReader;  </span><br><span class="line">  </span><br><span class="line">public class _4 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        InputStreamReader isr=new InputStreamReader(new FileInputStream(&quot;myCharStream\\osw.txt&quot;));  </span><br><span class="line">  </span><br><span class="line">        char[] chs=new char[1024];  </span><br><span class="line">        int len;  </span><br><span class="line">        while((len=isr.read(chs))!=-1)&#123;  </span><br><span class="line">            System.out.println(new String(chs,0,len));  </span><br><span class="line">        &#125;  </span><br><span class="line">        isr.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例文件"><a href="#案例文件" class="headerlink" title="案例文件"></a>案例文件</h3><p>需求:把模块目录下的 “ConversionStreamDemo.java”复制到模块目录下的 “Copy.java”</p><p>分析:</p><p>①转换流的名字比较长，而我们常见的操作都是按照本地默认编码实现的，所以，为了简化书写，转换流提供了对应的子类</p><p>②FileReader:用于读取字符文件的便捷类</p><p>FileReader(String fileName)</p><p>③FileWriter:用于写入字符文件的便捷类</p><p>FileWriter(String fileName)</p><p>④数据源和目的地的分析</p><p>数据源:myCharStream\ConversionStreamDemo.java—读数据—Reader—InputStreamReader—FileReader</p><p>目的地: myCharStream\Copy.java —写数据 — Writer — OutputStreamWriter — FileWriter<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileReader;  </span><br><span class="line">import java.io.FileWriter;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class _6 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        FileReader fr=new FileReader(&quot;myCharStream\\osw.txt&quot;);  </span><br><span class="line">        FileWriter fw=new FileWriter(&quot;myCharStream\\Copy.java&quot;);  </span><br><span class="line">//        int ch;  </span><br><span class="line">//        while((ch=fr.read())!=-1)&#123;  </span><br><span class="line">//            fw.write(ch);  </span><br><span class="line">//        &#125;  </span><br><span class="line">        char[] chs=new char[1024];  </span><br><span class="line">        int len;  </span><br><span class="line">        while((len=fr.read())!=-1)&#123;  </span><br><span class="line">            fw.write(chs,0,len);  </span><br><span class="line">        &#125;  </span><br><span class="line">        fr.close();  </span><br><span class="line">        fw.close();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><p>字符缓冲流:</p><p>·BufferedWriter: 将文本写入字符输出流，缓冲字符，以提供单个字符，数组和字符串的高效写入，可以指定缓冲区大小，或者可以接受默认大小。默认值足够大，可用于大多数用途</p><p>·BufferedReader: 从字符输入流读取文本，缓冲字符，以提供字符，数组和行的有效读取，可以指定缓冲区大小，或者可以使用默认大小。默认值足够大，可用于大多数用途</p><p>构造方法:</p><p>·BufferedWriter(Writer out)</p><p>·BufferedReader(Reader in)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class _7 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        BufferedWriter bw=new BufferedWriter(new FileWriter(&quot;myCharStream\\bw.txt&quot;));  </span><br><span class="line">        bw.write(&quot;hello\r\n&quot;);  </span><br><span class="line">        bw.write(&quot;world\r\n&quot;);  </span><br><span class="line">        bw.flush();  </span><br><span class="line">  </span><br><span class="line">        BufferedReader br=new BufferedReader(new FileReader(&quot;myCharStream\\bw.txt&quot;));  </span><br><span class="line">  </span><br><span class="line">        char[] chs=new char[1024];  </span><br><span class="line">        int len;  </span><br><span class="line">        while((len=br.read(chs))!=-1)&#123;  </span><br><span class="line">            System.out.println(new String(chs,0,len));  </span><br><span class="line">        &#125;  </span><br><span class="line">        bw.close();  </span><br><span class="line">        br.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="字符缓冲流特有功能"><a href="#字符缓冲流特有功能" class="headerlink" title="字符缓冲流特有功能"></a>字符缓冲流特有功能</h3><p>BufferedWriter:</p><p>· void newLine() :写一行行分隔符，行分隔符字符串由系统属性定义</p><p>BufferedReader:</p><p>· public String readLine() :读一行文字。结果包含行的内容的字符串，不包括任何行终止字符，如果流的结尾已经到达，则为null<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class _8 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        BufferedWriter bw=new BufferedWriter(new FileWriter(&quot;myCharStream\\bw.txt&quot;));  </span><br><span class="line">        for(int i=0;i&lt;10;i++)&#123;  </span><br><span class="line">            bw.write(&quot;hello&quot;+i);  </span><br><span class="line">            bw.newLine();  </span><br><span class="line">            bw.flush();  </span><br><span class="line">        &#125;  </span><br><span class="line">        BufferedReader br=new BufferedReader(new FileReader(&quot;myCharStream\\bw.txt&quot;));  </span><br><span class="line">//        String line=br.readLine();  </span><br><span class="line">//        System.out.println(line);  </span><br><span class="line">        String line;  </span><br><span class="line">        while ((line=br.readLine())!=null)&#123;  </span><br><span class="line">            System.out.println(line);  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        bw.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="案例-8"><a href="#案例-8" class="headerlink" title="案例"></a>案例</h3><p>![[Pasted image 20240719095848.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class _9 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        BufferedReader br=new BufferedReader(new FileReader(&quot;myCharStream\\bw.tXt&quot;));  </span><br><span class="line">        BufferedWriter bw=new BufferedWriter(new FileWriter(&quot;myCharStream\\Copy.txt&quot;));  </span><br><span class="line">        String line;  </span><br><span class="line">        while((line= br.readLine())!=null)&#123;  </span><br><span class="line">            bw.write(line);  </span><br><span class="line">            bw.newLine();  </span><br><span class="line">            bw.close();  </span><br><span class="line">        &#125;  </span><br><span class="line">        bw.close();  </span><br><span class="line">        br.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="IO流小结"><a href="#IO流小结" class="headerlink" title="IO流小结"></a>IO流小结</h3><p>字节流和字符流在输入流这里：<br>字节流：FileInputStream<br>字符流：InputStreamReader,可以用简写FileReader<br>在缓冲流<br>字节缓冲流：BufferedInputStream<br>字符缓冲流：BufferedReader</p><p>![[Pasted image 20240719100858.png]]![[Pasted image 20240719100911.png]]<br>![[Pasted image 20240719100928.png]]![[Pasted image 20240719100946.png]]</p><h3 id="案例-9"><a href="#案例-9" class="headerlink" title="案例"></a>案例</h3><p>![[Pasted image 20240719112114.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedWriter;  </span><br><span class="line">import java.io.FileWriter;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class _10 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; array=new ArrayList&lt;String&gt;();  </span><br><span class="line">        array.add(&quot;hello&quot;);  </span><br><span class="line">        array.add(&quot;world&quot;);  </span><br><span class="line">        array.add(&quot;java&quot;);  </span><br><span class="line">        BufferedWriter bw=new BufferedWriter(new FileWriter(&quot;myCharStream\\array.txt&quot;));  </span><br><span class="line">        for(String s:array)&#123;  </span><br><span class="line">            bw.write(s);  </span><br><span class="line">            bw.newLine();  </span><br><span class="line">            bw.flush();  </span><br><span class="line">        &#125;  </span><br><span class="line">        bw.flush();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240719112932.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;  </span><br><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileReader;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class _11 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        BufferedReader br=new BufferedReader(new FileReader(&quot;myCharStream\\array.txt&quot;));  </span><br><span class="line">        ArrayList&lt;String&gt;  array=new ArrayList&lt;String&gt;();  </span><br><span class="line">        String line;  </span><br><span class="line">        while ((line= br.readLine())!=null)&#123;  </span><br><span class="line">            array.add(line);  </span><br><span class="line">        &#125;  </span><br><span class="line">        br.close();  </span><br><span class="line">        for(String s:array)&#123;  </span><br><span class="line">            System.out.println(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240719135440.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;  </span><br><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileReader;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.Random;  </span><br><span class="line">  </span><br><span class="line">public class _12 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        BufferedReader br=new BufferedReader(new FileReader(&quot;myCharStream\\name&quot;));  </span><br><span class="line">        ArrayList&lt;String&gt; array=new ArrayList&lt;String&gt;();  </span><br><span class="line">  </span><br><span class="line">        String line;  </span><br><span class="line">        while ((line=br.readLine())!=null)&#123;  </span><br><span class="line">            array.add(line);  </span><br><span class="line">        &#125;  </span><br><span class="line">        br.close();  </span><br><span class="line">  </span><br><span class="line">        Random r=new Random();  </span><br><span class="line">        int index=r.nextInt(array.size());  </span><br><span class="line">        String name=array.get(index);  </span><br><span class="line">        System.out.println(&quot;幸运者是：&quot;+name);  </span><br><span class="line">          </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240719141524.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;  </span><br><span class="line">    private String sid;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private int age;  </span><br><span class="line">    private String address;  </span><br><span class="line">  </span><br><span class="line">    public Student() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Student(String sid, String name, int age, String address) &#123;  </span><br><span class="line">        this.sid = sid;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">        this.address = address;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getSid() &#123;  </span><br><span class="line">        return sid;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setSid(String sid) &#123;  </span><br><span class="line">        this.sid = sid;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getAge() &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAge(int age) &#123;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getAddress() &#123;  </span><br><span class="line">        return address;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAddress(String address) &#123;  </span><br><span class="line">        this.address = address;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;  </span><br><span class="line">import java.io.BufferedWriter;  </span><br><span class="line">import java.io.FileWriter;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class StudentDemo &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        ArrayList&lt;Student&gt; array = new ArrayList&lt;Student&gt;();  </span><br><span class="line">        Student s1 = new Student(&quot;itheima001&quot;, &quot;林青霞&quot;, 30, &quot;西安&quot;);  </span><br><span class="line">        Student s2 = new Student(&quot;itheima002&quot;, &quot;张曼玉&quot;, 30, &quot;西安&quot;);  </span><br><span class="line">        Student s3 = new Student(&quot;itheima003&quot;, &quot;王祖贤&quot;, 30, &quot;西安&quot;);  </span><br><span class="line">  </span><br><span class="line">        array.add(s1);  </span><br><span class="line">        array.add(s2);  </span><br><span class="line">        array.add(s3);  </span><br><span class="line">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;myCharStream\\student.txt&quot;));  </span><br><span class="line">        for (Student s : array) &#123;  </span><br><span class="line">            StringBuilder sb = new StringBuilder();  </span><br><span class="line">            sb.append(s.getSid()).append(&quot;,&quot;).append(s.getName()).append(&quot;,&quot;).append(s.getAge()).append(&quot;,&quot;).append(s.getAddress());  </span><br><span class="line">            bw.write(sb.toString());  </span><br><span class="line">            bw.newLine();  </span><br><span class="line">            bw.flush();  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        bw.close();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240719144618.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class FileToArrayListDemo &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        BufferedReader br=new BufferedReader(new FileReader(&quot;myCharstream\\student.txt&quot;));  </span><br><span class="line">        ArrayList&lt;Student&gt; array=new ArrayList&lt;Student&gt;();  </span><br><span class="line">  </span><br><span class="line">        String line;  </span><br><span class="line">        while((line=br.readLine())!=null)&#123;  </span><br><span class="line">            String[] strArray=line.split(&quot;,&quot;);  </span><br><span class="line">            Student s=new Student();  </span><br><span class="line">            s.setSid(strArray[0]);  </span><br><span class="line">            s.setName(strArray[1]);  </span><br><span class="line">            s.setAge(Integer.parseInt(strArray[2]));  </span><br><span class="line">            s.setAddress(strArray[3]);  </span><br><span class="line">            array.add(s);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        br.close();  </span><br><span class="line">        for(Student s:array)&#123;  </span><br><span class="line">            System.out.println(s.getSid()+&quot;,&quot;+s.getName()+&quot;,&quot;+s.getAge()+&quot;,&quot;+s.getAddress());  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>需求:键盘录入5个学生信息(姓名,语文成绩,数学成绩,英语成绩)。要求按照成绩总分从高到低写入文本文件格式: 姓名语文成绩数学成绩,英语成绩</p><p>举例: 林青霞.98,99,100</p><p>思路:</p><p>①定义学生类</p><p>②创建TreeSet集合，通过比较器排序进行排序</p><p>③键盘录入学生数据</p><p>④创建学生对象，把键盘录入的数据对应赋值给学生对象的成员变量</p><p>⑤把学生对象添加到TreeSet集合</p><p>⑥创建字符缓冲输出流对象</p><p>⑦遍历集合，得到每一个学生对象</p><p>⑧把学生对象的数据拼接成指定格式的字符串</p><p>⑨调用字符缓冲输出流对象的方法写数据</p><p>⑩释放资源<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private int chinese;  </span><br><span class="line">    private int math;  </span><br><span class="line">    private int english;  </span><br><span class="line">  </span><br><span class="line">    public Student() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Student(String name, int chinese, int math, int english) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.chinese = chinese;  </span><br><span class="line">        this.math = math;  </span><br><span class="line">        this.english = english;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getChinese() &#123;  </span><br><span class="line">        return chinese;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setChinese(int chinese) &#123;  </span><br><span class="line">        this.chinese = chinese;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getMath() &#123;  </span><br><span class="line">        return math;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setMath(int math) &#123;  </span><br><span class="line">        this.math = math;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getEnglish() &#123;  </span><br><span class="line">        return english;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setEnglish(int english) &#123;  </span><br><span class="line">        this.english = english;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public int getSum()&#123;  </span><br><span class="line">        return this.chinese+this.math+this.english;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedWriter;  </span><br><span class="line">import java.io.FileWriter;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.util.Comparator;  </span><br><span class="line">import java.util.Scanner;  </span><br><span class="line">import java.util.TreeSet;  </span><br><span class="line">  </span><br><span class="line">public class StudentDemo &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        TreeSet&lt;Student&gt; ts=new TreeSet&lt;Student&gt;(new Comparator&lt;Student&gt;() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public int compare(Student s1, Student s2) &#123;  </span><br><span class="line">                int num=s2.getSum()- s1.getSum();  </span><br><span class="line">                int num2=num==0?s1.getChinese()-s2.getChinese():num;  </span><br><span class="line">                int num3=num2==0? s1.getMath() -s2.getMath():num2;  </span><br><span class="line">                int num4=num3==0?s1.getName().compareTo(s2.getName()):num3;  </span><br><span class="line">                return num4;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;);  </span><br><span class="line">        for(int i=0;i&lt;5;i++)&#123;  </span><br><span class="line">            Scanner sc=new Scanner(System.in);  </span><br><span class="line">            System.out.println(&quot;请录入第&quot;+(i+1)+&quot;个学生信息&quot;);  </span><br><span class="line">            System.out.println(&quot;姓名：&quot;);  </span><br><span class="line">            String name=sc.nextLine();  </span><br><span class="line">            System.out.println(&quot;语文成绩：&quot;);  </span><br><span class="line">            int chinese=sc.nextInt();  </span><br><span class="line">            System.out.println(&quot;数学成绩：&quot;);  </span><br><span class="line">            int math=sc.nextInt();  </span><br><span class="line">            System.out.println(&quot;英语成绩：&quot;);  </span><br><span class="line">            int english=sc.nextInt();  </span><br><span class="line">  </span><br><span class="line">            Student s=new Student();  </span><br><span class="line">            s.setName(name);  </span><br><span class="line">            s.setChinese(chinese);  </span><br><span class="line">            s.setMath(math);  </span><br><span class="line">            s.setEnglish(english);  </span><br><span class="line">            ts.add(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">        BufferedWriter bw=new BufferedWriter(new FileWriter(&quot;myCharStream\\ts.txt&quot;));  </span><br><span class="line">        for(Student s:ts)&#123;  </span><br><span class="line">            StringBuilder sb=new StringBuilder();  </span><br><span class="line">            sb.append(s.getName()).append(&quot;,&quot;).append(s.getChinese()).append(&quot;,&quot;).append(s.getMath()).append(&quot;,&quot;).append(s.getEnglish()).append(&quot;,&quot;).append(s.getSum());  </span><br><span class="line">  </span><br><span class="line">            bw.write(sb.toString());  </span><br><span class="line">            bw.newLine();  </span><br><span class="line">            bw.flush();  </span><br><span class="line">        &#125;  </span><br><span class="line">        bw.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="复制单级文件夹"><a href="#复制单级文件夹" class="headerlink" title="复制单级文件夹"></a>复制单级文件夹</h3><p>![[Pasted image 20240719164901.png]]![[Pasted image 20240719165359.png]]![[Pasted image 20240719165428.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class CopyFolderDemo &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        //创建数据源目录File对象，路径是E:\\itcast  </span><br><span class="line">        File srcFolder=new File(&quot;E:\\itcast&quot;);  </span><br><span class="line">        //获取数据源目录File对象的名称（itcast）  </span><br><span class="line">        String srcFolderName=srcFolder.getName();  </span><br><span class="line">        //创建目的地目录对应的File对象，路径名是模块名+itcast组成（myCharStream\\itcast)  </span><br><span class="line">        File destFolder=new File(&quot;myCharStream&quot;,srcFolderName);  </span><br><span class="line">        if(!destFolder.exists())&#123;  </span><br><span class="line">            destFolder.mkdir();  </span><br><span class="line">        &#125;  </span><br><span class="line">        File[] listFiles=srcFolder.listFiles();  </span><br><span class="line">        for(File srcFile:listFiles)&#123;  </span><br><span class="line">            String srcFileName=srcFile.getName();  </span><br><span class="line">            File destFile=new File(destFolder,srcFileName);  </span><br><span class="line">            copyFile(srcFile,destFile);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static void copyFile(File srcFile,File destFile) throws IOException &#123;  </span><br><span class="line">        BufferedInputStream bis=new BufferedInputStream(new FileInputStream(srcFile));  </span><br><span class="line">        BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(destFile));  </span><br><span class="line">        byte[] bys=new byte[1024];  </span><br><span class="line">        int len;  </span><br><span class="line">        while((len=bis.read(bys))!=-1)&#123;  </span><br><span class="line">            bos.write(bys,0,len);  </span><br><span class="line">        &#125;  </span><br><span class="line">        bos.close();  </span><br><span class="line">        bis.close();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240719170444.png]]![[Pasted image 20240719174259.png]]![[Pasted image 20240719174328.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class CopyFoldsDemo &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        File srcFile=new File(&quot;E:\\itcast&quot;);  </span><br><span class="line">        File destFile=new File(&quot;F:\\&quot;);  </span><br><span class="line">        copyFolder(srcFile,destFile);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    private static void copyFolder(File srcFile,File destFile) throws IOException &#123;  </span><br><span class="line">        if(srcFile.isDirectory())&#123;  </span><br><span class="line">            //在目的地下创建和数据源File名称一样的目录  </span><br><span class="line">            String srcFileName=srcFile.getName();  </span><br><span class="line">            File newFolder=new File(destFile,srcFileName);  </span><br><span class="line">            if(!newFolder.exists())&#123;  </span><br><span class="line">                newFolder.mkdir();  </span><br><span class="line">            &#125;  </span><br><span class="line">            File[] fileArray=srcFile.listFiles();  </span><br><span class="line">            for(File file:fileArray)&#123;  </span><br><span class="line">                copyFolder(file,newFolder);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        else&#123;  </span><br><span class="line">            File newFile=new File(destFile,srcFile.getName());  </span><br><span class="line">            copyFile(srcFile,newFile);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">private static void copyFile(File srcFile,File destFile) throws IOException &#123;  </span><br><span class="line">        BufferedInputStream bis=new BufferedInputStream(new FileInputStream(srcFile));  </span><br><span class="line">    BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(destFile));  </span><br><span class="line">    byte[] bys=new byte[1024];  </span><br><span class="line">    int len;  </span><br><span class="line">    while((len=bis.read(bys))!=-1)&#123;  </span><br><span class="line">        bos.write(bys,0,len);  </span><br><span class="line">    &#125;  </span><br><span class="line">    bos.close();  </span><br><span class="line">    bis.close();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="特殊操作流"><a href="#特殊操作流" class="headerlink" title="特殊操作流"></a>特殊操作流</h2><h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3><p>这里说的输入输出，其实是从控制器输入到内存里面，输出的话，是从内存里面输出到屏幕控制器上</p><p>System类中有两个静态的成员变量:</p><ul><li>public static final InputStream in: 标准输入流。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源</li><li>public static final PrintStream out: 标准输出流。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标</li></ul><p>自己实现键盘录入数据:</p><ul><li>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</li></ul><p>写起来太麻烦，Java就提供了一个类实现键盘录入<br>输出语句的本质:是一个标准的输出流</p><p>·PrintStream ps = System.out;</p><p>·PrintStream类有的方法，System.out都可以使用</p><ul><li>Scanner sc = new Scanner(System.in);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.InputStreamReader;  </span><br><span class="line">  </span><br><span class="line">public class _1 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        BufferedReader br=new BufferedReader(new InputStreamReader(System.in ));  </span><br><span class="line">        System.out.println(&quot;请输入一个字符串&quot;);  </span><br><span class="line">        String line=br.readLine();  </span><br><span class="line">        System.out.println(&quot;你输入的字符串是&quot;+line);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3>![[Pasted image 20240719193933.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.PrintStream;  </span><br><span class="line">  </span><br><span class="line">public class _2 &#123;  </span><br><span class="line">    public static void main(String[] args) throws FileNotFoundException &#123;  </span><br><span class="line">        PrintStream ps=new PrintStream(&quot;myOtherStream\\ps.txt&quot; );  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  ps.write(97);</span><br><span class="line">  //特有方法</span><br><span class="line">        ps.println(97);  </span><br><span class="line">        ps.println(&quot;sdsf&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>![[Pasted image 20240719201041.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileWriter;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.PrintWriter;  </span><br><span class="line">  </span><br><span class="line">public class _3 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">//        PrintWriter pw=new PrintWriter(&quot;myOtherStream\\pw.txt&quot;);  </span><br><span class="line">//        pw.println(&quot;hello&quot;);  </span><br><span class="line">//        pw.flush();  </span><br><span class="line">特有方法</span><br><span class="line">        PrintWriter pw=new PrintWriter(new FileWriter(&quot;myOtherStream\\pw.txt&quot;),true);  </span><br><span class="line">        pw.println(&quot;hello&quot;);  </span><br><span class="line">        pw.println(&quot;world&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240719201843.png]]<br>在代码中，new FileWrite就是负责输出流的，打印流虽然简单，但是没法单独的读取对象，所以需要出入流和输出流<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class _4 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        BufferedReader br=new BufferedReader(new FileReader(&quot;myOtherStream\\PrintStreamDemo.java&quot;));  </span><br><span class="line">        PrintWriter pw=new PrintWriter(new FileWriter(&quot;myOtherStream\\Copy.java&quot;));  </span><br><span class="line">        String line;  </span><br><span class="line">        while((line=br.readLine())!=null)&#123;  </span><br><span class="line">            pw.println(line);  </span><br><span class="line">        &#125;  </span><br><span class="line">        pw.close();  </span><br><span class="line">        br.close();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="对象序列化流"><a href="#对象序列化流" class="headerlink" title="对象序列化流"></a>对象序列化流</h3><p>对象序列化流: ObjectOutputStream</p><p>将Java对象的原始数据类型和图形写入OutputStream。可以使用ObjectInputStream读取(重构)对象。可以通过使用流的文件来实现对象的持久存储。如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象</p><p>构造方法:</p><p>ObjectOutputStream(OutputStream out):创建一个写入指定的OutputStream的ObjectOutputStream</p><p>序列化对象的方法:</p><p>void writeObject(Object obj):将指定的对象写入ObjectOutputStream</p><p>注意:</p><p>一个对象要想被序列化，该对象所属的类必须实现Serializable接口</p><p>Serializable是一个标记接口，实现该接口，不需要重写任何方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.io.Serializable;  </span><br><span class="line">  </span><br><span class="line">public class Student implements Serializable &#123;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private int age;  </span><br><span class="line">  </span><br><span class="line">    public Student() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Student(String name, int age) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getAge() &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAge(int age) &#123;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileOutputStream;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.ObjectOutputStream;  </span><br><span class="line">  </span><br><span class="line">public class _5 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(&quot;myOtherStream\\oos.txt&quot;));  </span><br><span class="line">        Student s=new Student(&quot;林青霞&quot;,30);  </span><br><span class="line">        oos.writeObject(s);  </span><br><span class="line">        oos.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![[Pasted image 20240719205603.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileInputStream;  </span><br><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.ObjectInputStream;  </span><br><span class="line">  </span><br><span class="line">public class _6 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;  </span><br><span class="line">        ObjectInputStream ois=new ObjectInputStream(new FileInputStream(&quot;myOtherStream\\oos.txt&quot;));  </span><br><span class="line">        Object obj=ois.readObject();  </span><br><span class="line">        Student s=(Student) obj;  </span><br><span class="line">        System.out.println(s.getName()+&quot;,&quot;+s.getAge());  </span><br><span class="line">        ois.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240719211326.png]]</p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>![[Pasted image 20240719212804.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Properties;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class ProperDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Properties prop=new Properties();  </span><br><span class="line">        prop.put(&quot;itheima001&quot;,&quot;林青霞&quot;);  </span><br><span class="line">        prop.put(&quot;itheima002&quot;,&quot;张曼玉&quot;);  </span><br><span class="line">        prop.put(&quot;itheima003&quot;,&quot;王祖贤&quot;);  </span><br><span class="line">        Set&lt;Object&gt; keySet=prop.keySet();  </span><br><span class="line">        for(Object key:keySet)&#123;  </span><br><span class="line">            Object value=prop.get(key);  </span><br><span class="line">            System.out.println(key+&quot;,&quot;+value);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>![[Pasted image 20240719213453.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Properties;  </span><br><span class="line">import java.util.Set;  </span><br><span class="line">  </span><br><span class="line">public class ProperDemo2 &#123;  </span><br><span class="line">    public static  void main(String[] args) &#123;  </span><br><span class="line">        Properties prop=new Properties();  </span><br><span class="line">        prop.setProperty(&quot;itheima001&quot;,&quot;林青霞&quot;);  </span><br><span class="line">        prop.setProperty(&quot;itheima002&quot;,&quot;张曼玉&quot;);  </span><br><span class="line">        System.out.println(prop);  </span><br><span class="line">        System.out.println(prop.getProperty(&quot;itheima001&quot;));  </span><br><span class="line">  </span><br><span class="line">        Set&lt;String&gt; names=prop.stringPropertyNames();  </span><br><span class="line">        for(String key:names)&#123;  </span><br><span class="line">            String value=prop.getProperty(key);  </span><br><span class="line">            System.out.println(key+&quot;,&quot;+value);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Properties和IO流结合的方法"><a href="#Properties和IO流结合的方法" class="headerlink" title="Properties和IO流结合的方法"></a>Properties和IO流结合的方法</h3><p>![[Pasted image 20240720071806.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileReader;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.util.Properties;  </span><br><span class="line">  </span><br><span class="line">public class ProperDemo03 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        myStore();  </span><br><span class="line">        myLoad();  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static void myLoad() throws IOException&#123;  </span><br><span class="line">        Properties prop=new Properties();  </span><br><span class="line">        FileReader fr=new FileReader(&quot;myOtherStream\\oos.txt&quot;);  </span><br><span class="line">        prop.load(fr);  </span><br><span class="line">        fr.close();  </span><br><span class="line">        System.out.println(prop);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    private static void myStore() throws IOException&#123;  </span><br><span class="line">        Properties prop=new Properties();  </span><br><span class="line">        prop.setProperty(&quot;itheima001&quot;,&quot;林青霞&quot;);  </span><br><span class="line">        prop.setProperty(&quot;itheima002&quot;,&quot;张曼玉&quot;);  </span><br><span class="line">        prop.setProperty(&quot;itheima003&quot;,&quot;王祖贤&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="案例-10"><a href="#案例-10" class="headerlink" title="案例"></a>案例</h3><p>![[Pasted image 20240720074725.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line">import java.io.FileReader;  </span><br><span class="line">import java.io.FileWriter;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.util.Properties;  </span><br><span class="line">  </span><br><span class="line">public class ProperDemo4 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        Properties prop =new Properties();  </span><br><span class="line">        FileReader fr=new FileReader(&quot;myOtherStream\\game.txt&quot;);  </span><br><span class="line">        prop.load(fr);  </span><br><span class="line">        fr.close();  </span><br><span class="line">  </span><br><span class="line">        String count=prop.getProperty(&quot;count&quot;);  </span><br><span class="line">        int number=Integer.parseInt(count);  </span><br><span class="line">        if(number&gt;=3)&#123;  </span><br><span class="line">            System.out.println(&quot;游戏试玩已结束，想玩请充值(www.itcast.cn)&quot;);  </span><br><span class="line">        &#125;else&#123;  </span><br><span class="line">            GuessNumber.start();  </span><br><span class="line">            number++;  </span><br><span class="line">            prop.setProperty(&quot;count&quot;,String.valueOf(number));  </span><br><span class="line">            FileWriter fw=new FileWriter(&quot;myOtherStream\\game.txt&quot;);  </span><br><span class="line">            prop.store(fw,null);  </span><br><span class="line">            fw.close();  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="21-多线程"><a href="#21-多线程" class="headerlink" title="21.多线程"></a>21.多线程</h1><h2 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>进程：是正在运行的程序</p><ul><li>是系统进行资源分配和调用的独立单位</li><li>每一个进程都有他自己的内存空间和系统资源<br>线程：是进程中的单个顺序控制流，是一条执行路径<ul><li>单线程：一个进程如果只有一条执行路径，则称为单线程程序</li><li>多线程：一个进程如果有多条执行路径，则称为多线程程序<br>举例</li><li>记事本程序</li><li>扫雷程序<h3 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h3>![[Pasted image 20240720080255.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class _1Thread extends Thread&#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void run()&#123;  </span><br><span class="line">        for(int i=0;i&lt;100;i++)&#123;  </span><br><span class="line">            System.out.println(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class _1 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        _1Thread my1=new _1Thread();  </span><br><span class="line">        _1Thread my2=new _1Thread();  </span><br><span class="line">        my1.start();  </span><br><span class="line">        my2.start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置和获取线程名称"><a href="#设置和获取线程名称" class="headerlink" title="设置和获取线程名称"></a>设置和获取线程名称</h3>![[Pasted image 20240720082017.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread &#123;  </span><br><span class="line">    public MyThread()&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public MyThread(String name)&#123;  </span><br><span class="line">        super(name);  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void run()&#123;  </span><br><span class="line">        for(int i=0;i&lt;100;i++)&#123;  </span><br><span class="line">            System.out.println(getName()+&quot;:&quot;+i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class MyThreadDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">//        MyThread my1=new MyThread(&quot;飞机&quot;);  </span><br><span class="line">//        MyThread my2=new MyThread(&quot;高铁&quot;);  </span><br><span class="line">       // my1.setName(&quot;高铁&quot;);  </span><br><span class="line">      //  my2.setName(&quot;飞机&quot;);  </span><br><span class="line">//        my1.start();  </span><br><span class="line">//        my2.start();  </span><br><span class="line">        System.out.println(Thread.currentThread().getName());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3>线程有两种调度模式</li><li>分时调度模型：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片</li><li>抢占式调度模型：优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的CPU时间片相对多一些<br>java使用的是抢占式调度模型<br>假如计算机只有一个CPU，那么CPU在某一时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权才可以执行指令。所以说多线程程序的执行是有随机性，因为谁抢到CPU的使用权是不一定的。</li></ul></li></ul><p>Thread类中设置和获取线程优先级的方法</p><p>public final int getPriority():返回此线程的优先级</p><p>public final void setPriority(int newPriority):更改此线程的优先级</p><p>线程默认优先级是5；线程优先级的范围是:1-10</p><p>线程优先级高仅仅表示线程获取的CPU时间片的几率高，但是要在次数比较多，或者多次运行的时候才能看到你想要的效果<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread &#123;  </span><br><span class="line">    public MyThread()&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public MyThread(String name)&#123;  </span><br><span class="line">        super(name);  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void run()&#123;  </span><br><span class="line">        for(int i=0;i&lt;100;i++)&#123;  </span><br><span class="line">            System.out.println(getName()+&quot;:&quot;+i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MyThreadDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        MyThread my1 = new MyThread(&quot;飞机&quot;);  </span><br><span class="line">        MyThread my2 = new MyThread(&quot;高铁&quot;);  </span><br><span class="line">        // my1.setName(&quot;高铁&quot;);  </span><br><span class="line">        //my2.setName(&quot;飞机&quot;);  </span><br><span class="line">        System.out.println(my1.getPriority());  </span><br><span class="line">        System.out.println(my2.getPriority());  </span><br><span class="line">        my1.setPriority(5);  </span><br><span class="line">        my2.setPriority(1);  </span><br><span class="line">        my1.start();  </span><br><span class="line">        my2.start();  </span><br><span class="line">        System.out.println(Thread.currentThread().getName());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><p>![[Pasted image 20240720085427.png]]<br>执行的线程停留指定的毫秒数<br>![[Pasted image 20240720085631.png]]<br>等待线程死亡<br>![[Pasted image 20240720085725.png]]<br>守护线程<br>![[Pasted image 20240720085939.png]]</p><h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><p>![[Pasted image 20240720090252.png]]</p><h3 id="多线程的实现方式-1"><a href="#多线程的实现方式-1" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h3><p>![[Pasted image 20240720092242.png]]<br>![[Pasted image 20240720092311.png]]![[Pasted image 20240720092324.png]]</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>卖票<br>![[Pasted image 20240720093702.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class SellTicket implements Runnable&#123;  </span><br><span class="line">    private int tickets=100;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void run()&#123;  </span><br><span class="line">        while(true)&#123;  </span><br><span class="line">            if(tickets&gt;0)&#123;  </span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;正在出售第&quot;+tickets+&quot;张票&quot;);  </span><br><span class="line">                tickets--;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class SellTicketDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">        SellTicket st=new SellTicket();  </span><br><span class="line">        Thread t1=new Thread(st,&quot;窗口1&quot;);  </span><br><span class="line">        Thread t2=new Thread(st,&quot;窗口2&quot;);  </span><br><span class="line">        Thread t3=new Thread(st,&quot;窗口3&quot;);  </span><br><span class="line">        t1.start();  </span><br><span class="line">        t2.start();  </span><br><span class="line">        t3.start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240720094633.png]]<br>![[Pasted image 20240720095939.png]]![[Pasted image 20240720100003.png]]</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>![[Pasted image 20240720101831.png]]![[Pasted image 20240720101855.png]]![[Pasted image 20240720101911.png]]</p><h3 id="线程安全的类"><a href="#线程安全的类" class="headerlink" title="线程安全的类"></a>线程安全的类</h3><p>![[Pasted image 20240720111348.png]]![[Pasted image 20240720111515.png]]</p><h3 id="LOCK锁"><a href="#LOCK锁" class="headerlink" title="LOCK锁"></a>LOCK锁</h3><p>![[Pasted image 20240720112119.png]]<br>![[Pasted image 20240720112054.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class SellTicketDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">        SellTicket st=new SellTicket();  </span><br><span class="line">        Thread t1=new Thread(st,&quot;窗口1&quot;);  </span><br><span class="line">        Thread t2=new Thread(st,&quot;窗口2&quot;);  </span><br><span class="line">        Thread t3=new Thread(st,&quot;窗口3&quot;);  </span><br><span class="line">        t1.start();  </span><br><span class="line">        t2.start();  </span><br><span class="line">        t3.start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.locks.Lock;  </span><br><span class="line">import java.util.concurrent.locks.ReentrantLock;  </span><br><span class="line">  </span><br><span class="line">public class SellTicket implements Runnable&#123;  </span><br><span class="line">    private int tickets=100;  </span><br><span class="line">    private Lock lock=new ReentrantLock();  </span><br><span class="line">    @Override  </span><br><span class="line">    public void run()&#123;  </span><br><span class="line">        while(true)&#123;  </span><br><span class="line">            try&#123;  </span><br><span class="line">                lock.lock();  </span><br><span class="line">            if(tickets&gt;0)&#123;  </span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;正在出售第&quot;+tickets+&quot;张票&quot;);  </span><br><span class="line">                tickets--;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;finally &#123;  </span><br><span class="line">                lock.unlock();  </span><br><span class="line">            &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h3><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>生产者消费者模式是一个十分经典的多线程协作的模式，弄懂生产者消费者问题能够让我们对多线程编程的理解更加深刻所谓生产者消费者问题，实际上主要是包含了两类线程:</p><ul><li><p>一类是生产者线程用于生产数据</p></li><li><p>一类是消费者线程用于消费数据</p></li></ul><p>为了解耦生产和消费者的关系，通常会采用共享的数据区域，就像是一个仓库</p><ul><li><p>生产者生产数据之后直接放置在共享数据区中，并不需要关心消费者的行为</p></li><li><p>消费者只需要从共享数据区中去获取数据，并不需要关心生产者的行为<br>![[Pasted image 20240720112901.png]] </p><h1 id="22-网络编程"><a href="#22-网络编程" class="headerlink" title="22.网络编程"></a>22.网络编程</h1><h2 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h2><h3 id="网络编程概述"><a href="#网络编程概述" class="headerlink" title="网络编程概述"></a>网络编程概述</h3><p>计算机网络</p></li><li>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统<br>网络编程</li><li>在网络通信协议下，实现网络互连的不同计算机上运行的程序间可以进行数据交换<h3 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h3>IP地址</li><li>要想让网络中的计算机能够相互通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识。<br>端口</li><li>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识<br>协议</li><li>通过计算机网络可以使多台计算机实现链接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</li></ul><h3 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h3><p>常用命令</p><ul><li>ipconfig:查看本机的IP地址</li><li>ping IP地址：检查网络是否联通<br>特殊Ip地址<ul><li>127.0.0.1：是回送地址，可以代表本机地址，一般用来测试使用</li></ul></li></ul><h3 id="InetAddress的使用"><a href="#InetAddress的使用" class="headerlink" title="InetAddress的使用"></a>InetAddress的使用</h3><p>![[Pasted image 20240720151236.png]]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.net.InetAddress;  </span><br><span class="line">import java.net.UnknownHostException;  </span><br><span class="line">  </span><br><span class="line">public class _1 &#123;  </span><br><span class="line">    public static void main(String[] args) throws UnknownHostException &#123;  </span><br><span class="line">        InetAddress address=InetAddress.getByName(&quot;DONGJINXIANG&quot;);  </span><br><span class="line">        String name=address.getHostName();  </span><br><span class="line">        String ip=address.getHostAddress();  </span><br><span class="line">        System.out.println(&quot;主机名&quot;+name);  </span><br><span class="line">        System.out.println(&quot;Ip地址&quot;+ip);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="端口-和协议"><a href="#端口-和协议" class="headerlink" title="端口 和协议"></a>端口 和协议</h3><p>![[Pasted image 20240720152136.png]]<br>![[Pasted image 20240720152205.png]]![[Pasted image 20240720152217.png]]![[Pasted image 20240720152228.png]]</p><h2 id="UDP通信程序"><a href="#UDP通信程序" class="headerlink" title="UDP通信程序"></a>UDP通信程序</h2><h3 id="UDP发送数据"><a href="#UDP发送数据" class="headerlink" title="UDP发送数据"></a>UDP发送数据</h3><p>![[Pasted image 20240720153105.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;  </span><br><span class="line">import java.net.*;  </span><br><span class="line">  </span><br><span class="line">public class 发送数据 &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        DatagramSocket ds=new DatagramSocket();  </span><br><span class="line">        byte[] bys=&quot;hello,udp,我来了&quot;.getBytes();  </span><br><span class="line">        DatagramPacket dp=new DatagramPacket(bys,bys.length, InetAddress.getByName(&quot;192.168.1.66&quot;),10086);  </span><br><span class="line">        ds.send(dp);  </span><br><span class="line">        ds.close();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="UDP接收数据"><a href="#UDP接收数据" class="headerlink" title="UDP接收数据"></a>UDP接收数据</h3><p>![[Pasted image 20240720154430.png]]<br>![[Pasted image 20240720154601.png]]</p><h3 id="UDP通信程序练习"><a href="#UDP通信程序练习" class="headerlink" title="UDP通信程序练习"></a>UDP通信程序练习</h3><p>![[Pasted image 20240720160620.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">port java.io.BufferedReader;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.InputStreamReader;  </span><br><span class="line">import java.net.DatagramPacket;  </span><br><span class="line">import java.net.DatagramSocket;  </span><br><span class="line">import java.net.InetAddress;  </span><br><span class="line">import java.net.SocketException;  </span><br><span class="line">  </span><br><span class="line">public class SendDeno &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        DatagramSocket ds=new DatagramSocket();  </span><br><span class="line">        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));  </span><br><span class="line">        String line;  </span><br><span class="line">        while((line= br.readLine())!=null)&#123;  </span><br><span class="line">            if(&quot;886&quot;.equals(line))&#123;  </span><br><span class="line">                break;  </span><br><span class="line">            &#125;  </span><br><span class="line">            byte[] bys=line.getBytes();  </span><br><span class="line">            DatagramPacket dp=new DatagramPacket(bys,bys.length, InetAddress.getByName(&quot;192.168.169.14&quot;),12345678);  </span><br><span class="line">            ds.send(dp);  </span><br><span class="line">        &#125;  </span><br><span class="line">        ds.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;  </span><br><span class="line">import java.net.DatagramPacket;  </span><br><span class="line">import java.net.DatagramSocket;  </span><br><span class="line">import java.net.SocketException;  </span><br><span class="line">  </span><br><span class="line">public class ReceiveDemo &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        DatagramSocket ds=new DatagramSocket(12345678);  </span><br><span class="line">  </span><br><span class="line">        while(true)&#123;  </span><br><span class="line">            byte[] bys=new byte[1024];  </span><br><span class="line">            DatagramPacket dp=new DatagramPacket(bys,bys.length);  </span><br><span class="line">            ds.receive(dp);  </span><br><span class="line">            System.out.println(&quot;数据是：&quot;+new String(dp.getData(),0,dp.getLength()));  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><p>![[Pasted image 20240720161309.png]]![[Pasted image 20240720161338.png]]![[Pasted image 20240720162304.png]]![[Pasted image 20240720162330.png]]<br>![[Pasted image 20240720164716.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.InputStream;  </span><br><span class="line">import java.io.OutputStream;  </span><br><span class="line">import java.net.Socket;  </span><br><span class="line">  </span><br><span class="line">public class ClientDemo &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        Socket s=new Socket(&quot;192.168.169.14&quot;,10000);  </span><br><span class="line">        OutputStream os=s.getOutputStream();  </span><br><span class="line">        os.write(&quot;hello,tcp,我来了&quot;.getBytes());  </span><br><span class="line">        InputStream is=s.getInputStream();  </span><br><span class="line">        byte[] bys=new byte[1024];  </span><br><span class="line">        int len=is.read(bys);  </span><br><span class="line">        String data=new String(bys,0,len);  </span><br><span class="line">        System.out.println(&quot;客户端：&quot;+data);  </span><br><span class="line">  </span><br><span class="line">        s.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.InputStream;  </span><br><span class="line">import java.io.OutputStream;  </span><br><span class="line">import java.net.ServerSocket;  </span><br><span class="line">import java.net.Socket;  </span><br><span class="line">  </span><br><span class="line">public class ServerDemo &#123;  </span><br><span class="line">    public static void main(String[] args) throws IOException &#123;  </span><br><span class="line">        ServerSocket ss=new ServerSocket(10000);  </span><br><span class="line">        Socket s=ss.accept();  </span><br><span class="line">        InputStream is=s.getInputStream();  </span><br><span class="line">        byte[] bys=new byte[1024];  </span><br><span class="line">        int len =is.read(bys);  </span><br><span class="line">        String data=new String(bys,0,len);  </span><br><span class="line">        System.out.println(&quot;服务器&quot;+data);  </span><br><span class="line">        OutputStream os=s.getOutputStream();  </span><br><span class="line">        os.write(&quot;数据已经收到&quot;.getBytes());  </span><br><span class="line">        s.close();;  </span><br><span class="line">        ss.close();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240721174835.png]]![[Pasted image 20240721175625.png]]</p><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h2 id="函数式编程思想概述"><a href="#函数式编程思想概述" class="headerlink" title="函数式编程思想概述"></a>函数式编程思想概述</h2><p>![[Pasted image 20240721175838.png]]![[Pasted image 20240721180246.png]]![[Pasted image 20240721180306.png]]</p><h2 id="Lambda表达式的标准格式"><a href="#Lambda表达式的标准格式" class="headerlink" title="Lambda表达式的标准格式"></a>Lambda表达式的标准格式</h2><p>![[Pasted image 20240721180607.png]]![[Pasted image 20240721180616.png]]<br>![[Pasted image 20240721181415.png]]![[Pasted image 20240721181432.png]]![[Pasted image 20240721181507.png]]</p><h2 id="案例-11"><a href="#案例-11" class="headerlink" title="案例"></a>案例</h2><p>![[Pasted image 20240721182100.png]]![[Pasted image 20240721182043.png]]![[Pasted image 20240721182028.png]]![[Pasted image 20240721182511.png]]![[Pasted image 20240721182453.png]]</p><p>![[Pasted image 20240721182443.png]] </p><h3 id="Lambda-表达式的省略模式"><a href="#Lambda-表达式的省略模式" class="headerlink" title="Lambda 表达式的省略模式"></a>Lambda 表达式的省略模式</h3><p>![[Pasted image 20240721183330.png]]<br>![[Pasted image 20240721183248.png]] ![[Pasted image 20240721183308.png]]</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意事项:</p><ul><li>使用Lambda必须要有接口，并且要求接口中有且仅有一个抽象方法</li><li>必须有上下文环境，才能推导出Lambda对应的接口</li></ul><p>根据局部变量的赋值得知Lambda对应的接口: Runnable r = () -&gt; System.out.println(“Lambda表达式”);</p><p>根据调用方法的参数得知Lambda对应的接口: new Thread(() -&gt; System.out.println(“Lambda表达式”)) start();<br>![[Pasted image 20240721184209.png]]</p><h3 id="Lambda表达式和匿名内部类的区别"><a href="#Lambda表达式和匿名内部类的区别" class="headerlink" title="Lambda表达式和匿名内部类的区别"></a>Lambda表达式和匿名内部类的区别</h3><p>![[Pasted image 20240721184957.png]]</p><h2 id="接口组成更新概述"><a href="#接口组成更新概述" class="headerlink" title="接口组成更新概述"></a>接口组成更新概述</h2><p>![[Pasted image 20240721185217.png]]</p><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>![[Pasted image 20240721185743.png]]![[Pasted image 20240721185812.png]]![[Pasted image 20240721185847.png]]![[Pasted image 20240721185904.png]]</p><h3 id="接口中的静态方法"><a href="#接口中的静态方法" class="headerlink" title="接口中的静态方法"></a>接口中的静态方法</h3><p>![[Pasted image 20240721190201.png]]![[Pasted image 20240721190236.png]]![[Pasted image 20240721190250.png]]![[Pasted image 20240721190300.png]]</p><h3 id="接口中私有方法"><a href="#接口中私有方法" class="headerlink" title="接口中私有方法"></a>接口中私有方法</h3><p> Java 9中新增加了带方法体的私有方法，这其实在Java 8中就埋下了伏笔: Java 8允许在接口中定义带方法体的默认方法和静态方法。这样可能就会引发一个问题: 当两个默认方法或者静态方法中包含一段相同的代码实现时，程序必然考虑将这段实现代码抽取成一个共性方法，而这个共性方法是不需要让别人使用的，因此用私有给隐藏起来，这就是Java 9增加私有方法的必然性</p><p>接口中私有方法的定义格式:</p><p>·格式1: private 返回值类型 方法名(参数列表){ }</p><p>·范例1: private void show() { }</p><p>·格式2: private static 返回值类型 方法名(参数列表){ }</p><p>·范例2: private static void method() { }</p><p>接口中私有方法的注意事项:</p><p>·默认方法可以调用私有的静态方法和非静态方法</p><p>·静态方法只能调用私有的静态方法</p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>![[Pasted image 20240721193050.png]]<br>![[Pasted image 20240721192923.png]]</p><h2 id="Lambda表达式支持的方法引用"><a href="#Lambda表达式支持的方法引用" class="headerlink" title="Lambda表达式支持的方法引用"></a>Lambda表达式支持的方法引用</h2><p>![[Pasted image 20240721193306.png]]![[Pasted image 20240721193338.png]]![[Pasted image 20240721193610.png]]![[Pasted image 20240721194007.png]]![[Pasted image 20240721194331.png]]![[Pasted image 20240721194350.png]]![[Pasted image 20240721194517.png]]![[Pasted image 20240721194458.png]]![[Pasted image 20240721194547.png]]![[Pasted image 20240721194650.png]]</p><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>![[Pasted image 20240721194918.png]]![[Pasted image 20240721194933.png]]![[Pasted image 20240721194951.png]]</p><h2 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h2><p>![[Pasted image 20240721195338.png]]<br>![[Pasted image 20240721195326.png]]![[Pasted image 20240722074525.png]]![[Pasted image 20240722074954.png]]</p><h3 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h3><p>Supplier接口</p><p>Supplier: 包含一个无参的方法</p><p>· T get() :获得结果</p><p>· 该方法不需要参数，它会按照某种实现逻辑(由Lambda表达式实现)返回一个数据</p><p>· Supplier接口也被称为生产型接口，如果我们指定了接口的泛型是什么类型，那么接口中的get方法就会生产什么类型的数据供我们使用</p><p>![[Pasted image 20240722075610.png]]![[Pasted image 20240722080202.png]]<br>![[Pasted image 20240722081622.png]]<br>![[Pasted image 20240722081208.png]]![[Pasted image 20240722081140.png]]![[Pasted image 20240722082513.png]]</p><h2 id="Predicate接口"><a href="#Predicate接口" class="headerlink" title="Predicate接口"></a>Predicate接口</h2><p>![[Pasted image 20240722094039.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.function.Predicate;  </span><br><span class="line">  </span><br><span class="line">public class _1 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">      checkString(&quot;hello&quot;,(String s)-&gt;&#123;  </span><br><span class="line">            return s.length()&gt;8;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        boolean b2=checkString(&quot;hello&quot;,s-&gt;s.length()&gt;8);  </span><br><span class="line">        System.out.println(b2);  </span><br><span class="line">        boolean b3=checkString(&quot;helloworld&quot;,s-&gt;s.length()&gt;8);  </span><br><span class="line">        System.out.println(b3);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static boolean checkString(String s, Predicate&lt;String&gt; pre)&#123;  </span><br><span class="line">     //   return pre.test(s);  </span><br><span class="line">        return pre.negate().test(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.util.function.Predicate;  </span><br><span class="line">  </span><br><span class="line">public class _2 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        boolean b1=checkString(&quot;hello&quot;,s-&gt;s.length()&gt;8,s-&gt;s.length()&lt;15);  </span><br><span class="line">        System.out.println(b1);  </span><br><span class="line">        boolean b2=checkString(&quot;helloworld&quot;,s-&gt;s.length()&gt;8,s-&gt;s.length()&lt;15);  </span><br><span class="line">        System.out.println(b2);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static boolean checkString(String s, Predicate&lt;String&gt; pre1,Predicate&lt;String&gt; pre2)&#123;  </span><br><span class="line">        boolean b1=pre1.test(s);  </span><br><span class="line">        boolean b2=pre2.test(s);  </span><br><span class="line">        boolean b=b1 &amp;&amp; b2;  </span><br><span class="line">        return b;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240722102131.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ort java.lang.ref.SoftReference;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.function.Predicate;  </span><br><span class="line">  </span><br><span class="line">public class _3 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        String[] strArray=&#123;&quot;林青霞，30&quot;,&quot;柳岩，34&quot;,&quot;张曼玉，35&quot;,&quot;貂蝉,31&quot;,&quot;王祖贤，33&quot;&#125;;  </span><br><span class="line">        ArrayList&lt;String&gt; array=myFiler(strArray,s-&gt;s.split(&quot;,&quot;)[0].length()&gt;2,  </span><br><span class="line">                s-&gt;Integer.parseInt(s.split(&quot;,&quot;)[1])&gt;33);  </span><br><span class="line">        for(String str:array)&#123;  </span><br><span class="line">            System.out.println(str);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static ArrayList&lt;String&gt; myFiler(String [] strArray, Predicate&lt;String&gt; pre1, Predicate&lt;String&gt; pre2)&#123;  </span><br><span class="line">        ArrayList&lt;String&gt; array=new ArrayList&lt;String&gt;();  </span><br><span class="line">        for(String str:strArray)&#123;  </span><br><span class="line">            if(pre1.and(pre2).test(str))&#123;  </span><br><span class="line">                array.add(str);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return array;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h2><p>![[Pasted image 20240722110237.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.function.Function;  </span><br><span class="line">  </span><br><span class="line">public class _4 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">        convert(&quot;100&quot;,s -&gt; Integer.parseInt(s));  </span><br><span class="line">        convert(100,i-&gt;String.valueOf(i+566));  </span><br><span class="line">        convert(&quot;100&quot;,s-&gt;Integer.parseInt(s),i-&gt;String.valueOf(i+566));  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static void convert(String s, Function&lt;String,Integer&gt;fun)&#123;  </span><br><span class="line">        int i= fun.apply(s);  </span><br><span class="line">        System.out.println(i);  </span><br><span class="line">    &#125;  </span><br><span class="line">    private  static void convert(int i,Function&lt;Integer,String&gt;fun)&#123;  </span><br><span class="line">        String s=fun.apply(i);  </span><br><span class="line">        System.out.println(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">    private  static void convert(String s,Function&lt;String,Integer&gt;fun1,Function&lt;Integer,String&gt;fun2)&#123;  </span><br><span class="line">//        Integer i=fun1.apply(s);  </span><br><span class="line">//        String ss=fun2.apply(i);  </span><br><span class="line">//        System.out.println(ss);  </span><br><span class="line">        String ss=fun1.andThen(fun2).apply(s);  </span><br><span class="line">        System.out.println(ss);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240722110931.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.function.Function;  </span><br><span class="line">  </span><br><span class="line">public class _5 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">       String s=&quot;林青霞，30&quot;;  </span><br><span class="line">//        convert(s,(String ss)-&gt;&#123;  </span><br><span class="line">//            return s.split(&quot;,&quot;)[1];  </span><br><span class="line">//        &#125;,(String ss)-&gt;&#123;  </span><br><span class="line">//            return Integer.parseInt(ss);  </span><br><span class="line">//        &#125;,(Integer i)-&gt;&#123;  </span><br><span class="line">//            return i+70;  </span><br><span class="line">//        &#125;);  </span><br><span class="line">        convert(s,ss-&gt;ss.split(&quot;,&quot;)[1],ss-&gt;Integer.parseInt(ss),i-&gt;i+70);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static void convert(String s, Function&lt;String,String&gt; fun1,Function&lt;String,Integer&gt;fun2,Function&lt;Integer,Integer&gt;fun3)&#123;  </span><br><span class="line">        int i=fun1.andThen(fun2).andThen(fun3).apply(s);  </span><br><span class="line">        System.out.println(i);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><p>![[Pasted image 20240722141016.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class _1 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; list=new ArrayList&lt;String&gt;();  </span><br><span class="line">        list.add(&quot;林青霞&quot;);  </span><br><span class="line">        list.add(&quot;张曼玉&quot;);  </span><br><span class="line">        list.add(&quot;王祖贤&quot;);  </span><br><span class="line">        list.add(&quot;柳岩&quot;);  </span><br><span class="line">        list.add(&quot;张敏&quot;);  </span><br><span class="line">        list.add(&quot;张无忌&quot;);  </span><br><span class="line">          </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        list.stream().filter(s-&gt;s.startsWith(&quot;张&quot;)).filter(s-&gt;s.length()==3).forEach(s-&gt; System.out.println(s));  </span><br><span class="line">        list.stream().filter(s-&gt;s.startsWith(&quot;张&quot;)).filter(s-&gt;s.length()==3).forEach(System.out::println);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Stream流的生成方式"><a href="#Stream流的生成方式" class="headerlink" title="Stream流的生成方式"></a>Stream流的生成方式</h3><p>![[Pasted image 20240722142055.png]]Stream流的使用</p><p>·生成流</p><p>通过数据源(集合,数组等)生成流</p><p>list.stream()</p><p>·中间操作</p><p>一个流后面可以跟随零个或多个中间操作，其目的主要是打开流，做出某种程度的数据过滤/映射，然后返回一个新的流，交给下一个操作使用</p><p>filter()</p><p>·终结操作</p><p>一个流只能有一个终结操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作</p><p>forEach()<br>![[Pasted image 20240722144932.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;  </span><br><span class="line">import java.util.stream.Stream;  </span><br><span class="line">  </span><br><span class="line">public class 流 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;String&gt; list=new ArrayList&lt;String&gt;();  </span><br><span class="line">        Stream&lt;String&gt; listStream=list.stream();  </span><br><span class="line">  </span><br><span class="line">        Set&lt;String&gt; set=new HashSet&lt;&gt;();  </span><br><span class="line">        Stream&lt;String&gt; setStream=set.stream();  </span><br><span class="line">  </span><br><span class="line">        Map&lt;String,Integer&gt; map=new HashMap&lt;&gt;();  </span><br><span class="line">        Stream&lt;String&gt; keyStream=map.keySet().stream();  </span><br><span class="line">        Stream&lt;Integer&gt; valusStream=map.values().stream();  </span><br><span class="line">        Stream&lt;Map.Entry&lt;String,Integer&gt;&gt; entryStream=map.entrySet().stream();  </span><br><span class="line">  </span><br><span class="line">        String[] strArray=&#123;&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;&#125;;  </span><br><span class="line">        Stream&lt;String&gt; strArrayStream=Stream.of(strArray);  </span><br><span class="line">        Stream&lt;String&gt; strArrayStream2=Stream.of(&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;);  </span><br><span class="line">        Stream&lt;Integer&gt; intStream=Stream.of(10,20,30);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Stream流的常见中间操作方法"><a href="#Stream流的常见中间操作方法" class="headerlink" title="Stream流的常见中间操作方法"></a>Stream流的常见中间操作方法</h3><p>![[Pasted image 20240722150304.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class _2 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; list=new ArrayList&lt;String&gt;();  </span><br><span class="line">        list.add(&quot;林青霞&quot;);  </span><br><span class="line">        list.add(&quot;张曼玉&quot;);  </span><br><span class="line">        list.add(&quot;王祖贤&quot;);  </span><br><span class="line">        list.add(&quot;柳岩&quot;);  </span><br><span class="line">        list.add(&quot;张敏&quot;);  </span><br><span class="line">        list.add(&quot;张无忌&quot;);  </span><br><span class="line">  </span><br><span class="line">        list.stream().filter((String s)-&gt;&#123;  </span><br><span class="line">            return s.startsWith(&quot;张&quot;);  </span><br><span class="line">        &#125;).forEach(System.out::println);  </span><br><span class="line">  </span><br><span class="line">        list.stream().filter(s-&gt;s.length()==3).forEach(System.out::println);  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        list.stream().filter(s-&gt;s.startsWith(&quot;张&quot;)).filter(s-&gt;s.length()==3).forEach(System.out::println);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240722151107.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class _3 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; list=new ArrayList&lt;String&gt;();  </span><br><span class="line">        list.add(&quot;林青霞&quot;);  </span><br><span class="line">        list.add(&quot;张曼玉&quot;);  </span><br><span class="line">        list.add(&quot;王祖贤&quot;);  </span><br><span class="line">        list.add(&quot;柳岩&quot;);  </span><br><span class="line">        list.add(&quot;张敏&quot;);  </span><br><span class="line">        list.add(&quot;张无忌&quot;);  </span><br><span class="line">  </span><br><span class="line">        list.stream().limit(3).forEach(System.out::println);  </span><br><span class="line">        list.stream().skip(3).forEach(System.out::println);  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        list.stream().skip(2).limit(2).forEach(System.out::println);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240722151904.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.stream.Stream;  </span><br><span class="line">  </span><br><span class="line">public class _4 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; list=new ArrayList&lt;String&gt;();  </span><br><span class="line">        list.add(&quot;林青霞&quot;);  </span><br><span class="line">        list.add(&quot;张曼玉&quot;);  </span><br><span class="line">        list.add(&quot;王祖贤&quot;);  </span><br><span class="line">        list.add(&quot;柳岩&quot;);  </span><br><span class="line">        list.add(&quot;张敏&quot;);  </span><br><span class="line">        list.add(&quot;张无忌&quot;);  </span><br><span class="line">  </span><br><span class="line">        Stream&lt;String&gt; s1=list.stream().limit(4);  </span><br><span class="line">        Stream&lt;String&gt; s2=list.stream().skip(2);  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">     //   Stream.concat(s1,s2).forEach(System.out::println);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        Stream.concat(s1,s2).distinct().forEach(System.out::println);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240722153022.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class _5 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; list=new ArrayList&lt;String&gt;();  </span><br><span class="line">        list.add(&quot;林青霞&quot;);  </span><br><span class="line">        list.add(&quot;张曼玉&quot;);  </span><br><span class="line">        list.add(&quot;王祖贤&quot;);  </span><br><span class="line">        list.add(&quot;柳岩&quot;);  </span><br><span class="line">        list.add(&quot;张敏&quot;);  </span><br><span class="line">        list.add(&quot;张无忌&quot;);  </span><br><span class="line">  </span><br><span class="line">        list.stream().sorted().forEach(System.out::println);  </span><br><span class="line">        list.stream().sorted((s1,s2)-&gt;s1.length()-s2.length()).forEach(System.out::println);  </span><br><span class="line">  </span><br><span class="line">        //list.stream().sorted((s1,s2)-&gt;s1.length()-s2.length()).forEach(System.out::println);  </span><br><span class="line">        list.stream().sorted((s1,s2)-&gt;&#123;  </span><br><span class="line">            int num=s1.length()-s2.length();  </span><br><span class="line">            int num2=num==0?s1.compareTo(s2):num;  </span><br><span class="line">            return num2;  </span><br><span class="line">        &#125;).forEach(System.out::println);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240722161122.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class _6 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; list=new ArrayList&lt;String&gt;();  </span><br><span class="line">  </span><br><span class="line">        list.add(&quot;10&quot;);  </span><br><span class="line">        list.add(&quot;20&quot;);  </span><br><span class="line">        list.add(&quot;30&quot;);  </span><br><span class="line">        list.add(&quot;40&quot;);  </span><br><span class="line">        list.add(&quot;50&quot;);  </span><br><span class="line">        list.add(&quot;60&quot;);  </span><br><span class="line">        list.stream().map(s-&gt;Integer.parseInt(s)).forEach(System.out::println);  </span><br><span class="line">        list.stream().map(Integer::parseInt).forEach(System.out::println);  </span><br><span class="line">        list.stream().mapToInt(Integer::parseInt).forEach(System.out::println);  </span><br><span class="line">        int result=list.stream().mapToInt(Integer::parseInt).sum();  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Stream流的常见终结操作方法"><a href="#Stream流的常见终结操作方法" class="headerlink" title="Stream流的常见终结操作方法"></a>Stream流的常见终结操作方法</h3><p>![[Pasted image 20240722161910.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line">public class _7 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; list=new ArrayList&lt;String&gt;();  </span><br><span class="line">        list.add(&quot;林青霞&quot;);  </span><br><span class="line">        list.add(&quot;张曼玉&quot;);  </span><br><span class="line">        list.add(&quot;王祖贤&quot;);  </span><br><span class="line">        list.add(&quot;柳岩&quot;);  </span><br><span class="line">        list.add(&quot;张敏&quot;);  </span><br><span class="line">        list.add(&quot;张无忌&quot;);  </span><br><span class="line">        list.stream().forEach(System.out::println);  </span><br><span class="line">        long count=list.stream().filter(s-&gt;s.startsWith(&quot;张&quot;)).count();  </span><br><span class="line">        System.out.println(count);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![[Pasted image 20240722165407.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.stream.Stream;  </span><br><span class="line">  </span><br><span class="line">public class StreamTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ArrayList&lt;String&gt; manList=new ArrayList&lt;String&gt;();  </span><br><span class="line">        manList.add(&quot;周润发&quot;);  </span><br><span class="line">        manList.add(&quot;成龙&quot;);  </span><br><span class="line">        manList.add(&quot;刘德华&quot;);  </span><br><span class="line">        manList.add(&quot;吴京&quot;);  </span><br><span class="line">        manList.add(&quot;周星驰&quot;);  </span><br><span class="line">        ArrayList&lt;String&gt; womanList=new ArrayList&lt;String&gt;();  </span><br><span class="line">        womanList.add(&quot;林心如&quot;);  </span><br><span class="line">        womanList.add(&quot;张曼玉&quot;);  </span><br><span class="line">        womanList.add(&quot;林青霞&quot;);  </span><br><span class="line">        womanList.add(&quot;柳岩&quot;);  </span><br><span class="line">        womanList.add(&quot;林志玲&quot;);  </span><br><span class="line">        womanList.add(&quot;王祖贤&quot;);  </span><br><span class="line">  </span><br><span class="line">//  </span><br><span class="line">//        Stream&lt;String&gt;manStream=manList.stream().filter(s-&gt;s.length()==3).limit(3);  </span><br><span class="line">//        Stream&lt;String&gt; womanStream=womanList.stream().filter(s-&gt;s.startsWith(&quot;林&quot;)).skip(1);  </span><br><span class="line">//        Stream&lt;String&gt;stream=Stream.concat(manStream,womanStream);  </span><br><span class="line">//  </span><br><span class="line">        Stream.concat(manList.stream().filter(s-&gt;s.length()==3).limit(3),  </span><br><span class="line">                womanList.stream().filter(s -&gt; s.startsWith(&quot;林&quot;)).skip(1)).map(Actor::new).  </span><br><span class="line">                        forEach(p-&gt; System.out.println(p.getName()));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Stream流的收集操作"><a href="#Stream流的收集操作" class="headerlink" title="Stream流的收集操作"></a>Stream流的收集操作</h3><p>![[Pasted image 20240722170549.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;  </span><br><span class="line">import java.util.stream.Collectors;  </span><br><span class="line">import java.util.stream.Stream;  </span><br><span class="line">  </span><br><span class="line">public class _8 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        List&lt;String&gt; list=new ArrayList&lt;String&gt;();  </span><br><span class="line">        list.add(&quot;林青霞&quot;);  </span><br><span class="line">        list.add(&quot;张曼玉&quot;);  </span><br><span class="line">        list.add(&quot;王祖贤&quot;);  </span><br><span class="line">        list.add(&quot;柳岩&quot;);  </span><br><span class="line">        Stream&lt;String&gt; listStream=list.stream().filter(s-&gt;s.length()==3);  </span><br><span class="line">        List&lt;String&gt; names=listStream.collect(Collectors.toList());  </span><br><span class="line">        for(String name:names)&#123;  </span><br><span class="line">            System.out.println(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Set&lt;Integer&gt; set=new HashSet&lt;Integer&gt;();  </span><br><span class="line">        set.add(10);  </span><br><span class="line">        set.add(20);  </span><br><span class="line">        set.add(30);  </span><br><span class="line">        set.add(33);  </span><br><span class="line">        set.add(35);  </span><br><span class="line">        Stream&lt;Integer&gt; setStream=set.stream().filter(age-&gt;age&gt;25);  </span><br><span class="line">        Set&lt;Integer&gt; ages=setStream.collect(Collectors.toSet());  </span><br><span class="line">        for(Integer age:ages)&#123;  </span><br><span class="line">            System.out.println(age);  </span><br><span class="line">        &#125;  </span><br><span class="line">        String[] strArray=&#123;&quot;林青霞，30&quot;,&quot;张曼玉，35&quot;,&quot;王祖贤，33&quot;,&quot;柳岩,25&quot;&#125;;  </span><br><span class="line">        Stream&lt;String&gt; arrayStream=Stream.of(strArray).filter(s-&gt;Integer.parseInt(s.split(&quot;,&quot;)[1])&gt;28);  </span><br><span class="line">        Map&lt;String, Integer&gt; map = arrayStream.collect(Collectors.toMap(s -&gt; s.split(&quot;,&quot;)[0], s -&gt; Integer.parseInt(s.split(&quot;,&quot;)[1])));  </span><br><span class="line">  </span><br><span class="line">        Set&lt;String&gt; keySet=map.keySet();  </span><br><span class="line">        for(String key: keySet)&#123;  </span><br><span class="line">            Integer value=map.get(key);  </span><br><span class="line">            System.out.println(key+&quot;,&quot;+value);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，JVM将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化</p><p>类的加载</p><p>就是指将Class文件读入内存，并为之创建一个java.lang.Class对象</p><p>任何类被使用时，系统都会为之建立一个java.lang.Class对象</p><p>类的连接</p><p>验证阶段:用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</p><p>准备阶段:负责为类的类变量分配内存，并设置默认初始化值</p><p>解析阶段:将类的二进制数据中的符号引用替换为直接引用</p><p>类的初始化</p><p>在该阶段，主要就是对类变量进行初始化</p><p>类的初始化步骤</p><p>假如类还未被加载和连接，则程序先加载并连接该类</p><p>假如该类的直接父类还未被初始化，则先初始化其直接父类</p><p>假如类中有初始化语句，则系统依次执行这些初始化语句</p><p>注意:在执行第2个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤1-3</p><p>类的初始化时机:</p><p>创建类的实例</p><p>调用类的类方法</p><p>访问类或者接口的类变量，或者为该类变量赋值</p><p>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</p><p>初始化某个类的子类</p><p>直接使用java.exe命令来运行某个主类</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>![[Pasted image 20240722174736.png]]![[Pasted image 20240722174804.png]]![[Pasted image 20240722174826.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class _1 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ClassLoader c=ClassLoader.getSystemClassLoader();  </span><br><span class="line">        System.out.println(c);  </span><br><span class="line">        ClassLoader c2=c.getParent();  </span><br><span class="line">        System.out.println(c2);  </span><br><span class="line">        ClassLoader c3=c2.getParent();  </span><br><span class="line">        System.out.println(c3);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h2><p>![[Pasted image 20240722203041.png]]<br>![[Pasted image 20240722203030.png]]<br>获取Class类的对象<br>![[Pasted image 20240722203721.png]]<br>![[Pasted image 20240722203642.png]]</p><h3 id="反射获取构造方法并使用"><a href="#反射获取构造方法并使用" class="headerlink" title="反射获取构造方法并使用"></a>反射获取构造方法并使用</h3><p>![[Pasted image 20240722205300.png]]![[Pasted image 20240722205938.png]] ![[Pasted image 20240722205915.png]]![[Pasted image 20240722210258.png]]</p><h3 id="反射获取成员变量并使用"><a href="#反射获取成员变量并使用" class="headerlink" title="反射获取成员变量并使用"></a>反射获取成员变量并使用</h3><p>![[Pasted image 20240722211011.png]]<br>![[Pasted image 20240722211003.png]]![[Pasted image 20240722211733.png]]<br>![[Pasted image 20240722211711.png]]![[Pasted image 20240722212455.png]]![[Pasted image 20240722212749.png]]![[Pasted image 20240722212735.png]]![[Pasted image 20240722212939.png]]![[Pasted image 20240722212911.png]]</p><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>![[Pasted image 20240722213135.png]]![[Pasted image 20240722213149.png]]![[Pasted image 20240722213629.png]]</p><h2 id="模块服务使用"><a href="#模块服务使用" class="headerlink" title="模块服务使用"></a>模块服务使用</h2><p>![[Pasted image 20240722214027.png]]</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SE开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Web入门教程</title>
      <link href="/posts/71b84419.html"/>
      <url>/posts/71b84419.html</url>
      
        <content type="html"><![CDATA[<h1 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h1><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><p>Junit单元测试的相关内容，具体为：</p><ul><li>测试分类:</li></ul><ol><li>黑盒测试:不需要写代码，给输入值，看程序是否能够输出期望的值。</li><li>白盒测试:需要写代码的。关注程序具体的执行流程。</li></ol><ul><li>JUnit使用:白盒测试</li><li>步骤: 1.定义一个测试类(测试用例) 建议: <pre><code>  测试类名:被测试的类名TestCalculatorTest  包名: xxx. xxx. xx. test cn. itcast. test </code></pre></li><li>2.定义测试方法:可以独立运行 建议: <pre><code>  方法名:test测试的方法名 testAdd()   返回值:void 参数列表:空参 </code></pre></li><li>3.给方法加@Test </li><li>4.导入junit依赖环境 *判定结果: <pre><code>  红色:失败   绿色:成功  </code></pre></li><li>一般我们会使用断言操作来处理结果 Assert. assertEquals(3, result);</li><li>补充;<pre><code>  @Before:   修饰的方法会在测试方法之前被自动执行  @After:  修饰的方法会在测试方法执行之后被自动执行</code></pre><h2 id="反射：-框架设计的灵魂"><a href="#反射：-框架设计的灵魂" class="headerlink" title="反射： 框架设计的灵魂"></a>反射： 框架设计的灵魂</h2></li><li>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</li><li>反射：将类的各个组成部分封装为其他对象，这就是反射机制<pre><code>  好处  1.可以在程序运行过程中，操作这些对象  2.可以解耦，提高程序额度可扩展性</code></pre></li></ul><p>![[Pasted image 20240723090524.png]]</p><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><p>  获取Class对象的方式有三种：</p><ol><li>Class.forName(“全类名”): 将字节码文件加载进内存，返回Class对象。</li></ol><ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类。</li></ul><ol><li>类名.class: 通过类的属性class获取。</li></ol><ul><li>多用于参数的传递。</li></ul><ol><li>对象.getclass(): getClass()方法在Object类中定义着。<ul><li>==多用于对象的获取字节码的方式。==<br>![[Pasted image 20240723093608.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package reflect;  </span><br><span class="line">  </span><br><span class="line">public class Person&#123;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private int age;  </span><br><span class="line">  </span><br><span class="line">    public Person() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Person(String name, int age) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getAge() &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAge(int age) &#123;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return &quot;Person&#123;&quot; +  </span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, age=&quot; + age +  </span><br><span class="line">                &#x27;&#125;&#x27;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class reflectDemo &#123;  </span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException &#123;  </span><br><span class="line">        Class clas1=Class.forName(&quot;reflect.Person&quot;);  </span><br><span class="line">        System.out.println(clas1);  </span><br><span class="line">  </span><br><span class="line">        Class cls2= Person.class;  </span><br><span class="line">        System.out.println(cls2);  </span><br><span class="line">  </span><br><span class="line">        Person p=new Person();  </span><br><span class="line">        Class cls3=p.getClass();  </span><br><span class="line">        System.out.println(cls3);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>结论：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。 </li></ul></li></ol><h3 id="Class对象功能"><a href="#Class对象功能" class="headerlink" title="Class对象功能"></a>Class对象功能</h3><p>![[Pasted image 20240723095125.png]]</p><p>`Field: 成员变量</p><ul><li>操作:</li></ul><ol><li>设置值<ul><li>void set(Object obj, Object value)</li></ul></li><li>获取值<ul><li>get(object obj)</li></ul></li><li>忽略访问权限修饰符的安全检查<ul><li>setAccessible(true):暴力反射</li></ul></li></ol><ul><li><ul><li>Constructor:构造方法<br>*创建对象:</li></ul></li><li><p>T newInstance(Object… initargs)</p></li><li><p>如果使用空参数构造方法创建对象,操作可以简化:Class对象的newInstance方法</p></li><li><p>Method:方法对象</p></li></ul><p>*执行方法:</p><ul><li>Object invoke(object obj, Object… args)</li></ul><p>*获取方法名称:</p><ul><li>String getName:获取方法名`<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package reflect;  </span><br><span class="line">  </span><br><span class="line">public class Person&#123;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private int age;  </span><br><span class="line">    public String a;  </span><br><span class="line">    public String b;  </span><br><span class="line">    public String c;  </span><br><span class="line">    public String d;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    public Person() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Person(String name, int age) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getAge() &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAge(int age) &#123;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return &quot;Person&#123;&quot; +  </span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, age=&quot; + age +  </span><br><span class="line">                &quot;, a=&#x27;&quot; + a + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, b=&#x27;&quot; + b + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, c=&#x27;&quot; + c + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, d=&#x27;&quot; + d + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &#x27;&#125;&#x27;;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void eat()&#123;  </span><br><span class="line">        System.out.println(&quot;eat...&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void eat(String food)&#123;  </span><br><span class="line">        System.out.println(&quot;eat...&quot;+food);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;  </span><br><span class="line">import java.io.OutputStream;  </span><br><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">import java.lang.reflect.Method;  </span><br><span class="line">import java.sql.SQLOutput;  </span><br><span class="line">  </span><br><span class="line">public class ReflectDemo2 &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        //获取Person的Class对象  </span><br><span class="line">        Class presonClass= Person.class;  </span><br><span class="line">        //public的获取方法  </span><br><span class="line">        Field[] fields = presonClass.getFields();  </span><br><span class="line">        for(Field filed:fields)&#123;  </span><br><span class="line">            System.out.println(filed);  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        Field a = presonClass.getField(&quot;a&quot;);  </span><br><span class="line">        //获取成员变量a的值  </span><br><span class="line">        Person p = new Person();  </span><br><span class="line">        //在get内，需要传递一个对象，因为本来就是反射  </span><br><span class="line">        Object value = a.get(p);  </span><br><span class="line">        System.out.println(value);  </span><br><span class="line">        //设置a的值  </span><br><span class="line">        a.set(p,&quot;张三&quot;);  </span><br><span class="line">        System.out.println(p);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;========&quot;);  </span><br><span class="line">        //获取所有成员的变量，不考虑修饰符  </span><br><span class="line">        Field[] declaredFields = presonClass.getDeclaredFields();  </span><br><span class="line">        for(Field d:declaredFields)&#123;  </span><br><span class="line">            System.out.println(d);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Field d = presonClass.getDeclaredField(&quot;d&quot;);  </span><br><span class="line">        //忽略访问权限修饰符的安全检查  </span><br><span class="line">        //暴力反射  </span><br><span class="line">        d.setAccessible(true);  </span><br><span class="line">        //已经在前面提前创造好了对象p  </span><br><span class="line">        Object object = d.get(p);  </span><br><span class="line">        System.out.println(object);  </span><br><span class="line">        d.set(p,&quot;wozhidaol&quot;);  </span><br><span class="line">        System.out.println(p);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;========&quot;);  </span><br><span class="line">        Constructor constructor = presonClass.getConstructor(String.class, int.class);  </span><br><span class="line">        Object person = constructor.newInstance(&quot;张三&quot;, 23);  </span><br><span class="line">        System.out.println(person);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">        Constructor constructor1 = presonClass.getConstructor();  </span><br><span class="line">        Object person1 = constructor1.newInstance();  </span><br><span class="line">        System.out.println(person1);  </span><br><span class="line">        //也可以采用下面的方法进行，更加便捷  </span><br><span class="line">  </span><br><span class="line">        Object o = presonClass.newInstance();  </span><br><span class="line">        System.out.println(o);  </span><br><span class="line">  </span><br><span class="line">        //成员方法  </span><br><span class="line">        Method eat = presonClass.getMethod(&quot;eat&quot;);  </span><br><span class="line">        //已经在前面提前创造好了对象p  </span><br><span class="line">        eat.invoke(p);  </span><br><span class="line">  </span><br><span class="line">        Method eat1 = presonClass.getMethod(&quot;eat&quot;, String.class);  </span><br><span class="line">        eat1.invoke(p,&quot;饭&quot;);  </span><br><span class="line">        System.out.println(&quot;--------&quot;);  </span><br><span class="line">  </span><br><span class="line">        //获取所有public修饰的方法  </span><br><span class="line">        Method[] methods = presonClass.getMethods();  </span><br><span class="line">        for(Method mothod :methods)&#123;  </span><br><span class="line">            System.out.println(mothod);  </span><br><span class="line">            String name=mothod.getName();  </span><br><span class="line">            System.out.println(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">        //获取类名  </span><br><span class="line">        String classname  = presonClass.getName();  </span><br><span class="line">        System.out.println(classname);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="成员方法和构造方法的不同"><a href="#成员方法和构造方法的不同" class="headerlink" title="成员方法和构造方法的不同"></a>成员方法和构造方法的不同</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class ExampleClass &#123;</span><br><span class="line"></span><br><span class="line">    // 成员变量</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    // 构造方法</span><br><span class="line">    public ExampleClass(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        System.out.println(&quot;构造方法被调用，对象被创建，name 被设置为: &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 成员方法</span><br><span class="line">    public void printName() &#123;</span><br><span class="line">        System.out.println(&quot;成员方法被调用，打印name: &quot; + this.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 主方法，用于演示</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 使用构造方法创建对象</span><br><span class="line">        ExampleClass example = new ExampleClass(&quot;示例对象&quot;);</span><br><span class="line"></span><br><span class="line">        // 调用成员方法</span><br><span class="line">        example.printName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>构造方法与成员方法的区别：</p><ol><li><p>调用时机：</p><ul><li>构造方法在创建对象时被调用，且仅被调用一次。</li><li>成员方法在对象创建后可以被多次调用。</li></ul></li><li><p>目的：</p><ul><li>构造方法用于初始化对象的状态，比如给成员变量赋值。</li><li>成员方法用于定义对象的行为，可以执行各种操作，不一定与对象的初始化有关。</li></ul></li><li><p>返回值：</p><ul><li>构造方法没有返回值，也不需要声明返回类型，即使是void也不需要。</li><li>成员方法可以返回值，也可以是void，表示没有返回值。</li></ul></li><li><p>名称：</p><ul><li>构造方法的名称必须与类名相同。</li><li>成员方法的名称可以是任意的，通常应该反映该方法的功能。</li></ul></li><li><p>显式调用：</p><ul><li>构造方法在创建对象时隐式调用，例如 <code>new ExampleClass(&quot;示例对象&quot;)</code>。</li><li>成员方法需要使用对象实例显式调用，例如 <code>example.printName()</code>。<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3>需求：写一个“框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法<br>实现：<br>1、配置文件<br>2、反射<br>步骤：<br>1、将需要创建的对象的全类名和需要执行的方法定义在配置文件中<br>2、在程序中加载读取配置文件<br>3、使用反射技术来加载类文件进内存<br>4、创建对象<br>5、执行方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package domain;  </span><br><span class="line">  </span><br><span class="line">public class Person&#123;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private int age;  </span><br><span class="line">    public String a;  </span><br><span class="line">    public String b;  </span><br><span class="line">    public String c;  </span><br><span class="line">    public String d;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    public Person() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Person(String name, int age) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getAge() &#123;  </span><br><span class="line">        return age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAge(int age) &#123;  </span><br><span class="line">        this.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return &quot;Person&#123;&quot; +  </span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, age=&quot; + age +  </span><br><span class="line">                &quot;, a=&#x27;&quot; + a + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, b=&#x27;&quot; + b + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, c=&#x27;&quot; + c + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, d=&#x27;&quot; + d + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &#x27;&#125;&#x27;;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void eat()&#123;  </span><br><span class="line">        System.out.println(&quot;eat...&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void eat(String food)&#123;  </span><br><span class="line">        System.out.println(&quot;eat...&quot;+food);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.InputStream;  </span><br><span class="line">import java.lang.reflect.Method;  </span><br><span class="line">import java.util.Properties;  </span><br><span class="line">  </span><br><span class="line">public class ReflectTest &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">         //1加载配置文件  </span><br><span class="line">        //创建Properties对象  </span><br><span class="line">        Properties pro=new Properties();  </span><br><span class="line">        //可以将以Properties结尾的文件，以load方法读取到内存里面形成集合  </span><br><span class="line">        //加载配置文件，转换为一个集合  </span><br><span class="line">        //获取class目录下的配置文件  </span><br><span class="line">        ClassLoader classLoader = ReflectTest.class.getClassLoader();  </span><br><span class="line">        //我自己觉得，应该是通过这个方法，返回到ReflectTest类的最大类,然后再在最大的类里面寻找所需要的文件  </span><br><span class="line">        InputStream is=classLoader.getResourceAsStream(&quot;pro.properties&quot;);  </span><br><span class="line">        pro.load(is);  </span><br><span class="line">        //获取配置文件中定义的数据  </span><br><span class="line">        String className=pro.getProperty(&quot;className&quot;);  </span><br><span class="line">        String methodName = pro.getProperty(&quot;methodName&quot;);  </span><br><span class="line">  </span><br><span class="line">        //加载该类进内存  </span><br><span class="line">        Class cls=Class.forName(className);  </span><br><span class="line">        //创建对象  </span><br><span class="line">        Object obj=cls.newInstance();  </span><br><span class="line">        //获取方法对象  </span><br><span class="line">        Method mothod=cls.getMethod(methodName);  </span><br><span class="line">        //执行方法  </span><br><span class="line">        mothod.invoke(obj);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li>概念:说明程序的。给计算机看的</li></ul></li></ul></li></ol><ul><li><p>注释:用文字描述程序的。给程序员看的</p></li><li><p>定义:注解(Annotation)，也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的面前，用来对这些元素进行说明，注释。</p></li><li><p>概念描述:</p><ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解:@注解名称</li></ul></li><li><p>作用分类:</p><ul><li>编写文档:通过代码里标识的注解生成文档【生成文档doc文档】</li><li>代码分析:通过代码里标识的注解对代码进行分析【使用反射】</li><li>编译检查:通过代码里标识的注解让编译器能够实现基本的编译检查【override】</li></ul></li><li>JDK中预定义的一些注解<pre><code>  @Override:检测被该注解标注的方法是否是继承父类  @Deprecated:该注解标注的内容，表示已经过时  @SuppreWarnings：压制警告   一般传递参数all @SuppressWarnings(&quot;all&quot;)      </code></pre></li><li><p>自定义注解</p><pre><code>  格式：      元注解      public @interface 注解名称  本质：注解本质上就是一个接口，该接口默认继承Annotation接口  public interface Myanno extends java.lang.annotation.Annotation&#123;&#125;  属性：接口中可以定义成员方法（主要是它本身就是一个接口）  属性：接口中的抽象方法      1、属性的返回值类型有下列取值      基本数据类型      String      枚举      注解      以上类型的数组      2、定义了属性，在使用时需要给属性赋值          1、如果定义属性是，使用default关键字给属性默认初始化值，则使用注释时，可以不进行属性的赋值。          2、如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可          3、数组赋值时，值使用&#123;&#125;包裹。如果数组中只有一个值，则&#123;&#125;省略  元注解：用于描述注解的注解  @Target：描述注解能够作用的位置      @ElementType取值：      TYPE:可以作用于类上      METHOD:可以作用于方法上      FIELD:可以作用于成员变量上  @Retention:描述注解被保留的阶段      @Retention(RetentionPolicy.RUNTIME):当前被描述的注解，会保留到class字节码文件中，并被JVM读取到  @Documented:描述注解是否被抽取到api文档中  @Inherited:描述注解是否被子类继承  ![[Pasted image 20240724160752.png]]</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@MyAnno(value=12,show2 = &quot;dsd&quot;, per=Person.p1,anno2 = @MyAnno2,strs =&#123;&quot;abc&quot;,&quot;bbb&quot;&#125;)  </span><br><span class="line">@MyAnno3  </span><br><span class="line">public class Worker &#123;  </span><br><span class="line">    @MyAnno3  </span><br><span class="line">    public String name=&quot;aaa&quot;;  </span><br><span class="line">    @MyAnno3  </span><br><span class="line">    public void show()&#123;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在程序使用(解析)注释：获取注解中定义的属性值</p><pre><code>  1、获取注解定义的位置的对象(Class,Morhod,Field)  2、获取指定的注解  getAnnmtation(Class)  3、调用注解中的抽象方法获取配置的属性值</code></pre></li></ul><p>![[Pasted image 20240724172342.png]]![[Pasted image 20240724172410.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.annotation.ElementType;  </span><br><span class="line">import java.lang.annotation.Retention;  </span><br><span class="line">import java.lang.annotation.RetentionPolicy;  </span><br><span class="line">import java.lang.annotation.Target;  </span><br><span class="line">  </span><br><span class="line">@Target(&#123;ElementType.TYPE&#125;)  </span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)  </span><br><span class="line">public @interface Pro &#123;  </span><br><span class="line">    String className();  </span><br><span class="line">    String methodName();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package annotation;  </span><br><span class="line">  </span><br><span class="line">public class Demo1 &#123;  </span><br><span class="line">    public void show()&#123;  </span><br><span class="line">        System.out.println(&quot;demo1...show...&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Pro(className =&quot;annotation.Demo1&quot;,methodName = &quot;show&quot;)  </span><br><span class="line">public class ReflectTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Class&lt;ReflectTest&gt; reflectTestClass = ReflectTest.class;  </span><br><span class="line">        Pro an=reflectTestClass.getAnnotation(Pro.class);  </span><br><span class="line">        String className=an.className();  </span><br><span class="line">        String methodName=an.methodName();  </span><br><span class="line">        System.out.println(className);  </span><br><span class="line">        System.out.println(methodName);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>字节码文件对象:字节码文件对象（Bytecode File Object）通常指的是一种文件，<br>        它包含了程序的字节码，这种字节码是可以在特定的虚拟机（VM）或解释器上执行的。<br>        以下是一些具体的例子：  </p><pre><code>    Java中的.class文件：      在Java中，字节码文件对象是.class文件，它包含了Java程序的编译后的字节码。         JVM通过类加载器（ClassLoader）加载这些.class文件，并执行其中的字节码。  </code></pre><p>![[Pasted image 20240724210307.png]]<br>![[Pasted image 20240724210246.png]]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package annotation.demo;  </span><br><span class="line">  </span><br><span class="line">import java.lang.annotation.ElementType;  </span><br><span class="line">import java.lang.annotation.Retention;  </span><br><span class="line">import java.lang.annotation.RetentionPolicy;  </span><br><span class="line">import java.lang.annotation.Target;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Retention(RetentionPolicy.RUNTIME)  </span><br><span class="line">    @Target(ElementType.METHOD)  </span><br><span class="line">    public @interface Check &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package annotation.demo;  </span><br><span class="line">  </span><br><span class="line">public class Calculator &#123;  </span><br><span class="line">    @Check  </span><br><span class="line">    public void add()&#123;  </span><br><span class="line">        System.out.println(&quot;1+0=&quot;+(1+0));  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Check  </span><br><span class="line">    public void sub()&#123;  </span><br><span class="line">        System.out.println(&quot;1-0=&quot;+(1-0));  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Check  </span><br><span class="line">    public void mul()&#123;  </span><br><span class="line">        System.out.println(&quot;1*0=&quot;+(1*0));  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Check  </span><br><span class="line">    public void div()&#123;  </span><br><span class="line">        System.out.println(&quot;1/0=&quot;+(1/0));  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void show()&#123;  </span><br><span class="line">        System.out.println(&quot;永无bug....&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package annotation.demo;  </span><br><span class="line">  </span><br><span class="line">import java.io.BufferedWriter;  </span><br><span class="line">import java.io.FileWriter;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.lang.reflect.InvocationTargetException;  </span><br><span class="line">import java.lang.reflect.Method;  </span><br><span class="line">  </span><br><span class="line">public class TestCheck &#123;  </span><br><span class="line">    public static void main(String[] args) throws InvocationTargetException, IllegalAccessException, IOException &#123;  </span><br><span class="line">        //创建计算机对象  </span><br><span class="line">        Calculator c = new Calculator();  </span><br><span class="line">        //获取字节码文件对象  </span><br><span class="line">        /*  </span><br><span class="line">        字节码文件对象:字节码文件对象（Bytecode File Object）通常指的是一种文件，  </span><br><span class="line">        它包含了程序的字节码，这种字节码是可以在特定的虚拟机（VM）或解释器上执行的。  </span><br><span class="line">        以下是一些具体的例子：  </span><br><span class="line">  </span><br><span class="line">        Java中的.class文件：  </span><br><span class="line">        在Java中，字节码文件对象是.class文件，它包含了Java程序的编译后的字节码。  </span><br><span class="line">           JVM通过类加载器（ClassLoader）加载这些.class文件，并执行其中的字节码。  </span><br><span class="line">  </span><br><span class="line">         */        Class cls = c.getClass();  </span><br><span class="line">        //获取所有方法  </span><br><span class="line">  </span><br><span class="line">        int number=0;  </span><br><span class="line">        BufferedWriter bw=new BufferedWriter(new FileWriter(&quot;bug.txt&quot;));  </span><br><span class="line">  </span><br><span class="line">        Method[] methods = cls.getMethods();  </span><br><span class="line">        for (Method method : methods) &#123;  </span><br><span class="line">            //判断方法上是否有Check注解  </span><br><span class="line">            if(method.isAnnotationPresent(Check.class)) &#123;  </span><br><span class="line">                try &#123;  </span><br><span class="line">                    method.invoke(c);  </span><br><span class="line">                &#125; catch (Exception e) &#123;  </span><br><span class="line">                    number++;  </span><br><span class="line">                    bw.write(method.getName() + &quot;方法出异常了&quot;);  </span><br><span class="line">                    bw.newLine();  </span><br><span class="line">                    bw.write(&quot;异常的名称&quot; + e.getCause());  </span><br><span class="line">                    bw.newLine();  </span><br><span class="line">                    bw.write(&quot;异常原因：&quot;);  </span><br><span class="line">                    bw.newLine();  </span><br><span class="line">                    bw.write(&quot;--------&quot;);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        bw.flush();  </span><br><span class="line">        bw.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="数据库的基本概念-day-1"><a href="#数据库的基本概念-day-1" class="headerlink" title="数据库的基本概念(day 1)"></a>数据库的基本概念(day 1)</h2><p>1、数据库的英文单词：DataBase 简称：DB<br>2、什么是数据库<br>        用于存储和管理数据的仓库<br>3、数据库的特点：<br>        1、持久化储存数据的。其实数据库就是一个文件系统<br>        2、方便存储和管理数据<br>        3、使用了统一的方式操作数据库—-SQL<br>数据库 ![[Pasted image 20240725080251.png]]<br>![[Pasted image 20240725075829.png]]</p><h2 id="MySQl数据库软件"><a href="#MySQl数据库软件" class="headerlink" title="MySQl数据库软件"></a>MySQl数据库软件</h2><p>1.安装</p><p>*参见《MySQL基础.pdf》</p><p>2.卸载</p><p>1.去mysql的安装目录找到my.ini文件</p><p>*复制datadir=“C://ProgramData/MySQL/MySQL Server 5.5/Data/”</p><p>2.卸载MySQL</p><p>3.删除C://ProgramData目录下的MySQL文件夹。</p><p>3.配置</p><p>*MySQL服务启动</p><p>1.手动。</p><p>2.cmd-&gt; services.msc 打开服务的窗口</p><p>3.使用管理员打开cmd</p><ul><li><p>net start mysql ：启动mysql的服务</p></li><li><p>net stop mysql：关闭mysql服务<br>MySQL登录<br>   1、mysql -uroot -p密码<br>   2、mysql -hip -uroot -p连接目标的密码<br>   3、mysql —host=ip —user=root —password=连接目标的密码<br>MySQL退出<br>  1、exit<br>   2、quit</p></li></ul><p>MySQL目录结构<br>     1、MySQL安装目录<br>         配置文件 my.ini<br>    2、MySQL数据目录<br>        数据库：文件夹<br>        表：文件<br>        数据：文件里面的数据</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="1-什么是SQL？"><a href="#1-什么是SQL？" class="headerlink" title="1.什么是SQL？"></a>1.什么是SQL？</h3><p>Structured Query Language：结构化查询语言</p><p>其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p><h3 id="2、SQL通用语言"><a href="#2、SQL通用语言" class="headerlink" title="2、SQL通用语言"></a>2、SQL通用语言</h3><p>1、SQL 语句可以单行或多行书写，以分号结尾；<br>2、可使用空格和缩进来增强语句的可读性<br>3、MySQL 数据库的SQL语句不区分大小写，关键字建议使用大写<br>4、3种注释<br>        单行注释：— 注释内容 或# 注释内容（sql特有）<br>        多行注释：/<em> 注释 </em>/</p><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><p>![[Pasted image 20240725140702.png]]<br>1）DDL(Data Defintion Language) 数据定义语言<br>        用来定义数据库对象：数据库，表，列表等。关键字：create,drop,alter等<br>2）DML(Data Manipulation Language)数据操作语言<br>        用来对数据库中表的数据进行增删改。关键字：insert,delete,update等<br>3）DQL(Data Query Language)数据查询<br>        用来查询数据库中表的记录(数据)。关键字：select,where等<br>4）DCL(Data Control Language)数据控制语言(了解)<br>         用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT,REVOKE等</p><h3 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h3><h4 id="一、操作数据库-CRUD"><a href="#一、操作数据库-CRUD" class="headerlink" title="一、操作数据库:CRUD"></a>一、操作数据库:CRUD</h4><p>1.c(create):创建</p><pre><code>创建数据库:- create database 数据库名称;创建数据库，判断不存在，再创建 :- create database if not exists 数据库名称;创建数据库，并指定字符集- create database 数据库名称 character set 字符集名;</code></pre><p>练习:创建db4数据库，判断是否存在，并制定字符集为gbk</p><ul><li>create database if not exists db4 character set gbk;</li></ul><p>2.R(Retrieve):查询</p><pre><code>查询所有数据库的名称:- show databases;查询某个数据库的字符集:查询某个数据库的创建语句show create database 数据库名称;</code></pre><p>3.U(Update):修改</p><pre><code>修改数据库的字符集alter database 数据库名称 character set 字符集名称;</code></pre><p>4.D(Delete):删除</p><pre><code>删除数据库drop database 数据库名称;判断数据库存在，存在再删除drop database if exists 数据库名称;</code></pre><p>5.使用数据库</p><pre><code>查询当前正在使用的数据库名称select database();使用数据库use 数据库名称; </code></pre><h4 id="二、操作表"><a href="#二、操作表" class="headerlink" title="二、操作表"></a>二、操作表</h4><h5 id="1-c-create-创建"><a href="#1-c-create-创建" class="headerlink" title="1.c(create):创建"></a>1.c(create):创建</h5><pre><code>1.语法:create table 表名(列名1 数据类型1,列名2 数据类型2,...列名n 数据类型n);</code></pre><p><em>注意:最后一列，不需要加逗号(,)</em>数据库类型:</p><ol><li><p>int:整数类型</p></li><li><p>double:小数类型</p></li><li><p>date:日期，只包含年月日，yyyy-MM-dd</p></li><li><p>datetime:日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss</p></li><li><p>timestamp:时间错类型 包含年月日时分秒 yyyy-MM-dd HH:mm:ss</p></li><li><p>varchar:字符串</p></li><li><p>name varchar(20):姓名最大20个字符</p></li><li><p>zhangsan 8个字符 张三 2个字符<br>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line"></span><br><span class="line">id int,</span><br><span class="line"></span><br><span class="line">name varchar(32),</span><br><span class="line"></span><br><span class="line">age int ,</span><br><span class="line"></span><br><span class="line">score double(4,1),</span><br><span class="line"></span><br><span class="line">birthday date,</span><br><span class="line"></span><br><span class="line">insert_time timestamp</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><p>复制表<br>    create table   表名 like 被复制的表名；</p><div class="table-container"><table><thead><tr><th>整数类型</th><th>tinyint</th><th>很小的整数</th></tr></thead><tbody><tr><td></td><td>smallint</td><td>小的整数</td></tr><tr><td></td><td>mediumint</td><td>中等大小的整数</td></tr><tr><td></td><td>int(integer)</td><td>普通大小的整数</td></tr><tr><td>小数类型</td><td>float</td><td>单精度浮点数</td></tr><tr><td></td><td>double</td><td>双精度浮点数</td></tr><tr><td></td><td>decimal(m,d)</td><td>压缩严格的定点数</td></tr><tr><td>日期类型</td><td>year</td><td>YYYY 1901-2155</td></tr><tr><td></td><td>time</td><td>HH:MM:SS-838:59:59-838:59:59</td></tr><tr><td></td><td>date</td><td>YYYY-MM-DD 1000-01-01~9999-12-3</td></tr><tr><td></td><td>datetime</td><td>YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~9999-12-31 23:59:59</td></tr><tr><td></td><td>timestamp</td><td>YYYY-MM-DD HH:MM:SS 1970,01 00:00:01 UTC-2038-01-19 03:14:07UTC</td></tr><tr><td>字符串</td><td>CHAR(M)</td><td>M为0-255之间的整数</td></tr><tr><td></td><td>VARCHAR(M)</td><td>M为0-65535之间的整数</td></tr><tr><td>BLOB[]</td><td>TINYBLOB</td><td>允许长度0-255字节</td></tr><tr><td></td><td>BLOB</td><td>允许长度0-65535字节</td></tr><tr><td></td><td>MEDIUMBLOB</td><td>允许长度0-167772150字节</td></tr><tr><td></td><td>LONGBLOB</td><td>允许长度0-4294967295字节</td></tr><tr><td>CLOB</td><td>TINYTEXT</td><td>允许长度0-255字节</td></tr><tr><td></td><td>TEXT</td><td>允许长度0-65535字节</td></tr><tr><td></td><td>MEDIUMTEXT</td><td>允许长度0-167772150字节</td></tr><tr><td></td><td>LONGTEXT</td><td>允许长度0-4294967295字节</td></tr><tr><td>二进制</td><td>VARBINARY(M)</td><td>允许长度0-M 个字节的变长字节</td></tr><tr><td></td><td>BINARY(M)</td><td>允许长度0-M 个字节的定长字节</td></tr><tr><td>具体操作：</td><td>具体操作：</td><td>具体操作：</td></tr></tbody></table></div><h5 id="2-R-Retrieve-查询"><a href="#2-R-Retrieve-查询" class="headerlink" title="2. R(Retrieve):查询"></a>2. R(Retrieve):查询</h5><p>*查询某个数据库中所有的表名称</p><pre><code>*show tables;</code></pre><p>*查询表结构</p><pre><code>*desc 表名;</code></pre><h5 id="3、U-Update-修改"><a href="#3、U-Update-修改" class="headerlink" title="3、U(Update):修改"></a>3、U(Update):修改</h5><p>1.修改表名</p><pre><code>alter table 表名 rename to 新的表名;</code></pre><p>2.修改表的字符集</p><pre><code>alter table 表名 character set 字符集名称;</code></pre><p>3.添加一列</p><pre><code>alter table 表名 add 列名 数据类型;</code></pre><p>4.修改列名称 类型</p><pre><code>alter table 表名 change 列名 新列别 新数据类型;alter table 表名 modify 列名 新数据类型;</code></pre><p>5.删除列</p><pre><code>alter table 表名 drop 列名;</code></pre><h5 id="4-D-Delete-删除"><a href="#4-D-Delete-删除" class="headerlink" title="4.D(Delete):删除"></a>4.D(Delete):删除</h5><p>D(Delete):删除<br>    drop table 表名；<br>    drop table if exists 表名；</p><p>数据库工具:<br>    Navicat Premium 15（数据库可视化工具） 破解教程 <a href="https://www.cnblogs.com/marchxd/p/15580739.html">https://www.cnblogs.com/marchxd/p/15580739.html</a></p><pre><code>http://192.168.200.150/%E5%B7%A5%E5%85%B7/Navicat%20Premium%2015%EF%BC%88%E5%B0%8F%E7%BB%BF%E5%8F%B6%EF%BC%89.zip可以从项目组网盘下载（需要连内网）【Navicat最新保姆级教程，手把手教你进行基本操作，从入门到精通】 </code></pre><p><a href="https://www.bilibili.com/video/BV1Xg4y1M7wp">https://www.bilibili.com/video/BV1Xg4y1M7wp</a></p><h3 id="DML-增删改表中工具"><a href="#DML-增删改表中工具" class="headerlink" title="DML:增删改表中工具"></a>DML:增删改表中工具</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>1、添加数据：<br>语法<br>    insert into 表名（列名1，列名2，…列名n）values(值1，值2，…值n);<br>注意：<br>    1、列名要和值一一对应。<br>    2、列名要和表格里面的名字大小写一样。<br>    3、如果表名后，不定义列名，则默认给所有列添加值<br>        insert into 表名 values(值1，值2，…值n);<br>    4、出数字类型外，其他类型需要使用引号（单双都可以）引起来</p><h4 id="2、删除数据"><a href="#2、删除数据" class="headerlink" title="2、删除数据"></a>2、删除数据</h4><p>语法：<br>    delete from 表名[where 条件]<br>注意：<br>    1、如果不加条件，则删除表中所有记录。<br>    2、如果要删除所有记录<br>        1、delete from 表名；—不推荐使用，有多少条记录就会执行多少次删除操作<br>        2、TRUNCATE TABLE 表名；—推荐使用，效率更高，先删除表，然后在创建一样的表。</p><h4 id="3、修改数据："><a href="#3、修改数据：" class="headerlink" title="3、修改数据："></a>3、修改数据：</h4><p>语法：<br>    updata 表名 set 列名1=值1；列名2=值2，…[where条件]；<br>注意：<br>    1、如果不加任何条件，则会将表中所有记录全部修改</p><h3 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h3><h4 id="1、语法："><a href="#1、语法：" class="headerlink" title="1、语法："></a>1、语法：</h4><pre><code> select     字段表名from    表名列表where    条件列表group by    分组字段having    分组之后的条件order by    排序limit    分页限制</code></pre><h4 id="2、基础查询"><a href="#2、基础查询" class="headerlink" title="2、基础查询"></a>2、基础查询</h4><pre><code>1、多个字段查询    select 字段名1，字段名2,...from 表名；    注意：        如果查询所有字段，则可以使用* 来代替字段列表。2、去除重复：distinct3、计算列    一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）    ifnull（表达式1，表达式2）：null参与的运算，计算结果都为null        表达式1：哪个字段需要判断是否为null        如果该字段为null后的替换值4、起别名    as：as也可以省略</code></pre><h4 id="3-条件查询"><a href="#3-条件查询" class="headerlink" title="3.条件查询"></a>3.条件查询</h4><p>1.where子句后跟条件</p><p>2.运算符</p><pre><code>*&gt;、&lt;、&lt;=、&gt;=、＝、&lt;&gt;BETWEEN…ANDIN(集合)LIKE：模糊查询    占位符：        _：单个任意字符        %：多个任意字符IS NULLand 或&amp;&amp;or 或||not 或！</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> --查询年龄等于20岁</span><br><span class="line">SELECT * FROM student WHERE age = 20;</span><br><span class="line">--查询年龄不等于20岁</span><br><span class="line">SELECT * FROM student WHERE age != 20;</span><br><span class="line">SELECT * FROM student WHERE age &lt;&gt; 20;</span><br><span class="line">--查询年龄大于等于20小于等于30</span><br><span class="line">SELECT * FROM student WHERE age &gt;= 20 &amp;&amp; age &lt;=30;</span><br><span class="line">SELECT * FROM student WHERE age &gt;= 20 AND age &lt;=30;</span><br><span class="line">SELECT * FROM student WHERE age BETWEEN 20 AND 30;</span><br><span class="line">--查询年龄22岁，18岁，25岁的信息</span><br><span class="line">SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25</span><br><span class="line">SELECT * FROM student WHERE age IN (22,18,25);</span><br><span class="line">--查询英语成绩为null</span><br><span class="line">SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = (!=) 判断</span><br><span class="line">SELECT * FROM student WHERE english IS NULL;</span><br><span class="line">--查询英语成绩不为null</span><br><span class="line">SELECT * FROM student WHERE english IS NOT NULL;</span><br><span class="line"></span><br><span class="line">–查询姓马的有哪些？like  </span><br><span class="line">SELECT * FROM student WHERE NAME LIKE ‘马%’;  </span><br><span class="line">–查询姓名第二个字是化的人  </span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;;  </span><br><span class="line">–查询姓名是3个字的人  </span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#x27;_&#x27;;  </span><br><span class="line">–查询姓名中包含德的人  </span><br><span class="line">SELECT * FROM student WHERE NAME LIKE ‘%德%’;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h4><h5 id="1-排序查询"><a href="#1-排序查询" class="headerlink" title="1.排序查询"></a>1.排序查询</h5><p>语法:order by 子句</p><pre><code>order by 排序字段1 排序方式1, 排序字段2 排序方式2…</code></pre><p>*排序方式:</p><pre><code>ASC:升序，默认的。DESC:降序。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select*from student order by math asc;</span><br><span class="line">select*from student order by math desc;</span><br></pre></td></tr></table></figure><p>*注意:</p><pre><code>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</code></pre><h5 id="2、聚合函数：将一列数据作为一个整体，进行纵向的计算"><a href="#2、聚合函数：将一列数据作为一个整体，进行纵向的计算" class="headerlink" title="2、聚合函数：将一列数据作为一个整体，进行纵向的计算"></a>2、聚合函数：将一列数据作为一个整体，进行纵向的计算</h5><p>1、count :计算个数<br>    1、一般选择非空的列：主键<br>    2、count(* )<br>2、max:计算最大值<br>3、min：计算最小值<br>4、sum:计算和<br>5、avg：计算平均值<br>注意：聚合函数的计算，排除null值<br>    解决方案；<br>        1、选择不包含非空的列进行机选<br>        2、ifunll函数</p><h5 id="3、分组查询"><a href="#3、分组查询" class="headerlink" title="3、分组查询"></a>3、分组查询</h5><p>1、语法：group by 分组字段<br>2、注意：<br>    1、分组之后查询的字段：分组字段、聚合函数<br>    2、where和having的区别<br>        1、where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来<br>        2、where 后不可以跟聚合函数，having可以进行聚合函数的判断<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select sex,avg(math)from student group by sex;</span><br><span class="line"> select sex,avg(math),count(id) from student where math&gt;70 group by sex having count(id)&gt;2;</span><br></pre></td></tr></table></figure></p><h5 id="4、分页查询"><a href="#4、分页查询" class="headerlink" title="4、分页查询"></a>4、分页查询</h5><p>1、语法：limit开始的索引，每页查询的条数；<br>2、公式：开始的索引=（当前的页码-1）* 每页显示的条数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select*from student limit 0,3;-- 第一页</span><br><span class="line"> select*from student limit 3,3;-- 第二页</span><br><span class="line"> select*from student limit 6,3;-- 第三页</span><br></pre></td></tr></table></figure><br>3、limit 分页操作是一个MySQL“方言”</p><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><p>概念：对表中的数据进行限定，保证数据的正确性、有效性和完整性<br>分类：<br>    1、主键约束：primary key<br>    2、非空约束：not null<br>    3、唯一约束：unique<br>    4、外键约束：foreign key<br>非空约束：not null<br>    1、创建表时添加约束<br>        CREATE TABLE stu(<br>             id INT,<br>             name VARCHAR(20) NOT NULL — name 不为空<br>        );<br>    2、创建表完后，添加非空约束<br>        alter table stu modify name varchar(20) not null;<br>    3、 删除name的非空约束<br>        alter table stu modify name varchar(20);<br>唯一约束：unique，某一列的值不能重复<br>    1、注意；<br>        唯一约束可以有null值，但是只能有一条记录为null<br>    2、在创建表时，条件唯一约束<br>        create table stu(<br>            id int ,<br>            phone_number varchar(20) unique — 手机号<br>        );<br>    3、删除唯一约束<br>        alter table stu drop index phone_number;<br>    4、在表创建完后，添加唯一约束<br>        alter table stu modify phone_number varchar(20) unique ;<br>主键约束:primary key;<br>    1、注意<br>        1、含义：非空且唯一<br>        2、一张表只能有一个字段为主键<br>        3、主键就是表中记录的唯一标识<br>    2、在创建表时，添加主键约束<br>        create table stu(<br>            id int primary key ,— 给id添加主键约束<br>            name varchar(20)<br>        );<br>    3、删除主键<br>        alter table stu drop primary key;<br>    4、创建完表后，添加主键<br>        alter table stu modify id int primary key;</p><p>自动增长<br>    1.概念:如果某一列是数值类型的，使用auto_increment可以来完成值得自动增长</p><pre><code>2.在创建表时，添加主键约束，并且完成主键自增长    create table stu(        id int primary key auto_increment,–给id添加主键约束        name varchar(20)    );3.删除自动增长    ALTER TABLE stu MODIFY id INT;4.添加自动增长    ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</code></pre><p>外键约束: foreign key,让表于表产生关系，从而保证数据的正确性。</p><pre><code>1. 在创建表时，可以添加外键语法:    create table 表名(    ...     外键列    constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)    );2、 删除外键    ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table employee drop foreign key emp_dept_fk;</span><br></pre></td></tr></table></figure><pre><code>3、创建表之后，添加外键    ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table employee add constraint emp_dept_fk foreign key (dep_id) references department(id) </span><br></pre></td></tr></table></figure><pre><code>4.级联操作1.添加级联操作语法: ALTER TABLE 表名 ADD CONSTRAINT 外键名称      FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE ;2.分类:    1.级联更新:ON UPDATE CASCADE    2.级联删除:ON DELETE CASCADE</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE department(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    dep_name VARCHAR(20),   </span><br><span class="line">    dep_location VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">-- 创建员工表（id，name，age，dep_id）</span><br><span class="line">-- 多方，从表</span><br><span class="line">CREATE TABLE employee(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(20),</span><br><span class="line">age INT,</span><br><span class="line">dep_id INT, -- 外键对应主表的主键</span><br><span class="line">CONSTRAINT emp_dept_fk FOREIGN KEY (dep_id) REFERENCES department(id)</span><br><span class="line">);</span><br><span class="line">-- 确认 department 表中已经有 id 为 1 和 2 的记录</span><br><span class="line">-- 例如：</span><br><span class="line">-- INSERT INTO department (dep_name, dep_location) VALUES (&#x27;研发部&#x27;, &#x27;广州&#x27;);</span><br><span class="line">-- INSERT INTO department (dep_name, dep_location) VALUES (&#x27;销售部&#x27;, &#x27;深圳&#x27;);</span><br><span class="line"></span><br><span class="line">-- 然后插入员工记录</span><br><span class="line">-- 添加2个部门</span><br><span class="line">INSERT INTO department (id, dep_name, dep_location) VALUES (NULL, &#x27;研发部&#x27;, &#x27;广州&#x27;), (NULL, &#x27;销售部&#x27;, &#x27;深圳&#x27;);</span><br><span class="line"></span><br><span class="line">/*INSERT INTO department (id, dep_name, dep_location) VALUES (NULL, &#x27;研发部&#x27;, &#x27;广州&#x27;), (NULL, &#x27;销售部&#x27;, &#x27;深圳&#x27;);*/</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#x27;张三&#x27;, 20, 1);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#x27;李四&#x27;, 21, 1);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#x27;王五&#x27;, 20, 1);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#x27;老王&#x27;, 20, 2);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#x27;大王&#x27;, 22, 2);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#x27;小王&#x27;, 18, 2);</span><br><span class="line">-- 删除外键</span><br><span class="line">alter table employee drop foreign key emp_dept_fk;</span><br><span class="line"></span><br><span class="line">-- 添加外键，设置级联更新 </span><br><span class="line">/*alter table employee add constraint emp_dept_fk foreign key (dep_id)  references department(id) on update cascade;*/</span><br><span class="line">ALTER TABLE employee ADD CONSTRAINT emp_dept_fk FOREIGN KEY (dep_id) REFERENCES department(id) ON UPDATE CASCADE ON DELETE CASCADE;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h3><p>1.多表之间的关系<br>    1、分类<br>        1.一对一(了解):</p><pre><code>        * 如:人和身份证        * 分析:一个人只有一个身份证，一个身份证只能对应一个人    2.一对多(多对一):        * 如:部门和员工        * 分析:一个部门有多个员工，一个员工只能对应一个部门    3.多对多:        * 如:学生和课程        * 分析:一个学生可以选择很多门课程，一个课程也可以被很多学生选择2、实现关系：1、一对多（多对一)    如：部门和员工    实现方式：在多的一方建立外键，指向一的一方的主键。2、多对多：    如：学生和课程    实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键3.一对一（了解）：    如：人和身份证    实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</code></pre><p>2.数据库设计的范式<br>概念:<br>     设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边 的所有范式要求<br>    设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。<br>    目前关系数据库有六种范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF，又称完美范式)。<br>分类:</p><pre><code>1. 第一范式（1NF）：每一列都是不可分割的原子数据项2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）几个概念:     1.函数依赖：A–&gt;B，如果通过A属性(属性组）的值，可以确定唯一B属性的值。则称B依赖于A 例如：学号–&gt;姓名。 （学号，课程名称） --&gt;分数    2.完全函数依赖：A–&gt;B，如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。 例如：（学号，课程名称） --&gt;分数     3.部分函数依赖：A–&gt;B，如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。 例如：（学号，课程名称） --&gt; 姓名     4.传递函数依赖：A–&gt;B，B–&gt;C，如果通过A属性(属性组）的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C传递函数依赖于A 例如：学号–&gt;系名，系名–&gt;系主任      5.码：如果在表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码 例如：该表中码为：（学号，课程名称） 主属性：码属性组中的所有属性 *非主属性：除过码属性组的属性1. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</code></pre><h3 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h3><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="查询语法："><a href="#查询语法：" class="headerlink" title="查询语法："></a>查询语法：</h4><pre><code>select     列名列表from    表名列表where...</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 创建部门表</span><br><span class="line">CREATE TABLE dept( </span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(20)</span><br><span class="line">); </span><br><span class="line">INSERT INTO dept (NAME) VALUES (&#x27;开发部&#x27;), (&#x27;市场部&#x27;), (&#x27;财务部&#x27;);</span><br><span class="line">-- 创建员工表</span><br><span class="line">CREATE TABLE emp ( </span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(10), </span><br><span class="line">gender CHAR(1), --  性别 </span><br><span class="line">salary DOUBLE, -- 工资 </span><br><span class="line">join_date DATE, -- 入职日期 </span><br><span class="line">dept_id INT,</span><br><span class="line">FOREIGN KEY (dept_id)</span><br><span class="line">REFERENCES dept(id) -- 外键，</span><br><span class="line">-- 关联部门表（部门表的主键）</span><br><span class="line">); </span><br><span class="line">INSERT INTO emp(NAME, gender, salary, join_date, dept_id) VALUES(&#x27;孙悟空&#x27;, &#x27;男&#x27;, 7200, &#x27;2013-02-24&#x27;, 1);</span><br><span class="line">INSERT INTO emp(NAME, gender, salary, join_date, dept_id) VALUES(&#x27;猪八戒&#x27;, &#x27;男&#x27;, 3600, &#x27;2010-12-02&#x27;, 2);</span><br><span class="line">INSERT INTO emp(NAME, gender, salary, join_date, dept_id) VALUES(&#x27;唐僧&#x27;, &#x27;男&#x27;, 9000, &#x27;2008-08-08&#x27;, 2);</span><br><span class="line">INSERT INTO emp(NAME, gender, salary, join_date, dept_id) VALUES(&#x27;白骨精&#x27;, &#x27;女&#x27;, 5000, &#x27;2015-10-07&#x27;, 3);</span><br><span class="line">INSERT INTO emp(NAME, gender, salary, join_date, dept_id) VALUES(&#x27;蜘蛛精&#x27;, &#x27;女&#x27;, 4500, &#x27;2011-03-14&#x27;, 1);</span><br></pre></td></tr></table></figure><p>笛卡尔积：<br>     有两个集合A,B，取这两个集合的所有组成情况<br>     要完成多表查询，需要消除无用的数据</p><h4 id="多表查询分类："><a href="#多表查询分类：" class="headerlink" title="多表查询分类："></a>多表查询分类：</h4><p>1、内连接查询<br>    1、隐式内连接：使用where条件消除无用数据<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息和对应的部门信息</span><br><span class="line">SELECT * FROM emp, dept WHERE emp.dept_id = dept.id;</span><br><span class="line"> -- 查询员工表的名称，性别。部门表的名称</span><br><span class="line">  select </span><br><span class="line">t1.name, -- 员工表的名字</span><br><span class="line">t1.gender,-- 员工表的性别</span><br><span class="line">t2.name-- 部门表的</span><br><span class="line">from </span><br><span class="line">emp t1,</span><br><span class="line">dept t2</span><br><span class="line">where</span><br><span class="line">t1.dept_id =t2.id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    2、显示内连接<br>        语法：select 字段列表 from 表名1[inner] join 表名2 on 条件<br>        例如：<br>            select<em>from emp inner join dept on .dept_id=dept.id;<br>            select</em>from emp jion dept on emp.dept_id=dept_id;<br>    3、内连接查询<br>        1、从哪些表中查询数据<br>        2、条件是什么<br>        3、查询哪里字段<br>2、外连接查询<br>    1、左外连接：<br>        语法：select 字段列表 from 表1 left[outer] join 表2 on 条件；<br>        查询的是左表所有的数据以及其交际部分。<br>    2、有外连接：<br>        语法:select 字段列表 from 表1 right [outer ] join 表2 on 条件；<br>        查询的是右表所有数据以及其交际部分。<br>        （其实内连接查询就是查询交际部分）<br>3、子查询<br>概念:查询中嵌套查询，称嵌套查询为子查询。<br>    查询工资最高的员工信息<br>    1查询最高的工资是多少 9000<br>        SELECT MAX(salary) FROM emp;<br>    2查询员工信息，并且工资等于9000的<br>        <code>SELECT * FROM emp WHERE emp.</code>salary<code>=9000;</code><br>    一条sql就完成这个操作。子查询<br>        <code>SELECT * FROM emp WHERE emp.</code>salary<code>=(SELECT MAX(salary) FROM emp);</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">子查询不同情况</span><br><span class="line">1.子查询的结果是单行单列的:</span><br><span class="line">子查询可以作为条件，使用运算符去判断。运算符：&gt; &gt;= &lt; &lt;= =</span><br><span class="line">*</span><br><span class="line">查询员工工资小于平均工资的人</span><br><span class="line">SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);</span><br><span class="line">2.子查询的结果是多行单列的:</span><br><span class="line">子查询可以作为条件，使用运算符in来判断</span><br><span class="line">查询财务部和市场部所有的员工信息</span><br><span class="line">SELECT id FROM dept WHERE NAME = &#x27;财务部&#x27; OR NAME = &#x27;市场部&#x27;;</span><br><span class="line">SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;</span><br><span class="line">子查询</span><br><span class="line">SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = &#x27;财务部&#x27; OR NAME = &#x27;市场部&#x27;);</span><br><span class="line">3.子查询的结果是多行多列的:</span><br><span class="line">子查询可以作为一张虚拟表参与查询</span><br><span class="line">查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span><br><span class="line">子查询</span><br><span class="line">SELECT * FROM dept_t1,(SELECT * FROM emp WHERE emp.`join_date` &gt; &#x27;2011-11-11&#x27;) t2</span><br><span class="line">WHERE t1.id = t2.dept_id;</span><br><span class="line">普通内连接</span><br><span class="line">SELECT * FROM emp_t1,dept_t2 WHERE t1.`dept_id` = t2.`id` AND t1.`join_date` &gt; &#x27;2011-11-11&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>案例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE dept(</span><br><span class="line">    id INT PRIMARY KEY, -- 部门id</span><br><span class="line">    dname VARCHAR(50), -- 部门名称</span><br><span class="line">    loc VARCHAR(50) -- 部门所在地</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加4个部门</span><br><span class="line">INSERT INTO dept(id, dname, loc) VALUES</span><br><span class="line">(10, &#x27;教研部&#x27;, &#x27;北京&#x27;),</span><br><span class="line">(20, &#x27;学工部&#x27;, &#x27;上海&#x27;),</span><br><span class="line">(30, &#x27;销售部&#x27;, &#x27;广州&#x27;),</span><br><span class="line">(40, &#x27;财务部&#x27;, &#x27;深圳&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 职务表，职务名称，职务描述</span><br><span class="line">CREATE TABLE job( </span><br><span class="line">id INT PRIMARY KEY, </span><br><span class="line">jname VARCHAR(20), </span><br><span class="line">description VARCHAR(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO job(id, jname, description) VALUES</span><br><span class="line">(1, &#x27;董事长&#x27;, &#x27;管理整个公司，接单&#x27;),</span><br><span class="line">(2, &#x27;经理&#x27;, &#x27;管理部门员工&#x27;),</span><br><span class="line">(3, &#x27;销售员&#x27;, &#x27;向客人推销产品&#x27;),</span><br><span class="line">(4, &#x27;文员&#x27;, &#x27;使用办公软件&#x27;</span><br><span class="line">);</span><br><span class="line">CREATE TABLE emp (</span><br><span class="line">    id INT PRIMARY KEY, -- 员工id</span><br><span class="line">    ename VARCHAR(50), -- 员工姓名</span><br><span class="line">    job_id INT, -- 职务id</span><br><span class="line">    mgr INT, -- 上级领导</span><br><span class="line">    join_date , -- 入职日期</span><br><span class="line">    salary DECIMAL(7, 2), -- 工资</span><br><span class="line">    bonus DECIMAL(7, 2), -- 奖金</span><br><span class="line">    dept_id INT, -- 所在部门编号</span><br><span class="line">    CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),</span><br><span class="line">    CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO emp(id, ename, job_id, mgr, join_date, salary, bonus, dept_id) VALUES</span><br><span class="line">(1001, &#x27;孙悟空&#x27;, 4, 1004, &#x27;2000-12-17&#x27;, &#x27;8000.00&#x27;, NULL, 20),</span><br><span class="line">(1002, &#x27;卢俊义&#x27;, 3, 1006, &#x27;2001-02-20&#x27;, &#x27;16000.00&#x27;, &#x27;3000.00&#x27;, 30),</span><br><span class="line">(1003, &#x27;林冲&#x27;, 3, 1006, &#x27;2001-02-22&#x27;, &#x27;12500.00&#x27;, &#x27;5000.00&#x27;, 30),</span><br><span class="line">(1004, &#x27;唐僧&#x27;, 2, 1009, &#x27;2001-04-02&#x27;, &#x27;29750.00&#x27;, NULL, 20),</span><br><span class="line">(1005, &#x27;李逵&#x27;, 4, 1006, &#x27;2001-09-28&#x27;, &#x27;12500.00&#x27;, &#x27;14000.00&#x27;, 30),</span><br><span class="line">(1006, &#x27;宋江&#x27;, 2, 1009, &#x27;2001-05-01&#x27;, &#x27;28500.00&#x27;, NULL, 30),</span><br><span class="line">(1007, &#x27;刘备&#x27;, 2, 1009, &#x27;2001-09-01&#x27;, &#x27;24500.00&#x27;, NULL, 10),</span><br><span class="line">(1008, &#x27;猪八戒&#x27;, 4, 1004, &#x27;2007-04-19&#x27;, &#x27;30000.00&#x27;, NULL, 20),</span><br><span class="line">(1009, &#x27;罗贯中&#x27;, 1, NULL, &#x27;2001-11-17&#x27;, &#x27;50000.00&#x27;, NULL, 10),</span><br><span class="line">(1010, &#x27;吴用&#x27;, 3, 1006, &#x27;2001-09-08&#x27;, &#x27;15000.00&#x27;, &#x27;0.00&#x27;, 30),</span><br><span class="line">(1011, &#x27;沙僧&#x27;, 4, 1004, &#x27;2007-05-23&#x27;, &#x27;11000.00&#x27;, NULL, 20),</span><br><span class="line">(1012, &#x27;李逵&#x27;, 4, 1006, &#x27;2001-12-03&#x27;, &#x27;9500.00&#x27;, NULL, 30),</span><br><span class="line">(1013, &#x27;小白龙&#x27;, 4, 1004, &#x27;2001-12-03&#x27;, &#x27;30000.00&#x27;, NULL, 20),</span><br><span class="line">(1014, &#x27;关羽&#x27;, 4, 1007, &#x27;2002-01-23&#x27;, &#x27;13000.00&#x27;, NULL, 10);</span><br><span class="line">CREATE TABLE salarygrade (</span><br><span class="line">    grade INT PRIMARY KEY,  -- 级别</span><br><span class="line">    losalary INT,           -- 最低工资</span><br><span class="line">    hisalary INT            -- 最高工资</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO salarygrade (grade, losalary, hisalary) VALUES</span><br><span class="line">(1, 7000, 12000),</span><br><span class="line">(2, 12010, 14000),</span><br><span class="line">(3, 14010, 20000),</span><br><span class="line">(4, 20010, 30000),</span><br><span class="line">(5, 30010, 99990);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</span><br><span class="line">SELECT</span><br><span class="line">t1.id,</span><br><span class="line">t1.ename,</span><br><span class="line">t1.salary,</span><br><span class="line">t2.jname,</span><br><span class="line">t2.description FROM emp t1,</span><br><span class="line">job t2</span><br><span class="line">WHERE</span><br><span class="line">t1.job_id=t2.id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">t1.ename,</span><br><span class="line">t1.salary</span><br><span class="line">t2.jname,</span><br><span class="line">t2.description,</span><br><span class="line">t3.dname,</span><br><span class="line">t3.loc,</span><br><span class="line">t4.grade;</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">job t2,</span><br><span class="line">dept t3,</span><br><span class="line">salarygrade t4;</span><br><span class="line">WHERE </span><br><span class="line">t1.job_id=t2.id</span><br><span class="line">AND t1.dept_id=t3.id </span><br><span class="line">AND t1.salary BETWEEN t4.losalary </span><br><span class="line">AND t4.hisalary;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">5.查询出部门编号、部门名称、部门位置、部门人数</span><br><span class="line">分析:</span><br><span class="line">1.部门编号、部门名称、部门位置 dept 表。部门人数 emp表</span><br><span class="line">2.使用分组查询。按照emp.dept_id完成分组，查询count(id)</span><br><span class="line">3.使用子查询将第2步的查询结果和dept表进行关联查询</span><br><span class="line">SELECT </span><br><span class="line">t1.id,</span><br><span class="line">t1.dname,</span><br><span class="line">t1.loc,</span><br><span class="line">t2.total  </span><br><span class="line">FROM </span><br><span class="line">dept t1,  </span><br><span class="line">(SELECT dept_id,</span><br><span class="line"> COUNT(id) total  </span><br><span class="line">FROM emp GROUP BY dept_id) t2  </span><br><span class="line">WHERE </span><br><span class="line">t1.id=t2.dept_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">6.查询所有员工的姓名及其直接上级的姓名，没有领导的员工也需要查询</span><br><span class="line">分析:</span><br><span class="line">1.姓名emp，直接上级的姓名emp</span><br><span class="line">emp表的id和mgr是自关联</span><br><span class="line">2.条件emp.id=emp.mgr</span><br><span class="line">3.查询左表的所有数据，和交集数据</span><br><span class="line">使用左外连接查询</span><br><span class="line">SELECT</span><br><span class="line">t1.ename,</span><br><span class="line">t1.mgr,</span><br><span class="line">t2.id,</span><br><span class="line">t2.ename  </span><br><span class="line">FROM emp t1 </span><br><span class="line">LEFT JOIN emp t2 </span><br><span class="line">ON t1.mgr=t2.id;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ol><li>概念：<ul><li>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li></ul></li><li>操作：<ol><li>开启事务: start transaction;</li><li>回滚: rollback;</li><li>提交: commit;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE account(  </span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,  </span><br><span class="line">NAME VARCHAR(10),  </span><br><span class="line">balance DOUBLE  </span><br><span class="line">);  </span><br><span class="line">--添加数据  </span><br><span class="line">INSERT INTO account (NAME, balance) VALUES (&#x27;zhangsan&#x27;,1000),(&#x27;lisi&#x27;,1000);  </span><br><span class="line">SELECT * FROM account;|  </span><br><span class="line">UPDATE account SET balance = 1000;  </span><br><span class="line">--张三给李四转账500元   </span><br><span class="line">--0.开启事务  </span><br><span class="line">START TRANSACTION;  </span><br><span class="line">--1.张三账户-500  </span><br><span class="line">UPDATE account SET balance = balance - 500 WHERE NAME = &#x27;zhangsan&#x27;;  </span><br><span class="line">--2.李四账户+500  </span><br><span class="line">--出错了...  </span><br><span class="line">UPDATE account SET balance = balance + 500 WHERE NAME = &#x27;lisi&#x27;;  </span><br><span class="line">--发现执行没有问题，提交事务  </span><br><span class="line">COMMIT;</span><br><span class="line">-- 发现出问题了，回滚事务</span><br><span class="line">rollback;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="MySQL数据库中事务默认自动提交"><a href="#MySQL数据库中事务默认自动提交" class="headerlink" title="MySQL数据库中事务默认自动提交"></a>MySQL数据库中事务默认自动提交</h4><ul><li>事务提交的两种方式:</li><li>自动提交 :</li><li>mysql就是自动提交的</li><li>一条DML(增删改)语句会自动提交一次事务。<br>&lt;!— * 手动提交 :</li><li>Oracle数据库默认是手动提交事务</li><li>需要先开启事务，再提交</li><li>修改事务的默认提交方式:</li><li>查看事务的默认提交方式:SELECT @@autocommit;—1代表自动提交0代表手动提交</li><li>修改默认提交方式:set @@autocommit = 0; —&gt;<h4 id="2-事务的四大特征"><a href="#2-事务的四大特征" class="headerlink" title="2.事务的四大特征:"></a>2.事务的四大特征:</h4>1.原子性:是不可分割的最小操作单位，要么同时成功，要么同时失败。<br>2.持久性:当事务提交或回滚后，数据库会持久化的保存数据。<br>3.隔离性:多个事务之间相互独立。<br>4.一致性:事务操作前后，数据总量不变<h4 id="事务的隔离级别（了解）"><a href="#事务的隔离级别（了解）" class="headerlink" title="事务的隔离级别（了解）"></a>事务的隔离级别（了解）</h4></li><li>概念: 多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</li><li>存在问题:<br>  1.脏读:一个事务，读取到另一个事务中没有提交的数据<br>  2.不可重复读(虚读):在同一个事务中，两次读取到的数据不一样。<br>  3.幻读:一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。<h5 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别:"></a>隔离级别:</h5>1.read uncommitted:读未提交</li></ul><ul><li>产生的问题:脏读、不可重复读、幻读<br>2.read committed:(Oracle)</li><li>产生的问题:不可重复读、幻读<br>3.repeatable read:可重复读_(MySQL默认)</li><li>产生的问题:幻读<br>4.serializable:串行化</li></ul><ul><li>可以解决所有的问题<br>注意:隔离级别从小到大安全性越来越高，但是效率越来越低<br>数据库查询隔离级别:</li><li>select @@tx isolation;</li><li>数据库设置隔离级别:</li><li>set global transaction isolation level 级别字符串;<br>举例：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">set global transaction isolation level read uncommitted;</span><br><span class="line">start transaction;</span><br><span class="line">---转账操作</span><br><span class="line">update account set balance = balance - 500 where id = 1;</span><br><span class="line">update account set balance = balance + 500 where id = 2;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="SQL分类-1"><a href="#SQL分类-1" class="headerlink" title="SQL分类:"></a>SQL分类:</h4></li></ul><ol><li>DDL:操作数据库和表</li><li>DML:增删改表中数据</li><li>DQL:查询表中数据</li><li>DCL:管理用户，授权<br>DBA:数据库管理员<h4 id="DCL-管理用户，授权"><a href="#DCL-管理用户，授权" class="headerlink" title="DCL:管理用户，授权"></a>DCL:管理用户，授权</h4><h5 id="1-管理用户"><a href="#1-管理用户" class="headerlink" title="1. 管理用户"></a>1. 管理用户</h5><h6 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1. 添加用户:"></a>1. 添加用户:</h6>语法:CREATE USER ‘用户名’@’主机名’ IDENTIFIED BY ‘密码’;<h6 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户:"></a>2.删除用户:</h6>DROP USER ‘用户名’@’主机名’;<h6 id="3-修改用户密码"><a href="#3-修改用户密码" class="headerlink" title="3. 修改用户密码:"></a>3. 修改用户密码:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UPDATE USER SET PASSWORD = PASSWORD(‘新密码’) WHERE USER = ‘用户名’;  </span><br><span class="line">UPDATE USER SET PASSWORD = PASSWORD(‘abc’) WHERE USER = ‘lisi’;  </span><br><span class="line">SET PASSWORD FOR ‘用户名’@‘主机名’= PASSWORD(‘新密码’);  </span><br><span class="line">SET PASSWORD FOR ‘root[@’localhost’]= PASSWORD(‘123’);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h6 id="4-查询用户"><a href="#4-查询用户" class="headerlink" title="4. 查询用户:"></a>4. 查询用户:</h6><ul><li>1.切换到mysql数据库<br>USE mysql;</li><li>2.查询user表<br>SELECT * FROM USER;</li></ul><ul><li>通配符: % 表示可以在任意主机使用用户登录数据库<h6 id="5、mysql中忘记了root用户的密码？"><a href="#5、mysql中忘记了root用户的密码？" class="headerlink" title="5、mysql中忘记了root用户的密码？"></a>5、mysql中忘记了root用户的密码？</h6></li></ul><ol><li>cmd —&gt; net stop mysql停止mysql服务<br>需要管理员运行该cmd</li><li>使用无验证方式启动mysql服务：mysqld —skip-grant-tables</li><li>打开新的cmd窗口，直接输入mysql命令，敲回车。就可以登录成功</li><li>use mysql;</li><li>update user set password = password(‘你的新密码’) where user = ‘root’;</li><li>关闭两个窗口</li><li>打开任务管理器，手动结束mysqld.exe 的进程</li><li>启动mysql服务</li><li>使用新密码登录。<h5 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h5>1.查询权限:</li></ol><p>SHOW GRANTS FOR ‘用户名’@’主机名’;<br>SHOW GRANTS FOR ‘lisi’@’%’;</p><p>2.授予权限:</p><p>grant 权限列表 on 数据库名.表名 to ‘用户名’@’主机名’;<br>—给张三用户授予所有权限，在任意数据库任意表上<br>GRANT ALL ON <em>.</em> TO ‘zhangsan’@’localhost’;</p><p>3.撤销权限:</p><p>revoke 权限列表 on 数据库名.表名 from ‘用户名’@’主机名’;</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>概念: Java DataBase Connectivity Java数据库连接，Java语言操作数据库</p><ul><li>JDBC本质:其实是官方(sun公司)定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类<h3 id="2、快速入门："><a href="#2、快速入门：" class="headerlink" title="2、快速入门："></a>2、快速入门：</h3>步骤:<br>  1.导入驱动jar包<br>  2.注册驱动<br>  3.获取数据库连接对象Connection<br>  4.定义sql<br>  5.获取执行sql语句的对象Statement<br>  6.执行sql，接受返回结果<br>  7.处理结果<br>  8.释放资源<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;  </span><br><span class="line">import java.sql.DriverManager;  </span><br><span class="line">import java.sql.Statement;  </span><br><span class="line">  </span><br><span class="line">public class test &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">  </span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);  </span><br><span class="line">            Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/db3&quot;, &quot;root&quot;, &quot;root&quot;);  </span><br><span class="line">            String sql=&quot;UPDATE account SET balance = 500 WHERE id = 1&quot;;  </span><br><span class="line">            Statement stmt = conn.createStatement();  </span><br><span class="line">            int count =stmt.executeUpdate(sql);  </span><br><span class="line">            System.out.println(count);  </span><br><span class="line">            stmt.close();  </span><br><span class="line">            conn.close();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、详解各个对象"><a href="#3、详解各个对象" class="headerlink" title="3、详解各个对象"></a>3、详解各个对象</h3>1、DriverManager：驱动管理对象<br>  功能：<pre><code>  1、注册驱动：告诉程序该使用哪一个数据库驱动jar</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static void registerDriver(Driver driver):</span><br><span class="line">注册与给定的驱动程序 DriverManger。</span><br><span class="line">写代码使用：Class.forName(&quot;com.mysql.jdbc.Driver);</span><br><span class="line">通过查看代码源发现：在com.mysql.jdbc.Driver类中存在静态代码块</span><br><span class="line">static&#123;</span><br><span class="line">try&#123;</span><br><span class="line">java.sql.DriverManager.registerDriver(new Driver())</span><br><span class="line">&#125;catch(SQLException E)&#123;</span><br><span class="line">throw new RuntimeException(&quot;Can&#x27;t register driver!);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  注意：mysql5之后的驱动jar包可以省略注册驱动的步骤</code></pre>  2、获取数据库连接：<br>  方法：static Connection getConnection(String url,String user,String password)<br>  参数：<br>  url:指定连接的路径<pre><code>  语法L：jdbc:mysql://ip地址（域名）:端口号/数据库名称  例子：jdbc:mysql://localhost:3306/db3  细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</code></pre>  user:用户名<br>  password:密码<br>2、Connection:数据库连接对象<br>  1.功能:<pre><code>  1、获取执行sql的对象  Statement createStatement()  PreparedStatement prepareStatement(String sql)</code></pre>  2.管理事务:<pre><code>  开启事务:setAutoCommit(boolean autoCommit):调用该方法设置参数为false，即开启事务  提交事务:commit()  回滚事务:rollback()</code></pre>3、 Statement:执行sql的对象<ol><li>执行sql<br> 1.boolean execute(String sql):可以执行任意的sql了解<br> 2.int executeUpdate(String sql):执行DML(insert、update、delete)语句、DDL(create, alter、drop)语句<br>  返回值:影响的行数，可以通过这个影响行数的执行判断DML语句是否执行成功 返回值&gt;0则执行成功，反之，则失败。<br> 3、 ResultSet executeQuery(String sql):执行DQL(select)语句</li></ol></li></ul><pre><code>自己搜索的内容：在Java中，`createStatement` 方法是 `Connection` 接口的一个方法，它用于创建一个 `Statement` 对象，该对象用于执行不带参数的SQL语句1. **执行SQL语句**：createStatement` 方法允许你执行SQL数据操作语言（DML）语句，如 `INSERT`、`UPDATE` 或 `DELETE`，以及数据定义语言（DDL）语句，如 `CREATE`、`ALTER` 或 `DROP`。你可以使用 `Statement` 对象来执行SQL查询语句（`SELECT`），并从数据库中检索数据。</code></pre><ol><li><p><strong>返回结果集</strong>：</p><ul><li>当执行查询语句时，<code>createStatement</code> 方法返回的 <code>Statement</code> 对象可以用来获取 <code>ResultSet</code> 对象，该对象包含查询的结果。</li></ul></li><li><p><strong>执行批量更新</strong>：</p><ul><li><code>Statement</code> 对象还支持批量更新操作，这意味着你可以向数据库发送多个SQL语句，并一次性执行它们。<br>2、练习<br>![[Pasted image 20240729080156.png]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;  </span><br><span class="line">import java.sql.DriverManager;  </span><br><span class="line">import java.sql.SQLException;  </span><br><span class="line">import java.sql.Statement;  </span><br><span class="line">  </span><br><span class="line">public class JDBCDemo &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Statement stmt=null;  </span><br><span class="line">        Connection conn=null;  </span><br><span class="line">       //注册驱动  </span><br><span class="line">            try &#123;  </span><br><span class="line">  </span><br><span class="line">                Class.forName(&quot;com.mysql.jdbc.Driver&quot;);  </span><br><span class="line">                //定义sql  </span><br><span class="line">                String sql =&quot;insert into account values(null,&#x27;王五&#x27;,3000)&quot;;  </span><br><span class="line">                //获取connection对象  </span><br><span class="line">         conn= DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;,&quot;root&quot;,&quot;root&quot;);  </span><br><span class="line">                stmt=conn.createStatement();  </span><br><span class="line">                int count=stmt.executeUpdate(sql);  </span><br><span class="line">                System.out.println(count);  </span><br><span class="line">                if(count&gt;0)&#123;  </span><br><span class="line">                    System.out.println(&quot;添加成功！&quot;);  </span><br><span class="line">                &#125;else&#123;  </span><br><span class="line">                    System.out.println(&quot;添加失败！&quot;);  </span><br><span class="line">                &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            &#125; catch (ClassNotFoundException e) &#123;  </span><br><span class="line">                throw new RuntimeException(e);  </span><br><span class="line">            &#125; catch (SQLException e) &#123;  </span><br><span class="line">                throw new RuntimeException(e);  </span><br><span class="line">            &#125;finally&#123;  </span><br><span class="line">                if(stmt !=null)&#123;  </span><br><span class="line">  </span><br><span class="line">                        try &#123;  </span><br><span class="line">                            stmt.close();  </span><br><span class="line">                        &#125; catch (SQLException e) &#123;  </span><br><span class="line">                            throw new RuntimeException(e);  </span><br><span class="line">                        &#125;  </span><br><span class="line">  </span><br><span class="line">                &#125;  </span><br><span class="line">                if(conn !=null)&#123;  </span><br><span class="line">  </span><br><span class="line">                    try &#123;  </span><br><span class="line">                        conn.close();  </span><br><span class="line">                    &#125; catch (SQLException e) &#123;  </span><br><span class="line">                        throw new RuntimeException(e);  </span><br><span class="line">                    &#125;  </span><br><span class="line">  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>修改表中记录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;  </span><br><span class="line">import java.sql.DriverManager;  </span><br><span class="line">import java.sql.SQLException;  </span><br><span class="line">import java.sql.Statement;  </span><br><span class="line">  </span><br><span class="line">public class jdbcDemo1 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Connection conn=null;  </span><br><span class="line">        Statement stmt=null;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);  </span><br><span class="line">            conn = DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;,&quot;root&quot;,&quot;root&quot;);  </span><br><span class="line">            String sql=&quot;update account set balance=1500 where id=3&quot;;  </span><br><span class="line">            stmt = conn.createStatement();  </span><br><span class="line">            int count =stmt.executeUpdate(sql);  </span><br><span class="line">            System.out.println(count);  </span><br><span class="line">            if(count&gt;0)&#123;  </span><br><span class="line">                System.out.println(&quot;修改成功&quot;);  </span><br><span class="line">            &#125;else&#123;  </span><br><span class="line">                System.out.println(&quot;修改失败&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125; catch (SQLException e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125;finally &#123;  </span><br><span class="line">            if(stmt !=null)&#123;  </span><br><span class="line">                try &#123;  </span><br><span class="line">                    stmt.close();  </span><br><span class="line">                &#125; catch (SQLException e) &#123;  </span><br><span class="line">                    throw new RuntimeException(e);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            if(conn!=null)&#123;  </span><br><span class="line">                try &#123;  </span><br><span class="line">                    conn.close();  </span><br><span class="line">                &#125; catch (SQLException e) &#123;  </span><br><span class="line">                    throw new RuntimeException(e);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>account表 删除一条记录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;  </span><br><span class="line">import java.sql.DriverManager;  </span><br><span class="line">import java.sql.SQLException;  </span><br><span class="line">import java.sql.Statement;  </span><br><span class="line">  </span><br><span class="line">public class jdbcDemo2 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Connection conn=null;  </span><br><span class="line">        Statement stmt=null;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);  </span><br><span class="line">            conn= DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;,&quot;root&quot;,&quot;root&quot;);  </span><br><span class="line">            String sql=&quot;delete from account where id=3&quot;;  </span><br><span class="line">            stmt =conn.createStatement();  </span><br><span class="line">            int count=stmt.executeUpdate(sql);  </span><br><span class="line">            System.out.println(count);  </span><br><span class="line">            if(count&gt;0)&#123;  </span><br><span class="line">                System.out.println(&quot;修改成功&quot;);  </span><br><span class="line">            &#125;else&#123;  </span><br><span class="line">                System.out.println(&quot;修改失败&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125; catch (SQLException e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125;finally &#123;  </span><br><span class="line">            try &#123;  </span><br><span class="line">                conn.close();  </span><br><span class="line">            &#125; catch (SQLException e) &#123;  </span><br><span class="line">                throw new RuntimeException(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">            try &#123;  </span><br><span class="line">                stmt.close();  </span><br><span class="line">            &#125; catch (SQLException e) &#123;  </span><br><span class="line">                throw new RuntimeException(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、ResultSet：结果集对象，封装查询结果"><a href="#4、ResultSet：结果集对象，封装查询结果" class="headerlink" title="4、ResultSet：结果集对象，封装查询结果"></a>4、ResultSet：结果集对象，封装查询结果</h3></li></ul></li></ol><ul><li>next():游标向下移动一行，判断当前行是否是最后一行末尾（是否有数据），如果是，则返回false,如果不是则返回true</li><li>getXxx(参数):获取数据<pre><code>  Xxx：代表数据类型 如：int getInt(),String getString()  参数：  1、int:代表列的编号，从1开始  如：getString(1)  2、String:代表列的名称。如：getDouble(&quot;balance&quot;)</code></pre>  注意：<br>  使用步骤；<br>  1、游标向下移动一行<br>  2、判断是否有数据<br>  3、获取数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.*;  </span><br><span class="line">  </span><br><span class="line">public class jdbcDemo4 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Statement stmt=null;  </span><br><span class="line">        Connection conn=null;  </span><br><span class="line">        ResultSet rs=null;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);  </span><br><span class="line">            conn= DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;,&quot;root&quot;,&quot;root&quot;);  </span><br><span class="line">            String sql=&quot;select*from account&quot;;  </span><br><span class="line">            stmt=conn.createStatement();  </span><br><span class="line">            rs=stmt.executeQuery(sql);  </span><br><span class="line">            while (rs.next())&#123;  </span><br><span class="line"> int id=rs.getInt(1);  </span><br><span class="line"> String name=rs.getString(&quot;name&quot;);  </span><br><span class="line"> double balance=rs.getDouble(3);  </span><br><span class="line"> System.out.println(id+&quot;---&quot;+name+&quot;---&quot;+balance);  </span><br><span class="line">&#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125; catch (SQLException e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125;  </span><br><span class="line">        if(rs!=null)&#123;  </span><br><span class="line">            try &#123;  </span><br><span class="line">                rs.close();  </span><br><span class="line">            &#125; catch (SQLException e) &#123;  </span><br><span class="line">                throw new RuntimeException(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if(stmt!=null)&#123;  </span><br><span class="line">            try &#123;  </span><br><span class="line">                stmt.close();  </span><br><span class="line">            &#125; catch (SQLException e) &#123;  </span><br><span class="line">                throw new RuntimeException(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if(conn!=null)&#123;  </span><br><span class="line">            try &#123;  </span><br><span class="line">                conn.close();  </span><br><span class="line">            &#125; catch (SQLException e) &#123;  </span><br><span class="line">                throw new RuntimeException(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 练习:</span><br><span class="line">定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。</span><br><span class="line">1.定义Emp类</span><br><span class="line">2.定义方法 public List&lt;Emp&gt; findAll()&#123;&#125;</span><br><span class="line">3.实现方法 select * from em p;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Date;  </span><br><span class="line">  </span><br><span class="line">public class Emp &#123;  </span><br><span class="line">  </span><br><span class="line">        private int id;  </span><br><span class="line">        private String ename;  </span><br><span class="line">        private int job_id;  </span><br><span class="line">        private int mgr;  </span><br><span class="line">        private Date joindate;  </span><br><span class="line">        private double salary;  </span><br><span class="line">        private double bouns;  </span><br><span class="line">        private int dept_id;  </span><br><span class="line">  </span><br><span class="line">    public int getId() &#123;  </span><br><span class="line">        return id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setId(int id) &#123;  </span><br><span class="line">        this.id = id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getEname() &#123;  </span><br><span class="line">        return ename;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setEname(String ename) &#123;  </span><br><span class="line">        this.ename = ename;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getJob_id() &#123;  </span><br><span class="line">        return job_id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setJob_id(int job_id) &#123;  </span><br><span class="line">        this.job_id = job_id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getMgr() &#123;  </span><br><span class="line">        return mgr;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setMgr(int mgr) &#123;  </span><br><span class="line">        this.mgr = mgr;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Date getJoindate() &#123;  </span><br><span class="line">        return joindate;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setJoindate(Date joindate) &#123;  </span><br><span class="line">        this.joindate = joindate;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public double getSalary() &#123;  </span><br><span class="line">        return salary;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setSalary(double salary) &#123;  </span><br><span class="line">        this.salary = salary;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public double getBouns() &#123;  </span><br><span class="line">        return bouns;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setBouns(double bouns) &#123;  </span><br><span class="line">        this.bouns = bouns;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getDept_id() &#123;  </span><br><span class="line">        return dept_id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setDept_id(int dept_id) &#123;  </span><br><span class="line">        this.dept_id = dept_id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return &quot;Emp&#123;&quot; +  </span><br><span class="line">                &quot;id=&quot; + id +  </span><br><span class="line">                &quot;, ename=&#x27;&quot; + ename + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &quot;, job_id=&quot; + job_id +  </span><br><span class="line">                &quot;, mgr=&quot; + mgr +  </span><br><span class="line">                &quot;, joindate=&quot; + joindate +  </span><br><span class="line">                &quot;, salary=&quot; + salary +  </span><br><span class="line">                &quot;, bouns=&quot; + bouns +  </span><br><span class="line">                &quot;, dept_id=&quot; + dept_id +  </span><br><span class="line">                &#x27;&#125;&#x27;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">import cn.domain.Emp;  </span><br><span class="line">  </span><br><span class="line">import java.sql.*;  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">public class jdbcDemo5 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">         List&lt;Emp&gt; list=new jdbcDemo5().findAll();  </span><br><span class="line">        System.out.println(list);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public List&lt;Emp&gt; findAll() &#123;  </span><br><span class="line">        Connection conn=null;  </span><br><span class="line">        Statement stmt=null;  </span><br><span class="line">        ResultSet rs=null;  </span><br><span class="line">        List&lt;Emp&gt; list=null;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);  </span><br><span class="line">      conn= DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;,&quot;root&quot;,&quot;root&quot;);  </span><br><span class="line">            String sql=&quot;select*from emp&quot;;  </span><br><span class="line">        stmt =conn.createStatement();  </span><br><span class="line">      rs=stmt.executeQuery(sql);  </span><br><span class="line">            Emp emp=null;  </span><br><span class="line">          list=new ArrayList&lt;&gt;();  </span><br><span class="line">            while(rs.next())&#123;  </span><br><span class="line">                int id = rs.getInt(&quot;id&quot;);  </span><br><span class="line">                String ename = rs.getString(&quot;ename&quot;);  </span><br><span class="line">                int job_id = rs.getInt(&quot;job_id&quot;);  </span><br><span class="line">                int mgr = rs.getInt(&quot;mgr&quot;);  </span><br><span class="line">                Date joindate = rs.getDate(&quot;joindate&quot;);  </span><br><span class="line">                double salary = rs.getDouble(&quot;salary&quot;);  </span><br><span class="line">                double bouns = rs.getDouble(&quot;bouns&quot;);  </span><br><span class="line">                int dept_id = rs.getInt(&quot;dept_id&quot;);  </span><br><span class="line">  </span><br><span class="line">                emp.setId(id);  </span><br><span class="line">                emp.setEname(ename);  </span><br><span class="line">                emp.setJob_id(job_id);  </span><br><span class="line">                emp.setMgr(mgr);  </span><br><span class="line">                emp.setJoindate(joindate);  </span><br><span class="line">                emp.setSalary(salary);  </span><br><span class="line">                emp.setBouns(bouns);  </span><br><span class="line">                emp.setDept_id(dept_id);  </span><br><span class="line">  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125; catch (SQLException e) &#123;  </span><br><span class="line">            throw new RuntimeException(e);  </span><br><span class="line">        &#125;finally &#123;  </span><br><span class="line">            if(rs!=null)&#123;  </span><br><span class="line">                try &#123;  </span><br><span class="line">                rs.close();  </span><br><span class="line">                &#125; catch (SQLException e) &#123;  </span><br><span class="line">                    throw new RuntimeException(e);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            if(conn!=null)&#123;  </span><br><span class="line">                try &#123;  </span><br><span class="line">                    conn.close();  </span><br><span class="line">                &#125; catch (SQLException e) &#123;  </span><br><span class="line">                    throw new RuntimeException(e);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;if(stmt!=null)&#123;  </span><br><span class="line">                try &#123;  </span><br><span class="line">                    stmt.close();  </span><br><span class="line">                &#125; catch (SQLException e) &#123;  </span><br><span class="line">                    throw new RuntimeException(e);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">return  list;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、PreparedStatement-执行sql的对象"><a href="#5、PreparedStatement-执行sql的对象" class="headerlink" title="5、PreparedStatement:执行sql的对象"></a>5、PreparedStatement:执行sql的对象</h3><p>1、SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<br>    1、输入用户随便，输入密码：a’or’a’=’a<br>    2、<code>sql:select*from user where username=&#39;fhdsjkf&#39;and password =&#39;a&#39; or &#39;a&#39;=&#39;a&#39;2、解决sql注入问题：使用PreparedStatement对象来解决3、预编译的SQL：参数使用?作为占位符4、步骤：    1、导入驱动jar包 mysql-connector-java-5.1.37-bin.jar    2、注册驱动    3、获取数据库连接对象Connection    4、定义sql        注意：sql的参数使用？作为占位符。如</code>select *from user where username=?and password =?;<br>    5、获取执行sql语句的对象PreparedStatement Connection.prepareStatement(String sql)<br>    6、给？赋值：<br>    方法：setXxx(参数1,参数2)<br>        参数1；？的位置编号从1开始<br>        参数2：？的值<br>    7、执行sql，接受返回结果，不需要传递sql语句<br>    8、处理结果<br>    9、释放资源<br>5、注意：后期都会使用PreparedStatement来完成增删改查的所有操作<br>1、可以防止sql注入<br>2、效率更高<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">PreparedStatement pstmt=null;  </span><br><span class="line">ResultSet rs=null;  </span><br><span class="line">try &#123;  </span><br><span class="line">    conn = JDBCUtils.getConnection();  </span><br><span class="line">    String sql=&quot;select*from user where username=?and password=? &quot;;  </span><br><span class="line">    pstmt=conn.prepareStatement(sql);  </span><br><span class="line">    //获取执行sql的对象  </span><br><span class="line">    pstmt.setString(1,username);  </span><br><span class="line">    pstmt.setString(2,password);  </span><br><span class="line">  </span><br><span class="line"> rs=pstmt.executeQuery();  </span><br><span class="line">  </span><br><span class="line">    return rs.next();  </span><br><span class="line">&#125; catch (SQLException e) &#123;  </span><br><span class="line">    throw new RuntimeException(e);  </span><br><span class="line">&#125;finally &#123;  </span><br><span class="line">    JDBCUtils.close(rs,pstmt,conn);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="抽取JDBC工具类：JDBCUtils"><a href="#抽取JDBC工具类：JDBCUtils" class="headerlink" title="抽取JDBC工具类：JDBCUtils"></a>抽取JDBC工具类：JDBCUtils</h3><p>目的：简化书写<br>分析：<br>1、注册驱动也抽取<br>2、抽取一个方法获取连接对象<br>需求：不想传递参数，还得保证工具类的通用性<br>解决：配置文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.properties</span><br><span class="line">url=</span><br><span class="line">user=</span><br><span class="line">password=</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:///db3  </span><br><span class="line">user=root  </span><br><span class="line">password=root  </span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line"><span class="keyword">import</span> java.sql.*;  </span><br><span class="line"><span class="keyword">import</span> java.util.Properties;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();  </span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> JDBCUtils.class.getClassLoader();  </span><br><span class="line">        <span class="type">URL</span> <span class="variable">res</span> <span class="operator">=</span> classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> res.getPath();  </span><br><span class="line">        System.out.println(path);  </span><br><span class="line">        pro.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));  </span><br><span class="line">        url= pro.getProperty(<span class="string">&quot;url&quot;</span>);  </span><br><span class="line">        user=pro.getProperty(<span class="string">&quot;uesr&quot;</span>);  </span><br><span class="line">        password =pro.getProperty(<span class="string">&quot;password&quot;</span>);  </span><br><span class="line">        driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);  </span><br><span class="line">        Class.forName(driver);  </span><br><span class="line">  </span><br><span class="line">            pro.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;  </span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Statement stmt, Connection conn)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                stmt.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                conn.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                rs.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                stmt.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">            conn.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">```java</span><br></pre></td></tr></table></figure><br>import cn.domain.Emp;<br>import cn.utils.JDBCUtils;  </p><p>import java.sql.*;<br>import java.util.ArrayList;<br>import java.util.List;  </p><p>public class jdbcDemo6 {  </p><pre><code>    public static void main(String[] args) &#123;          List&lt;Emp&gt; list=new cn.jdbc.jdbcDemo5().findAll();          System.out.println(list);      &#125;      public List&lt;Emp&gt; findAll() &#123;          Connection conn=null;          Statement stmt=null;          ResultSet rs=null;          List&lt;Emp&gt; list=null;          try &#123;  </code></pre><p>//                Class.forName(“com.mysql.jdbc.Driver”);<br>//                conn= DriverManager.getConnection(“jdbc:mysql:///db3”,”root”,”root”);<br>                conn=JDBCUtils.getConnection();<br>                String sql=”select*from emp”;<br>                stmt =conn.createStatement();<br>                rs=stmt.executeQuery(sql);  </p><pre><code>            list=new ArrayList&lt;Emp&gt;();              while(rs.next())&#123;                  Emp emp = new Emp();                  int id = rs.getInt(&quot;id&quot;);                  String ename = rs.getString(&quot;ename&quot;);                  int job_id = rs.getInt(&quot;job_id&quot;);                  int mgr = rs.getInt(&quot;mgr&quot;);                  Date joindate = rs.getDate(&quot;joindate&quot;);                  double salary = rs.getDouble(&quot;salary&quot;);                  double bonus = rs.getDouble(&quot;bonus&quot;);                  int dept_id = rs.getInt(&quot;dept_id&quot;);                  emp.setId(id);                  emp.setEname(ename);                  emp.setJob_id(job_id);                  emp.setMgr(mgr);                  emp.setJoindate(joindate);                  emp.setSalary(salary);                  emp.setBonus(bonus);                  emp.setDept_id(dept_id);                  list.add(emp);              &#125;          &#125; catch (SQLException e) &#123;              throw new RuntimeException(e);          &#125;finally &#123;             /* if(rs!=null)&#123;                  try &#123;                        rs.close();                    &#125; catch (SQLException e) &#123;                        throw new RuntimeException(e);                    &#125;                &#125;                if(conn!=null)&#123;                    try &#123;                        conn.close();                    &#125; catch (SQLException e) &#123;                        throw new RuntimeException(e);                    &#125;                &#125;if(stmt!=null)&#123;                    try &#123;                        stmt.close();                    &#125; catch (SQLException e) &#123;                        throw new RuntimeException(e);                    &#125;                &#125;              */            &#125;              JDBCUtils.close(rs,stmt,conn);          return  list;      &#125;  &#125;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">练习：</span><br><span class="line">需求：</span><br><span class="line">1、通过键盘录入用户名和密码</span><br><span class="line">2、判断用户是否登录成功</span><br><span class="line">步骤：</span><br><span class="line">1、创建数据库表user</span><br><span class="line">```java</span><br><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">username varchar(32),</span><br><span class="line">password varchar(32)</span><br><span class="line">);</span><br><span class="line">-- select *from user;</span><br><span class="line">insert into user values(null,&#x27;zhangsan&#x27;,&#x27;123&#x27;);</span><br><span class="line">insert into user values(null,&#x27;lisi&#x27;,&#x27;234&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();  </span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> JDBCUtils.class.getClassLoader();  </span><br><span class="line">        <span class="type">URL</span> <span class="variable">res</span> <span class="operator">=</span> classLoader.getResource(<span class="string">&quot;cn/utils/jdbc.properties&quot;</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> res.getPath();  </span><br><span class="line">        System.out.println(path);  </span><br><span class="line">        pro.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));  </span><br><span class="line">        url= pro.getProperty(<span class="string">&quot;url&quot;</span>);  </span><br><span class="line">        user=pro.getProperty(<span class="string">&quot;user&quot;</span>);  </span><br><span class="line">        password = pro.getProperty(<span class="string">&quot;password&quot;</span>);  </span><br><span class="line">        driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);  </span><br><span class="line">        Class.forName(driver);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;  </span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Statement stmt, Connection conn)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                stmt.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                conn.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                rs.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                stmt.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">            conn.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        Statement stmt=<span class="literal">null</span>;  </span><br><span class="line">        Connection conn=<span class="literal">null</span>;  </span><br><span class="line">       <span class="comment">//注册驱动  </span></span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">  </span><br><span class="line">                Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">                <span class="comment">//定义sql  </span></span><br><span class="line">                <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;insert into account values(null,&#x27;王五&#x27;,3000)&quot;</span>;  </span><br><span class="line">                <span class="comment">//获取connection对象  </span></span><br><span class="line">         conn= DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///db3&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);  </span><br><span class="line">                stmt=conn.createStatement();  </span><br><span class="line">                <span class="type">int</span> count=stmt.executeUpdate(sql);  </span><br><span class="line">                System.out.println(count);  </span><br><span class="line">                <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;  </span><br><span class="line">                    System.out.println(<span class="string">&quot;添加成功！&quot;</span>);  </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                    System.out.println(<span class="string">&quot;添加失败！&quot;</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;  </span><br><span class="line">                <span class="keyword">if</span>(stmt !=<span class="literal">null</span>)&#123;  </span><br><span class="line">  </span><br><span class="line">                        <span class="keyword">try</span> &#123;  </span><br><span class="line">                            stmt.close();  </span><br><span class="line">                        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">                        &#125;  </span><br><span class="line">  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">if</span>(conn !=<span class="literal">null</span>)&#123;  </span><br><span class="line">  </span><br><span class="line">                    <span class="keyword">try</span> &#123;  </span><br><span class="line">                        conn.close();  </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">                    &#125;  </span><br><span class="line">  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDBC控制事务"><a href="#JDBC控制事务" class="headerlink" title="JDBC控制事务"></a>JDBC控制事务</h3><p>1、事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败<br>2、操作<br>    1、开启事务<br>    2、提交事务<br>    3、回滚事务<br>3、使用Connection对象来管理事务<br>    开启事务：setAutoCommit(boolean autcCommit):调用该方法设置参数为false，即开启事务<br>    提交事务：commit()<br>    当所有sql都执行完提交事务<br>    回滚事务：rollback()<br>    在catch中回滚事务<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import cn.utils.JDBCUtils;  </span><br><span class="line">  </span><br><span class="line">import java.sql.Connection;  </span><br><span class="line">import java.sql.PreparedStatement;  </span><br><span class="line">import java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line">public class jdbcDemo8 &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Connection conn=null;  </span><br><span class="line">        PreparedStatement pstmt1=null;  </span><br><span class="line">        PreparedStatement pstmt2=null;  </span><br><span class="line">        try &#123;  </span><br><span class="line">  </span><br><span class="line">            conn= JDBCUtils.getConnection();  </span><br><span class="line">            conn.setAutoCommit(false);  </span><br><span class="line">            String sql1=&quot;update account set balance=balance -?where id=?&quot;;  </span><br><span class="line">            String sql2=&quot;update account set balance=balance +?where id=?&quot;;  </span><br><span class="line">            pstmt1=conn.prepareStatement(sql1);  </span><br><span class="line">            pstmt2=conn.prepareStatement(sql2);  </span><br><span class="line">            pstmt1.setDouble(1,500);  </span><br><span class="line">            pstmt1.setInt(2,1);  </span><br><span class="line">  </span><br><span class="line">            pstmt2.setDouble(1,500);  </span><br><span class="line">            pstmt2.setInt(2,2);  </span><br><span class="line">            pstmt1.executeUpdate();  </span><br><span class="line">  </span><br><span class="line">            pstmt2.executeUpdate();  </span><br><span class="line">            conn.commit();  </span><br><span class="line">        &#125; catch (SQLException e) &#123;  </span><br><span class="line">            if(conn!=null)&#123;  </span><br><span class="line">                try &#123;  </span><br><span class="line">                    conn.rollback();  </span><br><span class="line">                &#125; catch (SQLException ex) &#123;  </span><br><span class="line">                    throw new RuntimeException(ex);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;finally&#123;  </span><br><span class="line">            JDBCUtils.close(pstmt1,conn);  </span><br><span class="line">            JDBCUtils.close(pstmt2,null);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p>1、概念：其实就是一个容器（集合），存放数据库连接的容器<br>    当系统初始化好后，容器被创建，容器中回申请一些对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器<br>2、好处：<br>    1、节约资源<br>    2、用户访问高效<br>3、实现:<br>    1、方法：<br>        获取连接：getConnection()<br>        归还链接：Connection.close().如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还链接<br>    2、一般我们不去实现它，有数据库厂商来实现<br>        1、C3P0:数据库连接池技术<br>        2、Druid：数据库连接池实现技术，由阿里巴巴提供的<br>4、C3P0:数据库连接池技术<br>![[Pasted image 20240730093401.png]]<br>5、Druid；数据库连接池实现技术，由阿里巴巴提供的<br>![[Pasted image 20240730101319.png]]<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//1.导入jar包</span></span><br><span class="line"><span class="comment">//2.定义配置文件</span></span><br><span class="line"><span class="comment">//3.加载配置文件</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DruidDemo.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">pro.load(is);</span><br><span class="line"><span class="comment">//4.获取连接池对象</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="comment">//5.获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;  </span><br><span class="line"><span class="keyword">import</span> java.util.Properties;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;  </span><br><span class="line">    <span class="comment">//定义成员变量  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//加载配置文件  </span></span><br><span class="line">            Properties pro=<span class="keyword">new</span> <span class="title class_">Properties</span>();  </span><br><span class="line">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));  </span><br><span class="line">            <span class="comment">//获取DataSource  </span></span><br><span class="line">            ds= DruidDataSourceFactory.createDataSource(pro);  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//获取连接  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;  </span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//释放资源  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span> <span class="params">(Statement stmt, Connection conn)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                stmt.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                conn.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">               rs.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                stmt.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                conn.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="comment">//获取连接方法  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> ds;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.utils.JDBCUtils;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        Connection conn=<span class="literal">null</span>;  </span><br><span class="line">        PreparedStatement pstmt=<span class="literal">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">          conn= JDBCUtils.getConnection();  </span><br><span class="line">            String sql=<span class="string">&quot;insert into account values(null,?,?)&quot;</span>;  </span><br><span class="line">            pstmt =conn.prepareStatement(sql);  </span><br><span class="line">            pstmt.setString(<span class="number">1</span>,<span class="string">&quot;王五&quot;</span>);  </span><br><span class="line">            pstmt.setString(<span class="number">2</span>, String.valueOf(<span class="number">3000</span>));  </span><br><span class="line">            <span class="type">int</span> count=pstmt.executeUpdate();  </span><br><span class="line">            System.out.println(count);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;  </span><br><span class="line">            JDBCUtils.close(pstmt,conn);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><ul><li>Spring 框架对JDBC的简单封装。提供了一个JDBCTemplata对象简化JDBC的开发</li><li>步骤：<br>1、导入jar包<br>3<br> 创建JdbcTemplate对象。依赖于数据源DataSource<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(ds);</span><br></pre></td></tr></table></figure></li></ul><ol><li>调用JdbcTemplate的方法来完成CRUD的操作<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">update():执行DML语句。增、删、改语句</span><br><span class="line">queryForMap():查询结果将结果集封装为map集合</span><br><span class="line">注意；这个方法查询的结果集长度只能是<span class="number">1</span></span><br><span class="line">queryForList():查询结果将结果集封装为list集合</span><br><span class="line">注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</span><br><span class="line">query():查询结果，将结果封装为JavaBean对象</span><br><span class="line">一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装  </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;类型&gt;(类型.class)</span><br><span class="line"></span><br><span class="line">queryForObject:查询结果，将结果封装为对象</span><br><span class="line">一般用于聚合函数的查询</span><br></pre></td></tr></table></figure>4、练习<br>1.修改1号数据的 salary 为 10000<br>2.添加一条记录<br>3.删除刚才添加的记录<br>4.查询id为1的记录，将其封装为Map集合<br>5.查询所有记录，将其封装为List<br>6.查询所有记录，将其封装为Emp对象的list集合<br>7.查询总记录数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">import cn.domain.Emp;  </span><br><span class="line">import cn.utils.JDBCUtils;  </span><br><span class="line">import org.junit.Test;  </span><br><span class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;  </span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;  </span><br><span class="line">import org.springframework.jdbc.core.RowMapper;  </span><br><span class="line">  </span><br><span class="line">import java.sql.ResultSet;  </span><br><span class="line">import java.sql.SQLException;  </span><br><span class="line">import java.util.Date;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">  </span><br><span class="line">public class Demo2 &#123;  </span><br><span class="line">    private JdbcTemplate template=new JdbcTemplate(JDBCUtils.getDataSource());  </span><br><span class="line">    @Test  </span><br><span class="line">    public void test1()&#123;  </span><br><span class="line">  </span><br><span class="line">        String sql=&quot;update emp set salary =1000 where id=1001&quot;;  </span><br><span class="line">        int count=template.update(sql);  </span><br><span class="line">        System.out.println(count);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Test  </span><br><span class="line">    public void test2()&#123;  </span><br><span class="line">        String sql=&quot;insert into emp(id,ename,dept_id)value(?,?,?)&quot;;  </span><br><span class="line">        int count =template.update(sql,1015,&quot;郭靖&quot;,10);  </span><br><span class="line">        System.out.println(count);  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Test  </span><br><span class="line">    public void test3()&#123;  </span><br><span class="line">        String sql=&quot;delete from emp where id=?&quot;;  </span><br><span class="line">        int count =template.update(sql,1015);  </span><br><span class="line">        System.out.println(count);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Test  </span><br><span class="line">    public void test4()&#123;  </span><br><span class="line">        String sql=&quot;select *from emp where id=?&quot;;  </span><br><span class="line">        Map&lt;String,Object&gt; map=template.queryForMap(sql,1001);  </span><br><span class="line">        System.out.println(map);  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Test  </span><br><span class="line">    public void test5()&#123;  </span><br><span class="line">        String sql=&quot;select*from emp&quot;;  </span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);  </span><br><span class="line">        for (Map&lt;String, Object&gt; stringObjectMap : list) &#123;  </span><br><span class="line">            System.out.println(stringObjectMap);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Test  </span><br><span class="line">    public  void test6()&#123;  </span><br><span class="line">        String sql=&quot;select *from emp&quot;;  </span><br><span class="line">        List&lt;Emp&gt; list=template.query(sql,new RowMapper&lt;Emp&gt;()&#123;  </span><br><span class="line">  </span><br><span class="line">            @Override  </span><br><span class="line">            public Emp mapRow(ResultSet rs, int i) throws SQLException &#123;  </span><br><span class="line">                Emp emp=new Emp();  </span><br><span class="line">                int id=rs.getInt(&quot;id&quot;);  </span><br><span class="line">                String ename =rs.getString(&quot;ename&quot;);  </span><br><span class="line">                int job_id=rs.getInt(&quot;job_id&quot;);  </span><br><span class="line">                int mgr=rs.getInt(&quot;mgr&quot;);  </span><br><span class="line">                Date joindate=rs.getDate(&quot;joindate&quot;);  </span><br><span class="line">                double salary=rs.getDouble(&quot;salary&quot;);  </span><br><span class="line">                double bonus=rs.getDouble(&quot;bonus&quot;);  </span><br><span class="line">                int dept_id=rs.getInt(&quot;depy_id&quot;);  </span><br><span class="line">  </span><br><span class="line">                emp.setId(id);  </span><br><span class="line">                emp.setEname(ename);  </span><br><span class="line">                emp.setJob_id(job_id);  </span><br><span class="line">                emp.setMgr(mgr);  </span><br><span class="line">                emp.setJoindate(joindate);  </span><br><span class="line">                emp.setSalary(salary);  </span><br><span class="line">                emp.setBonus(bonus);  </span><br><span class="line">                emp.setDept_id(dept_id);  </span><br><span class="line">                return null;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        for (Emp emp : list) &#123;  </span><br><span class="line">            System.out.println(emp);  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Test  </span><br><span class="line">    public void test7()&#123;  </span><br><span class="line">        String sql=&quot;select*from emp&quot;;  </span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, new BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));  </span><br><span class="line">        for (Emp emp : list) &#123;  </span><br><span class="line">            System.out.println(emp);  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    @Test  </span><br><span class="line">    public void test8()&#123;  </span><br><span class="line">        String sql=&quot;select count(id)from emp&quot;;  </span><br><span class="line">        Long total = template.queryForObject(sql, Long.class);  </span><br><span class="line">        System.out.println(total);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="web概念概述"><a href="#web概念概述" class="headerlink" title="web概念概述"></a>web概念概述</h2><p>![[Pasted image 20240730160256.png]]</p><ul><li>B/S架构详解<br>资源分类：<br>1.静态资源：</li></ul><ul><li>使用静态网页开发技术发布的资源。</li><li>特点：<ul><li>所有用户访问，得到的结果是一样的。</li><li>如：文本，图片，音频、视频，HTML,CSS,JavaScript</li><li>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源<br>2.动态资源：</li></ul></li><li>使用动态网页及时发布的资源。</li><li>特点：<ul><li>所有用户访问，得到的结果可能不一样。</li><li>如：jsp/servlet,php,asp…</li><li>如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</li></ul></li></ul><p>我们要学习动态资源，必须先学习静态资源</p><ul><li>静态资源<br>HTML:用于搭建基础网页，展示页面的内容<br>CSS:用于美化页面，布局页面<br>JavaScript:控制页面的元素，让页面有一些动态的效果<h3 id="HTML概念"><a href="#HTML概念" class="headerlink" title="HTML概念"></a>HTML概念</h3><h4 id="1、概念：是最基础的网页开发语言"><a href="#1、概念：是最基础的网页开发语言" class="headerlink" title="1、概念：是最基础的网页开发语言"></a>1、概念：是最基础的网页开发语言</h4> Hyper Text Markup Language 超文本标记语言<ul><li>超文本：<br>   超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本</li></ul></li><li>标记语言<pre><code>由标签构成的语言。&lt;标签名称&gt; 如html,xml标记语言不是编程语言</code></pre><h4 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h4>语法：<br>  1、html文档后缀名  .html或者.htm<br>  2、标签分为<pre><code>  1、围堵标签：有开始标签和结束标签。如 `&lt;html&gt; &lt;/html&gt;  2、自闭和标签：开始标签和结束标签在一起。如`&lt;br/&gt;</code></pre>  3、标签可以嵌套：<br>  需要正确嵌套，不能你中有我，我中有你<br>  如`<a><b></b></a><br>  4、在开始标签中可以定义属性。属性是由键值对构成，值需要用引号（单双都可）引起来<br>  5、html的标签不区分大小，但建议使用小写<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt;  </span><br><span class="line">    &lt;title&gt;title&lt;/title&gt;  </span><br><span class="line">&lt;/head&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line">&lt;font color=&quot;#8a2be2&quot;&gt;Hello world&lt;/font&gt;&lt;br/&gt;  </span><br><span class="line">&lt;font color=&quot;green&quot;&gt;Hello world&lt;/font&gt;  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="3、-学习标签"><a href="#3、-学习标签" class="headerlink" title="3、 学习标签"></a>3、 学习标签</h4></li></ul><h5 id="1-文件标签-构成html最基本的标签"><a href="#1-文件标签-构成html最基本的标签" class="headerlink" title="1.文件标签:构成html最基本的标签"></a>1.文件标签:构成html最基本的标签</h5><ul><li>html:html文档的根标签</li><li>head:头标签。用于指定html文档的一些属性。引入外部的资源</li><li>title:标题标签。</li><li>body:体标签<br>&lt;!DOCTYPE html&gt;:html5中定义该文档是html文档</li></ul><h5 id="2、文本标签：和文本有关的标签"><a href="#2、文本标签：和文本有关的标签" class="headerlink" title="2、文本标签：和文本有关的标签"></a>2、文本标签：和文本有关的标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">注释：<span class="comment">&lt;!-- 注释内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> to<span class="tag">&lt;<span class="name">h6</span>&gt;</span>:标题标签 </span><br><span class="line"> h1~h6:字体大小逐渐递减</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>:段落标签</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>:换行标签</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>：展示一条水平线</span><br><span class="line">属性：</span><br><span class="line">color:颜色</span><br><span class="line">width:宽度</span><br><span class="line">size：高度</span><br><span class="line">align:对其方式</span><br><span class="line">center:居中</span><br><span class="line">left:左对齐</span><br><span class="line">right:右对齐</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>:字体加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>：字体斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span>：字体标签</span><br><span class="line">文本居中</span><br><span class="line">属性:</span><br><span class="line">color:颜色</span><br><span class="line">size:大小</span><br><span class="line">face:字体</span><br><span class="line">属性定义:</span><br><span class="line">color:</span><br><span class="line">1.英文单词:red,green,blue</span><br><span class="line">2.rgb(值1，值2，值3):值的范图:0~255 如 rgb(0,0,255)</span><br><span class="line">3.#值1值2值3:值的范围:00~FF之间。如: #FFO0FF</span><br><span class="line">width:</span><br><span class="line">1.数值:width=&#x27;20&#x27;,数值的单位，默认是 px(像素)</span><br><span class="line">2.数值%:占比相对于父元素的比例</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>  </span><br><span class="line">    公司简介  </span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;#ffd700&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#dc143c&quot;</span>&gt;</span>“中央村黑马程序员训练营”<span class="tag">&lt;/<span class="name">font</span>&gt;</span>是由<span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>传智播客<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>联合中关村软件园、CSDN，并委托传智播客进行教学实施的软件开发高端培训机构，致力于服务各大软件企业，解决当前软件开发技术飞速发展，而企业招不到优秀人才的困扰。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>目前，“中央村黑马程序员训练营”已成长为行业“学员质量好、课程内容深、企业满意”的移动开发高端训练基地，并被华为中关村软件园重点扶持人才企业。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  </span><br><span class="line">黑马程序员的学员多为大学毕业后，有理想、有梦想，想从事IT行业，而没有环境和机遇改变自己命运的年轻人。黑马程序员的学员筛选制度，远比现在90%以上的企业招聘流程更为严格。任何一名学员想成功入学“黑马程序员”，必须经历长达2个月的面试流程，这些流程中不仅包括严格的技术测试、自学能力测试，还包括性格测试、压力测试、品德测试等等测试。毫不夸张地说，黑马程序员训练营所有学员都是精挑细选出来的。百里挑一的选拔筛选制度确保学员质量，并降低企业的用人风险。  </span><br><span class="line">中央村黑马程序员训练营不仅着重培养学员的基础理论知识，更注重培养项目实施管理能力，并密切关注技术革新，不断引入先进的技术，研发更新技术课程，确保学员进入企业后不仅能独立从事开发工作，更能给企业带来新的技术体系和理念。  </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  </span><br><span class="line">一直以来，黑马程序员以技术视角关注IT产业发展，以深度分享推进产业技术成长，致力弘扬技术创新，倡导分享、开放和协作，努力打造高质量的IT人才服务平台。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;#ffd700&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#a9a9a9&quot;</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>江苏传智播客教育科技股份有限公司<span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">版权所有Copyright@2006-2018<span class="symbol">&amp;copy;</span>,All Rights Reserved苏ICP备16007882  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">font</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="3、图片标签："><a href="#3、图片标签：" class="headerlink" title="3、图片标签："></a>3、图片标签：</h5><p>图片中的文字是：<br>相对路径  </p><ul><li>以.开头的路径  </li><li>./:代表当前目录./image/1.jpg<br>../:代表上一级目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;image/jingxuan_2.jpg&quot; align=&quot;right&quot;alt=&quot;古镇&quot; width=&quot;500&quot;&gt;  </span><br><span class="line">&lt;img src=&quot;./image/jiangwai_1.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><h5 id="4、列表标签"><a href="#4、列表标签" class="headerlink" title="4、列表标签"></a>4、列表标签</h5>有序列表：<pre><code>  ol:  li:</code></pre>无序列表<pre><code>  ul:  li：</code></pre><h5 id="5、连接标签"><a href="#5、连接标签" class="headerlink" title="5、连接标签"></a>5、连接标签</h5>a:定义一个超链接<br>属性：<br>href:指定访问资源的URL(统一资源定位符)<br>target:指定打开资源的方式<pre><code>   `__self:默认值，在当前页面打开   ` _blank：在空白页面打开`</code></pre>![[Pasted image 20240730205443.png]]6、![[Pasted image 20240730205929.png]]<h5 id="7、语义化标签："><a href="#7、语义化标签：" class="headerlink" title="7、语义化标签："></a>7、语义化标签：</h5>html5中为了提高程序的可读性，提供了一些标签<br>1、<code>&lt;header&gt;</code> ：页眉<br>2、<code>&lt;footer&gt;</code>：页脚<br>8.表格标签:</li><li>table:定义表格</li><li>width:宽度</li><li>border:边框</li><li>cellpadding:定义内容和单元格的距离</li><li>cellspacing:定义单元格之间的距离。如果指定为0，则单元格的线会合为一条</li><li>bgcolor:背景色</li><li>align:对齐方式</li><li>tr:定义行<br>  bgcolor:背景色<br>  align:对齐方式</li><li>td:定义单元格<br>  colspqn:合并列<br>  rowspan:合并行</li><li>th:定义表头单元格</li><li><code>&lt;caption&gt;</code>:表示表格的头部分</li><li><code>&lt;tbody</code>:表示表格的体部分</li><li><p><code>&lt;tfoot&gt;</code>：表示表格的脚部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span><span class="attr">bgcolor</span>=<span class="string">&quot;#ffe4c4&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span> 编号 <span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span> 成绩 <span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> 小龙女 <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> 100<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> 杨过 <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> 50 <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8、表单标签"><a href="#8、表单标签" class="headerlink" title="8、表单标签"></a>8、表单标签</h4><p>form:用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围<br>属性：</p><pre><code>  action:指定提交数据的URL  method:指定提交方式      分类：一共7种，2种比较常用      get:      1、请求参数会在地址栏中显示。      2、请求参数大小是有限制的      3、不太安全      post:      1、请求参数不会在地址栏中显示。会封装在请求体中（HTTP协议）      2、请求参数的大小没有限制      3、比较安全  表单项中的数据要想被提交，必须指定其name属性</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span>  </span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>input:可以通过type属性值，改变元素展示的样式<br>  type属性</p><pre><code>  text：文本输入框，默认值      placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息  password：密码输入框  radio：单选框      注意：      1、要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样      2、一般会给每一个单选框提供value属性，指定其被选中后提交的值      3、checked属性，可以认定默认值  checkbox：复选框      注意：      1、一般会给每一个单选框提供value属性，指定其被选中后提交的值      2、checked属性，可以指定默认值  3、file:文件选择框      hidden:隐藏域，用于提交一些信息。      按钮:      submit:提交按钮。可以提交表单      button:普通按钮      image:图片提交按钮           src属性指定图片的路径      label：指定输入项的文字描述信息</code></pre><p>  注意：</p><pre><code>  label的for属性一般会和input的id属性值对应。如果对应了，则点击label区域，会让input输入框获取焦点</code></pre><p>   select:下拉列表</p><pre><code>   子元素：option,指定列表项</code></pre><p>   textarea:文本域</p><pre><code>   cols；指定列数，每一行有多少个字符   rows:默认多少行</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span>：<span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span> 男  </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span> 女  </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shopping&quot;</span> <span class="attr">checked</span>&gt;</span> 逛街  </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span> Java  </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span> 游戏  </span><br><span class="line">图片：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    隐藏域：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>    取色器：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;coler&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一个按钮&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../image/logo.jpg&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS：页面美化和布局控制"><a href="#CSS：页面美化和布局控制" class="headerlink" title="CSS：页面美化和布局控制"></a>CSS：页面美化和布局控制</h3><h4 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h4><p>  1.概念: Cascading Style Sheets 层叠样式表</p><ul><li>层叠:多个样式可以作用在同一个html的元素上，同时生效<h4 id="2-好处"><a href="#2-好处" class="headerlink" title="2.好处:"></a>2.好处:</h4>1.功能强大<br>2.将内容展示和样式控制分离</li><li>降低耦合度。解耦</li><li>让分工协作更容易</li><li>提高开发效率<h4 id="3、CSS的使用：CSS与html的结合"><a href="#3、CSS的使用：CSS与html的结合" class="headerlink" title="3、CSS的使用：CSS与html的结合"></a>3、CSS的使用：CSS与html的结合</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CSS的使用：CSS语法组合方式</span><br><span class="line">1.内联样式</span><br><span class="line">*在标签内使用style属性指定css代码</span><br><span class="line">*如:<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">2.内部样式</span><br><span class="line">*在head标签内，定义style标签，style标签的标签体内容就是css代码</span><br><span class="line">*如:</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>3、外部样式<br>1、定义css资源文件<br>2、在head标签内，定义link标签，引入外部的资源文件<br>如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a.css文件：</span><br><span class="line">div&#123;</span><br><span class="line">color:green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/a.ss&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure>注意：<br>1,2,3种方式 css作用范围越来越大<br>1方式不常用，后期常用2，3<br>3种格式可以写为：<br><style><br>@import”css/a.css”</style><h4 id="4、css语法："><a href="#4、css语法：" class="headerlink" title="4、css语法："></a>4、css语法：</h4><ul><li>格式：<br>选择器{<br>属性名1：属性名1；<br>属性名2：属性名2:；<br>…<br>}</li></ul></li><li>选择器：筛选具有相似特征的元素</li><li>注意：<ul><li>每一对属性需要使用；隔开，最后一对属性可以不加<h4 id="5、选择器"><a href="#5、选择器" class="headerlink" title="5、选择器"></a>5、选择器</h4>`分类:</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">##### 1.基础选择器</span><br><span class="line">   1.id选择器:选择具体的id属性值的元素，建议在一个html页面中id值唯一</span><br><span class="line">      语法: `#id属性值&#123;&#125;</span><br><span class="line">   2.元素选择器:选择具有相同标签名称的元素</span><br><span class="line">      语法: 标签名称&#123;&#125;</span><br><span class="line">      注意:id选择器优先级高于元素选择器</span><br><span class="line">   3.类选择器:选择具有相同的class属性值的元素</span><br><span class="line">      语法:.class属性值&#123;&#125;</span><br><span class="line">      注意:类选择器优先级高于元素选择器</span><br><span class="line">2.扩展选择器:</span><br><span class="line">   1.选择所有元素</span><br><span class="line">      语法:&#123; &#125;</span><br><span class="line">   2.并集选择器</span><br><span class="line">      选择器1,选择器2&#123; &#125;</span><br><span class="line">   3.子选择器:筛选选择器1元素下的选择器2元素</span><br><span class="line">      语法:选择器1选择器2&#123; &#125;</span><br><span class="line">   4.父选择器:筛选选择器2的父元素选择器1</span><br><span class="line">      语法:选择器1&gt;选择器2&#123; &#125;</span><br><span class="line">   5.属性选择器:选择元素名称，属性名=属性值的元素</span><br><span class="line">      语法:元素名称属性名=&quot;属性值&quot;&#123; &#125;</span><br><span class="line">   6.伪类选择器:选择一些元素具有的状态</span><br><span class="line">      语法:元素:状态&#123; &#125;</span><br><span class="line">      如:&lt;a&gt;</span><br><span class="line">      状态:</span><br><span class="line">      link:初始化的状态</span><br><span class="line">      visited:被访问过的状态</span><br><span class="line">      active:正在访问状态</span><br><span class="line">      hover:鼠标悬浮状态`</span><br><span class="line"></span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-属性"><a href="#6-属性" class="headerlink" title="6.属性"></a>6.属性</h4><p>1.字体、文本</p><ul><li>font-size: 字体大小</li><li>color: 文本颜色</li><li>text-align: 对齐方式</li><li>line-height: 行高<br>2.背景</li><li>background:<br>3.边框</li><li>border: 设置边框，符合属性<br>4.尺寸</li><li>width: 宽度</li><li>height: 高度<br>5.盒子模型：控制布局</li><li>margin: 外边距</li><li>padding: 内边距</li><li>默认情况下内边距会影响整个盒子的大小</li><li>box-sizing: border-box; 设置盒子的属性，让width和height就是最终盒子的大小<br>6.浮动</li><li>left</li><li>right<h3 id="JavaScripe"><a href="#JavaScripe" class="headerlink" title="JavaScripe"></a>JavaScripe</h3><h4 id="概念：一门客户端脚本语言"><a href="#概念：一门客户端脚本语言" class="headerlink" title="概念：一门客户端脚本语言"></a>概念：一门客户端脚本语言</h4><ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了<br>功能：<br>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。<br>JavaScript发展史：</li></ul><ol><li>1992年，Nonbase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为：C—，后来更名为：ScriptEase</li><li>1995年，Netscape(网景)公司，开发了一门客户端脚本语言:LiveScript。后来，请来sun公司的专家，修改LiveScript，命名为JavaScript</li><li>1996年，微软抄袭JavaScript开发出JScript语言</li><li>1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准:ECMAScript，就是统一了所有客户端脚本语言的编码方式。<br>JavaScript = ECMAScript + JavaScript自己特有的东西（BOM+DOM）<h4 id="ECMAScript-客户端脚本语言的标准"><a href="#ECMAScript-客户端脚本语言的标准" class="headerlink" title="ECMAScript:客户端脚本语言的标准"></a>ECMAScript:客户端脚本语言的标准</h4><h5 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h5>1、与html结合方式<br>1、内部js<br>定义&lt; script&gt;,标签体内容就是js代码<br>2、外部js：<br>定义&lt; script&gt;,通过src属性引入外部的js文件<br>2、注释<br>1、单行注释：//注释内容<br>2、多行注释：/ <em> 注释内容 </em>  /<br>3、数据类型<br>1、原始数据类型（基本数据类型）<br>1、number:数字。整数/小数/NaN(not a number 一个不是数字的数字类型)<br>2、string：字符串。字符串“abd” “a” ‘a’<br>3、boolean：true和false<br>4、null：一个对象为空的占位符<br>5、undefiined;未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li></ol></li></ul><p>4、变量<br>    变量：一小块储存数据的内存空间<br>    java语言是强类型语言，而JavaScript是弱类型语言<br>        强类型：在开辟变量储存空间时，定义了空间将来储存的数据的数据类型。只能储存固定类型的数据<br>        弱类型：在开辟变量储存空间时，不定义空间将来的储存数据类型，可以存放任意类型的数据<br>    语法：<br>        var 变量名=初始化值；<br>5、运算符<br>1、一元运算符：只有一个运算符的运算符<br>![[Pasted image 20240801085915.png]]<br>2、比较运算符<br>![[Pasted image 20240801090650.png]]<br>3、逻辑运算符<br>![[Pasted image 20240801092214.png]]<br>4、三元表达式<br>![[Pasted image 20240801092430.png]]<br>5、<br>![[Pasted image 20240801094551.png]]<br> 6、Js特殊语法：<br>     1、语句以；结尾，如果一行只有一条语句则；可以省略（不建议）<br>     2、变量的定义使用var关键字，也可以不适用<br>          用：定义的变量是局部变量<br>          不用：定义的变量是全局变量（不建议）</p><p>7、练习<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>99乘法表<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css">  </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">td</span>&#123;  </span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid;  </span></span><br><span class="line"><span class="language-css">    &#125;  </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;table align=&#x27;center&#x27;&gt;&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)&#123;  </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;tr&gt;&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;  </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;td&gt;&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&quot;&amp;nbsp;&amp;nbsp;&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/td&gt;&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">        &#125;  </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/tr&gt;&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    &#125;  </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/tr&gt;&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="2、基本对象"><a href="#2、基本对象" class="headerlink" title="2、基本对象"></a>2、基本对象</h5><p> Function：函数（方法）对象<br>     1、创建<br>         1、var fun=new Function（形式参数列表，方法体）；<br>         2、function 方法名称（形式参数列表）{<br>         方法体<br>         }<br>         3、var 方法名=function（形式参数列表）{<br>         方法体<br>         }<br>    2、<br>    3、属性;<br>        length:代表形参的个数<br>    4、特点：<br>        1、方法定义是，形参的类型不用写，返回值类型也不写<br>        2、方法是一个对象，如果定义名称相同的方法，会覆盖<br>        3、在js中，方法的调用只与方法的名称有关，和参数列表无关<br>        4、在方法声明中有一个隐藏的内置对象（数组），arguments，封装所有的实际参数<br>    5、调用：<br>        方法名称(实际参数列表)</p><p>Array:数组对象<br>    1、创建：<br>        1、var arr=new Array（元素列表）；<br>        2、var arr=new Array（默认长度）；<br>        3、var arr=`[元素列表]；<br>    2、方法<br>        jion（参数）：将数组中的元素按照指定的分隔符拼接为字符串<br>        push（）：向数组的末尾添加一个或更多元素，并返回新的长度<br>    3、属性<br>        length：数组的长度<br>    4、特点<br>        1、js中，数组元素的类型可变的。<br>        2、JS中，数组长度可变的。<br>Date：日期对象<br>    1、创建<br>        var date=new Date（）；<br>    2、方法：<br>    toLocaleString()：返回当前date对象对应的时间本地字符串格式<br>    getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</p><p>Math：数学对象<br>    1、创建<br>        特点：Math对象不用创建，直接使用。Math.方法名();<br>    2、方法<br>        random():返回0~1之间的随机数。含0不含1。<br>        ceil(x):对数进行上舍入<br>        floor(x)：对数进行下舍入<br>        round(x):把数四舍五入为最接近的整数<br>    3、属性<br>        PI</p><p>RegExp：正则表达式对象<br>    1、正则表达式：定义字符串的组成规则<br>        1、单个字符：[]<br>            如：<code>[a] [ab] [a-zA-Z0-9]            特殊符号代表特殊含义的单个字符</code>\d:单个数字字符[0-9]<br>            <code>\w：单个单词字符[a-zA-Z0-9]</code><br>        2、量词符号<br>            ？：表示出现0次或1次<br>            <code>*：表示出现0次或多次</code><br>            +：出现1次或多次<br>            {m,n}:表示m&lt;=数量&lt;=n<br>                m如果缺省：{，n}：最多n次<br>                n如果缺省：{m，}最少m次<br>        3、开始结束符号<br>            <code>^:开始</code><br>            <code>$:结束</code><br>    2、正则对象<br>            1、创建<br>                1、var reg=new RegExp(“正则表达式“);<br>                2、var reg=/正则表达式/;<br>            2、方法<br>                1、test(参数)：验证指定的字符串是否符合正则定义的规范<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var reg=new RegExp(&quot;^\\w&#123;6,12&#125;&quot;);  </span><br><span class="line">var reg2=/^\w&#123;6,12&#125;$/;  </span><br><span class="line">var uername=&quot;zhangsansdasdad&quot;;  </span><br><span class="line">var flag=reg2.test(uername);  </span><br><span class="line">alert(flag);</span><br></pre></td></tr></table></figure><br> Global<br>     1、特点：全局对象，这个Global中封装的方法不需要对象就直接调用。方法名（）；<br>     2、方法：<br>         encodeURI（）：url编码<br>         decodeURI（）：url解码<br>         encodeURIComponent():url编码，编码的字符更多<br>         decodeURIComponent():url解码<br>        parseInt():将字符串转为数字<br>            注意判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number<br>        isNAN():判断一个值是否是NaN<br>            NaN六亲不认，连自己也不认。NaN参与的`==比较全部为false<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">    var str=&quot;http://www.baidu.com?wd=传智播客&quot;;  </span><br><span class="line">    var encode=encodeURI(str);  </span><br><span class="line">    document.write(encode+&quot;&lt;br&gt;&quot;);  </span><br><span class="line">    var s=decodeURI(encode);  </span><br><span class="line">    document.write(s+&quot;&lt;br&gt;&quot;);  </span><br><span class="line">  </span><br><span class="line">    var str1=&quot;http://www.baidu.com?wd=传智播客&quot;;  </span><br><span class="line">    var encode1=encodeURIComponent(str1);  </span><br><span class="line">    document.write(encode1+&quot;&lt;br&gt;&quot;);  </span><br><span class="line">    var s1=decodeURIComponent(encode1);  </span><br><span class="line">    document.write(s1+&quot;&lt;br&gt;&quot;)  </span><br><span class="line">    var str=&quot;a234abc&quot;;  </span><br><span class="line">    var number=parseInt(str);  </span><br><span class="line">    var a=NaN;  </span><br><span class="line">    document.write(a==NaN+&quot;&lt;br&gt;&quot;);  </span><br><span class="line">    document.write(isNaN(a));  </span><br><span class="line">    var jscode=&quot;alert(123)&quot;;  </span><br><span class="line">    eval(jscode)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="DOM简单学习"><a href="#DOM简单学习" class="headerlink" title="DOM简单学习"></a>DOM简单学习</h3><h4 id="功能：控制html文档的内容"><a href="#功能：控制html文档的内容" class="headerlink" title="功能：控制html文档的内容"></a>功能：控制html文档的内容</h4><p>获取页面标签（元素）对象：Element<br>    document.getElementById(“id值“):通过元素的id获取元素对象<br>操作Element对象<br>    1、修改属性值：<br>        1、明确获取的对象是哪一个？<br>        2、查看APL文档，找其中有哪些属性可以设置<br>    2、修改标签体内容<br>        属性：innnerHTMl<br>        1、获取元素对象<br>        2、使用innerHTML属性修改标签体内容</p><h4 id="事件简单学习"><a href="#事件简单学习" class="headerlink" title="事件简单学习"></a>事件简单学习</h4><p>功能：某些组件被执行了某些操作后，出发某些代码的执行<br>    造句：xxx被xxx,我就xxx<br>        我方水晶被摧毁之后，我就责备朋友<br>        敌方水晶被摧毁之后，我就夸奖自己<br>如何绑定事件<br>    1、直接在html标签上，指定事件的属性（操作），属性值就是js代码<br>        1、事件：onclick——单击事件<br>    2、用过js获取元素对象，指定事件属性，设置一个函数</p><p>案例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=&quot;light&quot; src=&quot;img/img/off.gif&quot;&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    var light=document.getElementById(&quot;light&quot;);  </span><br><span class="line">    var flag=false;  </span><br><span class="line">    light.onclick=function()&#123;  </span><br><span class="line">        if(flag)&#123;  </span><br><span class="line">            light.src=&quot;img/img/off.gif&quot;;  </span><br><span class="line">            flag=false;  </span><br><span class="line">        &#125;else &#123;  </span><br><span class="line">            light.src=&quot;img/img/on.gif&quot;;  </span><br><span class="line">            flag=true;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>1、概念：Browser Object Model 浏览器对象模型<br>    将浏览器的各个组成部分封装成对象<br>2、组成<br>    window:窗口对象<br>    Navigator:浏览器对象<br>    Screen:显示器屏幕对象<br>    History:历史记录对象<br>    Location:地址栏对象<br>Window: 窗口对象<br>1.创建<br>2.方法<br>    1.与弹出框有关的方法:<br>    alert()显示带有一段消息和一个确认按钮的警告框。<br>    confirm()显示带有一段消息以及确认按钮和取消按钮的对话框。</p><pre><code>* 如果用户点击确定按钮，则方法返回true* 如果用户点击取消按钮，则方法返回falseprompt()显示可提示用户输入的对话框。* 返回值:获取用户输入的值2、与开发关闭有关的方法： close()关闭浏览器窗口。    谁调用我，我关谁 open()打开一个新的浏览器窗口    返回新的Window对象3.与定时器有关的方式setTimeout()在指定的毫秒数后调用函数或计算表达式。参数:1.js代码或者方法对象2.毫秒值返回值: 唯一标识，用于取消定时器clearTimeout()取消由 setTimeout()方法设置的 timeout。setInterval()按照指定的周期(以毫秒计)来调用函数或计算表达式。clearInterval()取消由 setInterval()设置的 timeout。</code></pre><p>3.属性<br>4.特点</p><ul><li>window对象不需要创建可以直接使用 window使用。 window.方法名();</li><li>window引用可以省略。 方法名();</li></ul><p>4.Location:地址栏对象<br>1.创建(获取):</p><ol><li>window.location</li><li>location<br>2.方法:<br> reload()重新加载当前文档。刷新<br>3.属性<br> href设置或返回完整的URL<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3>![[Pasted image 20240802084336.png]]<br>概念：Document Obiect Model 文档对象模型<br> 将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作<br>W3C DOM标准被分为3个不同的部分:<br> 核心DOM-针对任何结构化文档的标准模型<br> Document:文档对象<br> Element:元素对象<br> Attribute:属性对象<br> Text:文本对象<br> Comment:注释对象<br> Node:节点对象，其他5个的父对象<br>XML DOM-针对XML文档的标准模型<br>HTML DOM-针对HTML文档的标准模型</li></ol><h4 id="Document-文档对象"><a href="#Document-文档对象" class="headerlink" title="Document: 文档对象"></a>Document: 文档对象</h4><p>1.创建（获取）：在html dom模型中可以使用window对象来获取</p><ol><li>window.document</li><li>document<br>2.方法：<br>1.获取Element对象：<br>1.getElementByld()：根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName()：根据class属性值获取元素对象们。返回值是一个数组</li><li><p>getElementsByName()：根据name属性值获取元素对象们。返回值是一个数组<br>2.创建其他DOM对象：</p><p> createAttribute(name)<br> createComment()<br> createElement()<br> createTextNode()<br>3.属性<br>Element:元素对象<br>1.获取/创建:通过document来获取和创建<br>2.方法:</p></li><li>removeAttribute():删除属性</li><li>setAttribute() :设置属性<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;点我试一试&lt;/a&gt;  </span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btn_set&quot; value=&quot;设置属性&quot;&gt;  </span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btn_remove&quot; value=&quot;删除属性&quot;&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    var btn_set=document.getElementById(&quot;btn_set&quot;)  </span><br><span class="line">    btn_set.onclick=function () &#123;  </span><br><span class="line">        var element_a=document.getElementsByTagName(&quot;a&quot;)[0];  </span><br><span class="line">        element_a.setAttribute(&quot;href&quot;,&quot;https://www.baidu.com&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    var btn_remove=document.getElementById(&quot;btn_remove&quot;)  </span><br><span class="line">    btn_remove.onclick=function () &#123;  </span><br><span class="line">        var element_a=document.getElementsByTagName(&quot;a&quot;)[0];  </span><br><span class="line">        element_a.removeAttribute(&quot;href&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Node-节点对象，其他5个的父对象"><a href="#Node-节点对象，其他5个的父对象" class="headerlink" title="Node:节点对象，其他5个的父对象"></a>Node:节点对象，其他5个的父对象</h4>特点：所有dom对象都可以被认为是一个节点<br>方法：</li></ol><ul><li>CRUD dom树:<br> appendChild() :向节点的子节点列表的结尾添加新的子节点。<br> removeChild() :删除(并返回)当前节点的指定子节点。<br> replaceChild() :用新节点替换一个子节点。<br>属性：</li><li>parentNode 返回节点的父节点。</li></ul><p>案例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;  </span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;  </span><br><span class="line">&lt;head&gt;  </span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;  </span><br><span class="line">    &lt;title&gt;动态表格&lt;/title&gt;  </span><br><span class="line">    &lt;style&gt;        table&#123;  </span><br><span class="line">            border: 1px solid;  </span><br><span class="line">            margin: auto;  </span><br><span class="line">            width: 500px;  </span><br><span class="line">        &#125;  </span><br><span class="line">        td,th&#123;  </span><br><span class="line">            text-align: center;  </span><br><span class="line">            border: 1px solid;  </span><br><span class="line">        &#125;  </span><br><span class="line">        div&#123;  </span><br><span class="line">            text-align: center;  </span><br><span class="line">            margin: 50px;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &lt;/style&gt;  </span><br><span class="line">&lt;/head&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line">&lt;div&gt;  </span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;id&quot; placeholder=&quot;请输入编号&quot; &gt;  </span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;name&quot; placeholder=&quot;请输入姓名&quot;&gt;  </span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;gender&quot; placeholder=&quot;请输入性别&quot;&gt;  </span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;添加&quot; id=&quot;btn_add&quot;&gt;  </span><br><span class="line">&lt;/div&gt;  </span><br><span class="line">&lt;table&gt;  </span><br><span class="line">    &lt;caption&gt;学生信息表&lt;/caption&gt;  </span><br><span class="line">    &lt;tr&gt;        &lt;td&gt;1&lt;/td&gt;  </span><br><span class="line">        &lt;td&gt;令狐冲&lt;/td&gt;  </span><br><span class="line">        &lt;td&gt;男&lt;/td&gt;  </span><br><span class="line">        &lt;td&gt;&lt;a href=&quot;javascript:void(0);&quot;onclick=&quot;delTr(this)&quot;&gt;删除&lt;/a&gt; &lt;/td&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;2&lt;/td&gt;  </span><br><span class="line">        &lt;td&gt;任我行&lt;/td&gt;  </span><br><span class="line">        &lt;td&gt;男&lt;/td&gt;  </span><br><span class="line">        &lt;td&gt;&lt;a href=&quot;javascript:void(0);&quot;onclick=&quot;delTr(this)&quot;&gt;删除&lt;/a&gt; &lt;/td&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;3&lt;/td&gt;  </span><br><span class="line">        &lt;td&gt;岳不群&lt;/td&gt;  </span><br><span class="line">        &lt;td&gt;？&lt;/td&gt;  </span><br><span class="line">        &lt;td&gt;&lt;a href=&quot;javascript:void(0);&quot;onclick=&quot;delTr(this)&quot;&gt;删除&lt;/a&gt; &lt;/td&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;/tr&gt;  </span><br><span class="line">&lt;/table&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    /*document.getElementById(&quot;btn_add&quot;).onclick=function () &#123;  </span><br><span class="line">        var id=document.getElementById(&quot;id&quot;).value;        var name =document.getElementById(&quot;name&quot;).value;        var gender=document.getElementById(&quot;gender&quot;).value;  </span><br><span class="line">        var td_id=document.createElement(&quot;td&quot;)        var text_id=document.createTextNode(id);        td_id.appendChild(text_id);  </span><br><span class="line">        var td_name=document.createElement(&quot;td&quot;)        var text_name=document.createTextNode(name);        td_name.appendChild(text_name);  </span><br><span class="line">        var td_gender=document.createElement(&quot;td&quot;)        var text_gender=document.createTextNode(gender);        td_gender.appendChild(text_gender);  </span><br><span class="line">        var td_a=document.createElement(&quot;td&quot;);        var ele_a=document.createElement(&quot;a&quot;);        ele_a.setAttribute(&quot;href&quot;,&quot;javascript:void(0);&quot;);        ele_a.setAttribute(&quot;onclick&quot;,&quot;delTr(this);&quot;);        var text_a=document.createTextNode(&quot;删除&quot;);  </span><br><span class="line">        ele_a.appendChild(text_a);        td_a.appendChild(ele_a)  </span><br><span class="line">        var tr=document.createElement(&quot;tr&quot;);        tr.appendChild(td_id);        tr.appendChild(td_name);        tr.appendChild(td_gender);        tr.appendChild(td_a);  </span><br><span class="line">        var table=document.getElementsByTagName(&quot;table&quot;)[0];        table.appendChild(tr);    &#125; */     document.getElementById(&quot;btn_add&quot;).onclick=function () &#123;  </span><br><span class="line">        var id = document.getElementById(&quot;id&quot;).value;  </span><br><span class="line">        var name = document.getElementById(&quot;name&quot;).value;  </span><br><span class="line">        var gender = document.getElementById(&quot;gender&quot;).value;  </span><br><span class="line">         var table=document.getElementsByTagName(&quot;table&quot;)[0];  </span><br><span class="line">         table.innerHTML+=&quot;&lt;tr&gt;\n&quot; +  </span><br><span class="line">             &quot;        &lt;td&gt;&quot;+id+&quot;&lt;/td&gt;\n&quot; +  </span><br><span class="line">             &quot;        &lt;td&gt;&quot;+name+&quot;&lt;/td&gt;\n&quot; +  </span><br><span class="line">             &quot;        &lt;td&gt;&quot;+gender+&quot;&lt;/td&gt;\n&quot; +  </span><br><span class="line">             &quot;        &lt;td&gt;&lt;a href=\&quot;javascript:void(0);\&quot;onclick=\&quot;delTr(this)\&quot;&gt;删除&lt;/a&gt; &lt;/td&gt;\n&quot; +  </span><br><span class="line">             &quot;\n&quot; +  </span><br><span class="line">             &quot;    &lt;/tr&gt;\n&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">    function delTr(obj)&#123;  </span><br><span class="line">        var table=obj.parentNode.parentNode.parentNode;  </span><br><span class="line">        var tr=obj.parentNode.parentNode;  </span><br><span class="line">        table.removeChild(tr);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h4 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h4><p>1.标签体的设置和获取:innerHTML<br>2.使用html元素对象的属性<br>3.控制元素样式<br>1.使用元素的style属性来设置<br>如:<br>//修改样式方式1<br>div1.style.border =”1px solid red”;<br>div1.style.width =”200px”;<br>//font-size—-&gt; fontSize<br>div1.style.fontSize =”20px”;<br>2.提前定义好类选择器的样式，通过元素的className属性来设置器class属性值。</p><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><h4 id="1、概念："><a href="#1、概念：" class="headerlink" title="1、概念："></a>1、概念：</h4><p>一个前端开发的框架，Bootstrap，来自Twitter，是目前很受欢迎的前端框架。Bootstrap是基于HTML、CSS、JavaScript的，它简洁灵活，使得Web开发更加快捷。</p><ul><li>框架：一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</li><li>好处：<br>1.定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。<br>2.响应式布局。<br>同一套页面可以兼容不同分辨率的设备。<h4 id="2、快速入门-1"><a href="#2、快速入门-1" class="headerlink" title="2、快速入门"></a>2、快速入门</h4>1.下载Bootstrap<br>2.在项目中将这三个文件夹复制<br>3.创建html页面，引入必要的资源文件</li></ul><h4 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h4><p>同一套页面可以兼容不同分辨率的设备。<br>    实现:依赖于栅格系统:将一行平均分成12个格子，可以指定元素占几个格子<br>步骤:<br>1.定义容器。相当于之前的table、<br>    容器分类:<br>        1.container:两边留白<br>        2.container-fluid:每一种设备都是100%宽度<br>2.定义行。相当于之前的tr样式:row<br>3.定义元素。指定该元素在不同的设备上，所占的格子数目。样式:col-设备代号-格子数目<br>    设备代号:<br>        1.xs:超小屏幕手机(&lt;768px):col-xs-12<br>        2.sm:小屏幕平板(≥768px)<br>        3.md:中等屏幕桌面显示器(≥992px)<br>        4.lg:大屏幕大桌面显示器(≥1200px)<br>注意：<br>    1、一行中如果各自树木超过12，则超出部分自动换行<br>    2、栅格类属性可以向上兼容。栅格类适用于与屏幕款对大于或等于分界点大小的设备<br>    3、如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行</p><h4 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h4><p> 全局样式<br> 全局CSS样式:<br>按钮:class=”btn btn-default”<br>图片:</p><ul><li>class=”img-responsive”:图片在任意尺寸都占100%</li><li>图片形状<ul><li><img src="..." alt="..." class="img-rounded">:方形</li><li><img src="..." alt="..." class="img-circle">:圆形</li><li><img src="..." alt="..." class="img-thumbnail">:相框<br>表格<br>table<br>table-bordered<br>table-hover<br>表单<br>给表单添加：class=”from-control”<br>2、组件<br>导航条<br>分页条<br>3、插件：<br>轮播图<h3 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h3><h4 id="概念：某些组件被执行某些操作后，触发某些代码的执行"><a href="#概念：某些组件被执行某些操作后，触发某些代码的执行" class="headerlink" title="概念：某些组件被执行某些操作后，触发某些代码的执行"></a>概念：某些组件被执行某些操作后，触发某些代码的执行</h4>事件：某些操作。如单击。双击。键盘按下了，鼠标移动<br>事件源：组件 如:按钮 文本输入框<br>监听器：代码<br>注册监听：将事件，事件源，监听器结合在一起。当事件源上发生了某个事件，则触发执行某个监听器代码</li></ul></li></ul><p>常见的4种事件：</p><ol><li>点击事件：<ul><li>onclick:单击事件</li><li>ondblclick:双击事件</li></ul></li><li>焦点事件<ul><li>onblur:失去焦点</li><li>onfocus:元素获得焦点。</li></ul></li><li>加载事件：<ul><li>onload:一张页面或一幅图像完成加载。<br>4.鼠标事件:</li></ul></li><li>onmousedown  鼠标按钮被按下。</li><li>onmouseup   鼠标按键被松开。</li><li>onmousemove   鼠标被移动。</li><li>onmouseover   鼠标移到某元素之上。</li><li>onmouseout   鼠标从某元素移开。<br>5.键盘事件:</li><li>onkeydown   某个键盘按键 被按下。</li><li>onkeyup   某个键盘按键被松开。</li><li>onkeypress   某个键盘按键被按下并松开。<br>6.选择和改变</li><li>onchange   域的内容被改变。</li><li>onselect   文本被选中。<br>7.表单事件:</li><li>onsubmit   确认按钮被点击。</li><li>onreset   重置按钮被点击。<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2></li></ol><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>1.概念: Extensible Markup Language 可扩展标记语言<br>可扩展:标签都是自定义的。`<user> <student><br>2.功能<br>存储数据<br>    1.配置文件<br>    2 在网络中传输<br>3.xml与html的区别<br>    1.xml标签都是自定义的，html标签是预定义。<br>    2 xml的语法严格，html语法松散<br>    3.xml是存储数据的，html是展示数据</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>1、xml文档的后缀名 .mxl2、xml第一行必须定义为文档声明3、xml文档中有且仅有一个根标签4、属性值必须使用引号（单双都可以）引起来5、标签必须正确关闭6、xml标签名称区分大小写</code></pre><p>组成部分：<br>1.文档声明</p><ol><li>格式 &lt;?xml 属性列表 ?&gt;<br>2.属性列表:</li></ol><ul><li>version:版本号，必须的属性</li><li>encoding:编码方式。告知解析引擎当前文档使用的字符集，默认值:ISO-8859-1</li><li>standalone:是否独立</li><li>取值:<ul><li>yes:不依赖其他文件</li><li>no:依赖其他文件</li></ul></li></ul><ol><li>指令(了解):结合css的&lt;?xml-stylesheet type=”text/css” href=”a.css”?&gt;<br>3.标签:标签名称自定义的</li></ol><ul><li>规则:<ul><li>名称可以包含字母、数字以及其他的字符</li><li>名称不能以数字或者标点符号开始</li><li>名称不能以字母 xml (或者XML、Xml等等) 开始</li><li>名称不能包含空格<br>4.属性：id属性值唯一<br>5.文本:<ul><li>CDATA区:在该区域中的数据会被原样展示</li><li>格式:&lt;![CDATA[ 数据|]]&gt;</li></ul></li></ul></li></ul><h3 id="约束："><a href="#约束：" class="headerlink" title="约束："></a>约束：</h3><p>作为框架的使用者（程序员）<br>    1、能够在xml中引入约束文档<br>    2、能够简单的读懂约束文档</p><p>![[Pasted image 20240803172520.png]]<br>分类：<br>    1、DTD:一种简单的约束技术<br>    2、Schema：一种复杂的约束技术<br>DTD:<br>    引入dtd文档到xml中<br>    内部dtd：将约束规则定义在xml文档中<br>    外部dtd：将约束规则定义在外部的dtd文件中<br>        本地：&lt;! DOCTYPE 根标签名 SYSTEM“dtd文件的位置”&gt;<br>        网络：&lt;! DOCTYPE 根标签名 PUBLIC “dtd文件名字” “dtd文件的位置URL”&gt;<br>Schema:<br>引入：<br>    1.填写xml文档的根元素<br>    2.引入xs前缀。 xmlns: xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>“<br>    3.引入xsd文件命名空间。 xsi:schemaLocation=”<a href="http://www.itcast.cn/xml">http://www.itcast.cn/xml</a> student.xsd”<br>    4.为每一个xsd约束声明一个前缀，作为标识 xmlns=”<a href="http://www.itcast.cn/xml">http://www.itcast.cn/xml</a>“<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;students xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://www.itcast.cn/xml&quot; xsi:schemaLocation=&quot;http://www.itcast.cn/xml student.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">3.解析:操作xml文档，将文档中的数据读取到内存中</span><br><span class="line">操作xml文档</span><br><span class="line">1.解析(读取):将文档中的数据读取到内存中</span><br><span class="line">2.写入:将内存中的数据保存到xml文档中。持久化的存储</span><br><span class="line">解析xml的方式:</span><br><span class="line">1.DOM:将标记语言文档一次性加载进内存，在内存中形成一颗dom树</span><br><span class="line">优点:操作方便，可以对文档进行CRUD的所有操作</span><br><span class="line">缺点:占内存</span><br><span class="line">2.SAX:逐行读取，基于事件驱动的。</span><br><span class="line">优点:不占内存。</span><br><span class="line">缺点:只能读取，不能增删改</span><br><span class="line">xml上常见的解析器:</span><br><span class="line">1.JAXP:sun公司提供的解析器，支持dom和sax两种思想</span><br><span class="line">2.DOM4J:一款非常优秀的解析器</span><br><span class="line">3.Jsoup:jsoup是一款Java的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</span><br><span class="line">4.PULL:Android操作系统内置的解析器，sax方式的。</span><br><span class="line"></span><br><span class="line">###   Jsoup</span><br><span class="line">#### 概述 </span><br><span class="line">Jsoup:jsoup是一款Java的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</span><br><span class="line">#### 对象的使用</span><br><span class="line">1、Jsoup：工具类，可以解析html或xml文档，返回Document</span><br><span class="line">2、Document：文档对象。代表内存中的dom树</span><br><span class="line">3、Elements：`元素Element对象的集合。可以当作ArrayList&lt;Element&gt;来使用</span><br><span class="line">4、Element：元素对象</span><br><span class="line">5、Node：节点对象 </span><br></pre></td></tr></table></figure></p><ul><li><p>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><pre><code>  * 快速入门：      * 步骤：          1. 导入jar包          2. 获取Document对象          3. 获取对应的标签Element对象          4. 获取数据  * 代码：       //2.1获取student.xml的path      String path = JsoupDemo1.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();      //2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document      Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);      //3.获取元素对象 Element      Elements elements = document.getElementsByTag(&quot;name&quot;);      System.out.println(elements.size());      //3.1获取第一个name的Element对象      Element element = elements.get(0);      //3.2获取数据      String name = element.text();      System.out.println(name);</code></pre><ul><li><p>对象的使用：</p><ol><li>Jsoup：工具类，可以解析html或xml文档，返回Document<ul><li>parse：解析html或xml文档，返回Document<ul><li>parse​(File in, String charsetName)：解析xml或html文件的。</li><li>parse​(String html)：解析xml或html字符串</li><li>parse​(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</li></ul></li></ul></li><li>Document：文档对象。代表内存中的dom树<ul><li>获取Element对象<ul><li>getElementById​(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag​(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute​(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li></ul></li><li>Elements：元素Element对象的集合。可以当做 ArrayList<Element>来使用</li><li><p>Element：元素对象</p><ol><li><p>获取子元素对象</p><ul><li>getElementById​(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag​(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute​(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li><li><p>获取属性值</p><ul><li>String attr(String key)：根据属性名称获取属性值</li></ul></li><li>获取文本内容<ul><li>String text():获取文本内容</li><li>String html():获取标签体的所有内容(包括字标签的字符串内容)</li></ul></li></ol></li><li>Node：节点对象<ul><li>是Document和Element的父类<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">* 快捷查询方式：</span><br><span class="line">1. selector:选择器</span><br><span class="line">* 使用的方法：Elementsselect​(String cssQuery)</span><br><span class="line">* 语法：参考Selector类中定义的语法</span><br><span class="line">2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</span><br><span class="line">* 使用Jsoup的Xpath需要额外导入jar包。</span><br><span class="line">* 查询w3cshool参考手册，使用xpath的语法完成查询</span><br><span class="line">* 代码：</span><br><span class="line">//1.获取student.xml的path</span><br><span class="line">        String path = JsoupDemo6.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line">        //2.获取Document对象</span><br><span class="line">        Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">        //3.根据document对象，创建JXDocument对象</span><br><span class="line">        JXDocument jxDocument = new JXDocument(document);</span><br><span class="line"></span><br><span class="line">        //4.结合xpath语法查询</span><br><span class="line">        //4.1查询所有student标签</span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(&quot;//student&quot;);</span><br><span class="line">        for (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;--------------------&quot;);</span><br><span class="line"></span><br><span class="line">        //4.2查询所有student标签下的name标签</span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(&quot;//student/name&quot;);</span><br><span class="line">        for (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;--------------------&quot;);</span><br><span class="line"></span><br><span class="line">        //4.3查询student标签下带有id属性的name标签</span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(&quot;//student/name[@id]&quot;);</span><br><span class="line">        for (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;--------------------&quot;);</span><br><span class="line">        //4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span><br><span class="line"></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(&quot;//student/name[@id=&#x27;itcast&#x27;]&quot;);</span><br><span class="line">        for (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul></li></ul><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h3 id="web相关概念回顾"><a href="#web相关概念回顾" class="headerlink" title="web相关概念回顾"></a>web相关概念回顾</h3><p>1.软件架构<br>     1.1 C/S:客户端/服务器端<br>    1.2 B/S:浏览器/服务器端<br>2.资源分类<br>    2.1静态资源:所有用户访问后，得到的结果都是一样的，称为静态资源。静态资源可以直接被浏览器解析<br>    如:html,css,JavaScript<br>    2.2动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器<br>    如:servlet/jsp,php,asp…<br>3.网络通信三要素<br>    1.IP:电子设备(计算机)在网络中的唯一标识。<br>    2.端口:应用程序在计算机中的唯一标识。0~65536<br>    3.传输协议:规定了数据传输的规则<br>        1.基础协议:<br>        1.1 tcp:安全协议，三次握手。速度稍慢<br>        1.2 udp:不安全协议。速度快</p><h3 id="web服务器软件"><a href="#web服务器软件" class="headerlink" title="web服务器软件:"></a>web服务器软件:</h3><ul><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户的需求，处理请求，做出响应</li><li>web服务器软件：接收用户的需求，处理请求，做出响应。<ul><li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>web容器</li></ul></li><li>常见的java相关的web服务器软件:<ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul></li><li>JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</li></ul><h3 id="Tomcat-1"><a href="#Tomcat-1" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>Tomcat:web服务器软件<br>1.下载:<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a><br>2.安装:解压压缩包即可。<br>    注意:安装目录建议不要有中文和空格<br>3.卸载:删除目录就行了<br>4.启动:<br>    bin/startup.bat，双击运行该文件即可<br>    访问:浏览器输入:<a href="http://localhost:8080回车访问自己">http://localhost:8080回车访问自己</a><br>    <a href="http://别人的ip:8080访问别人">http://别人的ip:8080访问别人</a><br>可能遇到的问题：</p><ol><li>黑窗口一闪而过：</li></ol><ul><li>原因：没有正确配置JAVA_HOME环境变量</li><li>解决方案：正确配置JAVA_HOME环境变量</li></ul><ol><li>启动报错:</li><li>暴力:找到占用的端口号，并且找到对应的进程，杀死该进程</li></ol><ul><li>netstat -ano</li></ul><ol><li>温柔:修改自身的端口号</li></ol><ul><li>conf/server.xml</li><li><Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8445"/></li><li>一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</li><li>好处:在访问时，就不用输入端口号<br>5、关闭<br>  1、正常关闭<pre><code>  bin/shutdown.bat  ctrl+c</code></pre>  2、强制关闭<pre><code>  点击启动窗口的x</code></pre>6、配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> `部署项目的方式</span><br><span class="line"> 1. 直接将项目放到webapps目录下即可。</span><br><span class="line">/hello: 项目的访问路径--&gt;虚拟目录</span><br><span class="line">简化部署: 将项目打成一个war包，再将war包放置到webapps目录下。</span><br><span class="line">war包会自动解压缩</span><br><span class="line">2. 配置conf/server.xml文件</span><br><span class="line">在&lt;Host&gt;标签体中配置</span><br><span class="line">&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot;/&gt;</span><br><span class="line">docBase: 项目存放的路径</span><br><span class="line">path: 虚拟目录</span><br><span class="line">3. 在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写</span><br><span class="line">&lt;Context docBase=&quot;D:\hello&quot;/&gt;</span><br><span class="line">虚拟目录: xml文件的名称</span><br><span class="line">静态项目和动态项目</span><br><span class="line">目录结构</span><br><span class="line">java动态项目的目录结构：</span><br><span class="line">项目的根目录</span><br><span class="line">WEB-INF目录：</span><br><span class="line">web.xml:web项目的核心配置文件</span><br><span class="line">classes目录：放置字节码文件的目录</span><br><span class="line">lib目录：放置依赖的jar包</span><br><span class="line">将Tomcat集成到IDEA中，并创建JavaEE的项目，部署项目。`</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet:"></a>Servlet:</h2>server applet<h3 id="1、概念：运行在服务器端的小程序"><a href="#1、概念：运行在服务器端的小程序" class="headerlink" title="1、概念：运行在服务器端的小程序"></a>1、概念：运行在服务器端的小程序</h3>Servlet就是一个接口，定义了java类被浏览器访问到（tomcat识别）的规则<br>将来我们自定义一个类，实现Servlet接口，复写方法。<br>快速入门:<br>1.创建JavaE项目<br>2.定义一个类，实现Servlet接口<br>3.实现接口中的抽象方法<br>4.配置Servlet<br>在web.xml中配置:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置Servlet--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;cn.itcast.web.servlet.ServletDemo1&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/demo1&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul><p>![[Pasted image 20240805163643.png]]![[Pasted image 20240805165259.png]]<br>执行原理<br>    1、当服务器接收到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径<br>    2、查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容<br>    3、如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名<br>    4、tomcat会将字节码文件加载进内存，并创建其对象<br>    4、调用其方法<br>  Servlet中的生命周期方法<br>      1、被创建：执行init方法，只执行一次<br>      2、提供服务：执行service方法，执行多次<br>      3、被销毁：执行destory方法，只执行一次</p><h4 id="Servlet中的生命周期方法"><a href="#Servlet中的生命周期方法" class="headerlink" title="Servlet中的生命周期方法:"></a>Servlet中的生命周期方法:</h4><p>1.被创建:执行init方法，只执行一次</p><ul><li>Servlet什么时候被创建?</li><li>默认情况下，第一次被访问时，Servlet被创建</li><li>可以配置执行Servlet的创建时机。</li><li>在<code>&lt;servlet&gt;</code>标签下配置<ol><li>第一次被访问时，创建<ul><li><code>&lt;load-on-startup&gt;</code>的值为负数</li></ul></li><li>在服务器启动时，创建<ul><li><code>&lt;load-on-startup&gt;</code>的值为0或正整数</li></ul></li></ol><ul><li>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</li><li>多个用户同时访问时，可能存在线程安全问题。</li><li>解决:尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值<br>2.提供服务：执行service方法，执行多次</li></ul></li><li>每次访问Servlet时，Service方法都会被调用一次。<br>3.被销毁：执行destroy方法，只执行一次</li><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源<h3 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0:"></a>Servlet 3.0:</h3>好处：支持注解配置。可以不需要web.xml了<br>步骤：<br>  1、创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml<br>  2、定义一个类，实现Servlet接口、<br>  3、复写方法<br>  4、在类上使用@WebServlet注解，进项配置<pre><code>  @WebServlet(“资源路径”)</code></pre><h3 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h3></li></ul><ol><li>IDEA会为每一个tomcat部署的项目单独建立一份配置文件</li></ol><ul><li>查看控制台的log: using CATALINA_BASE: “c:\Users\fqy.IntelliJIdea2018.1\system\tomcat_itcast”</li></ul><ol><li>工作空间项目 和 tomcat部署的web项目</li></ol><ul><li>tomcat真正访问的是“tomcat部署的web项目”， “tomcat部署的web项目”对应着“工作空间项目”的web目录下的所有资源</li><li>WEB-INF目录下的资源不能被浏览器直接访问。</li></ul><ol><li>断点调试：使用“小虫子”启动 debug 启动<h3 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h3>Servlet —- 接口<br>|<br>GenericServlet —- 抽象类<br>|<br>HttpServlet —- 抽象类</li></ol><ul><li>GenericServlet: 将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象<br>*将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</li><li>HttpServlet: 对http协议的一种封装，简化操作<br>1.定义类继承HttpServlet<br>2.复写doGet/doPost方法<h3 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h3>1、urlpartten:Servlet访问路径<br>  1、一个Servlet可以定义多个访问路径：@WebServlet({“/d4”,”/dd4”,”/ddd4”})<br>  2、路径定义规则：<pre><code>  1、/xxx  2、/xxx/xxx：多层路径，目录结构  3、`*.do`</code></pre><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3>概念:Hyper Text Transfer Protocol 超文本传输协议<br>传输协议:定义了，客户端和服务器端通信时，发送数据的格式<br>特点:<br>1.基于TCP/IP的高级协议<br>2.默认端口号:80<br>3.基于请求/响应模型的:一次请求对应一次响应<br>4.无状态的:每次请求之间相互独立，不能交互数据<br>历史版本:<br>  1.0:每一次请求响应都会建立新的连接<br>  1.1:复用连接<h4 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h4>图片中的文字信息为：<h5 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h5>请求方式 请求url 请求协议/版本<br>GET /login.html HTTP/1.1<br><em>请求方式:</em>HTTP协议有7中请求方式，常用的有2种</li><li>GET:</li></ul><ol><li>请求参数在请求行中，在url后。</li><li>请求的url长度有限制的</li><li>不太安全</li></ol><ul><li>POST:</li></ul><ol><li>请求参数在请求体中</li><li>请求的url长度没有限制的</li><li>相对安全<br>2.请求头<br> 常见的请求头：</li><li>User-Agent: 浏览器告诉服务器，我访问你使用的浏览器版本信息*可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li><li>Referer : <a href="http://localhost/login.html*告诉服务器，我(当前请求)从哪里来">http://localhost/login.html*告诉服务器，我(当前请求)从哪里来</a> ?*作用:1.防盗链:2.统计工作:</li></ol><p>3、请求空行<br>    空行<br>4、请求体(正文)</p><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><p>![[Pasted image 20240806093724.png]]1. request对象和response对象的原理<br>    1.request和response对象是由服务器创建的。我们来使用它们<br>    2.request对象是来获取请求消息，response对象是来设置响应消息</p><p>2.request对象继承体系结构:<br>    ServletRequest—接口<br>    |  继承<br>    HttpServletRequest—接口<br>    |   实现<br>org.apache.catalina.connector.RequestFacade 类(tomcat)<br>3、request:获取请求消息</p><h5 id="1、获取请求行数据"><a href="#1、获取请求行数据" class="headerlink" title="1、获取请求行数据"></a>1、获取请求行数据</h5><ul><li>GET /day14/demo1?name=zhangsan HTTP/1.1<br>  方法:<br>  1.获取请求方式 :GET<ul><li>String getMethod()<br>2.获取虚拟目录:/day14</li><li>String getContextPath()<br>3.获取servlet路径:/demo1</li><li>String getServletPath()<br>4.获取get方式请求参数: name=zhangsan</li><li>String getQueryString()<br>5.获取请求URI:/day14/demo1</li><li>String getRequestURI():<br>/day14/demol</li><li>StringBuffer getRequestURL():<a href="http://localhost/day14/demol">http://localhost/day14/demol</a></li><li>RUL:统一资源定位符：<a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a> 中华人民共和国</li><li>URI：同意资源标识符：/day14/demo1 共和国<br>6.获取协议及版本:HTTP/1.1</li><li>String getProtocol()<br>7.获取客户机的IP地址:</li><li>String getRemoteAddr()<h5 id="2、获取请求头数据"><a href="#2、获取请求头数据" class="headerlink" title="2、获取请求头数据"></a>2、获取请求头数据</h5><code>(*)String getHeader(String name)</code>：通过请求头的名称获取请求头的值<br><code>Enumeration&lt;String&gt;getHeaderNames()</code>：获取所有的请求头名称</li></ul></li></ul><p> 防盗链中是否可以尝试修改自己的资源标识符而破解防盗链，资源修饰符的创建有什么限制吗</p><p>答：防盗链（Referer Checking）是一种网络安全措施，用于防止网站的内容被非法链接到其他网站，从而保护网站内容不被非法使用。通常，当用户通过链接访问某个网站时，浏览器会在请求头中包含一个名为<code>Referer</code>的HTTP头，这个头包含了一个URL，指示了用户是从哪个页面访问当前页面的。<br>在Java Servlet中，你可以通过读取<code>HttpServletRequest</code>对象的<code>getHeader(&quot;Referer&quot;)</code>方法来获取这个头信息。如果<code>Referer</code>头中包含的URL不是你期望的来源，你可以拒绝该请求。<br>关于是否可以尝试修改自己的资源标识符来破解防盗链，答案是可以的。理论上，任何用户都可以修改请求头中的<code>Referer</code>字段，将其设置为自己希望的URL。然而，实际上，由于HTTP协议的无状态特性，这种修改对大多数网站来说是没有效果的，因为服务器通常无法记住之前的请求。<br>资源修饰符的创建并没有严格的限制，但通常资源（如图片、视频、文档等）会有特定的格式和命名规则，以便于管理和识别。例如，你可能希望使用有意义的名称、文件扩展名、版本号等来命名你的资源。<br>为了防止资源被非法链接，你可以采取以下措施：</p><ol><li>验证<code>Referer</code>头中的URL是否与你的网站相关。</li><li>使用HTTPS来加密数据传输，使得篡改请求头变得困难。</li><li>对URL进行MD5或SHA-256哈希，并在服务器端验证请求头中的哈希值是否匹配。</li><li>使用CORS（跨源资源共享）策略来控制哪些网站可以访问你的资源。</li><li>定期更新和替换资源文件，避免长时间使用相同的URL。<br>总之，虽然理论上可以尝试修改资源标识符来破解防盗链，但在实际应用中，通过上述措施可以有效地保护你的资源不被非法链接和访问。</li></ol><p>防盗链是通过URI验证的还是URL验证的</p><p>防盗链是通过URI验证的，因为URI（统一资源标识符）是互联网上用于唯一标识万维网资源的字符串。URI通常包括协议、主机名、端口号、路径和查询参数等部分。通过这些部分，我们可以确定资源的类型、位置以及可能的其他相关信息。<br>URL（统一资源定位符）是基于URI的一种具体实现，它包含了用于表示资源在网络上的实际地址的字符串。URL通常由协议、域名、端口、文件路径和锚点组成。与URI不同的是，URL通常还包含了一些额外的信息，如服务器的IP地址、端口号以及网页的标题等。<br>在防盗链中，我们通常会使用特定的算法或技术来检查URI或URL是否符合一定的规范，从而判断其是否为合法链接。例如，我们可以通过比较URI或URL中的某些部分（如协议、主机名、端口号等）与已知的合法资源标识符进行匹配，或者通过分析URL的结构来判断其是否指向一个可信任的服务器。<br>但是，防盗链并不是绝对安全的。==攻击者可能会通过修改资源标识符的方式来绕过防盗链的限制。（自己的猜想是正确的，嘿嘿）==例如，他们可能会将原本的URI或URL中的某些部分替换为其他看起来相似的字符串，或者使用不同的编码方式来隐藏真正的资源标识符。<br>为了提高防盗链的安全性，我们可以采取一些措施，如使用更复杂的算法来解析和验证URI或URL，或者对资源进行加密处理，使得即使攻击者成功修改了资源标识符，也无法访问到真正的资源。此外，定期更新防盗链系统，以应对新的攻击技术和方法也是非常重要的。</p><p>公司对资源标识符的管理和保密严格吗<br>公司对资源标识符的管理和保密严格程度取决于多种因素，包括公司规模、行业类型、资源的重要性、法律和行业标准要求以及公司的安全策略和内部规定。以下是一些可能影响公司对资源标识符管理严格程度的因素：</p><ol><li><strong>资源重要性</strong>：如果资源标识符用于关键的业务流程、敏感数据或知识产权，公司可能会采取更加严格的管理和保密措施。</li><li><strong>法律和行业标准</strong>：在某些行业，如金融服务、医疗保健和信息技术，有严格的法律和行业标准要求对数据和标识符进行保护。</li><li><strong>安全策略</strong>：公司可能会制定详细的安全策略和流程来管理资源标识符，包括访问控制、加密、备份和灾难恢复计划。</li><li><strong>内部规定</strong>：公司内部可能会有严格的规定来指导员工如何处理和保护资源标识符，包括使用密码、定期更换、限制访问权限等。</li><li><strong>培训和教育</strong>：公司可能会对员工进行资源标识符管理和保密的培训和教育，以确保员工了解相关的最佳实践和风险。</li><li><strong>技术措施</strong>：公司可能会采用技术手段来保护资源标识符，如使用访问控制列表（ACL）、防火墙、入侵检测系统（IDS）和加密技术。</li><li><p><strong>审计和监控</strong>：公司可能会实施审计和监控机制来跟踪资源标识符的使用和访问，及时发现和响应潜在的安全威胁。<br>在实际操作中，公司对资源标识符的管理和保密严格程度可能会有所不同，但通常都会采取一些措施来确保资源的安全性和保密性。</p><h5 id="3、获取请求体数据"><a href="#3、获取请求体数据" class="headerlink" title="3、获取请求体数据"></a>3、获取请求体数据</h5><p> 请求体：只有POSt请求方式，才有请求体，在请求体中封装了POST请求的请求参数<br> 步骤：<br> 1.获取流对象</p><ul><li>BufferedReader getReader():获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream():获取字节输入流，可以操作所有类型数据</li><li>在文件上传知识点后讲解<br>2.再从流对象中拿数据<h4 id="2-其他功能"><a href="#2-其他功能" class="headerlink" title="2.其他功能:"></a>2.其他功能:</h4>1、 获取请求参数通用方式<br>1 String getParameter(String name):根据参数名称获取参数值username=zs&amp;password=123<br>2.String[] getParameterValues(String name):根据参数名称获取参数值的数组hobby=xx&amp;hobby=game<br>`3.Enumeration<String> getParameterNames():获取所有请求的参数名称<br>4、Map<String,String[]> getParameterMap():获取所有参数的map集合<br>中文乱码问题：<br>get方式：tomcat 6已经将get方式乱码解决了<br>post方式：会乱码<br>   解决：在获取参数前，设置request的编码request.setCharacterEncoding(“utf-8”)<br>2、请求转发：一种在服务器内部的资源跳转方式<br>1.步骤:<br>  1.通过request对象获取请求转发器对象:RequestDispatcher getRequestDispatcher(String path)<br>  2.使用RequestDispatcher对象来进行转发:forward(ServletRequest request, ServletResponse response)<br>2.特点:<br>  1.浏览器地址栏路径不发生变化<br>  2.只能转发到当前服务器内部资源中。<br>  3.转发是一次请求<br>3、共享数据：<br>域对象：一个有作用范围的对象，可以在范围内共享数据<br>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据<br>方法：<br>  1.void setAttribute(String name,Object obj):存储数据<br>  2.Object getAttribute(String name):通过键获取值<br>  3.void removeAttribute(String name):通过键移除键值对[<br>4.获取ServletContext:ServletContext getServletContext()</li></ul></li></ol><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><p>用户登录案例需求：<br>1.编写login.html登录页面<br>username &amp; password 两个输入框<br>2.使用Druid数据库连接池技术，操作mysql，day14数据库中user表<br>3.使用JdbcTemplate技术封装JDBC<br>4.登录成功跳转到SuccessServlet展示:登录成功！用户名，欢迎您<br>5.登录失败跳转到FailServlet展示:登录失败，用户名或密码错误</p><p>![[Pasted image 20240806200611.png]]</p><p>8.login.html中form表单的action路径的写法<br>虚拟目录+Servlet的资源路径<br>9.BeanUtils工具类，简化数据封装<br>    用于封装JavaBeans<br>    1.JavaBean:标准的Java类<br>        1.要求:<br>            1.类必须被public修饰<br>            2.必须提供空参的构造器<br>            3.成员变量必须使用private修饰<br>            4.提供公共setter和getter方法<br>        2.功能:封装数据<br>    2.概念:<br>        成员变量:<br>        属性:setter和getter方法截取后的产物<br>        例如:getUsername()—-&gt; Username—&gt; username<br>    3.方法:<br>        1.setProperty()<br>        2.getProperty()<br>        3.populate(Object obj ,Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</p><h4 id="响应消息：服务器端发送给客户端的数据"><a href="#响应消息：服务器端发送给客户端的数据" class="headerlink" title="响应消息：服务器端发送给客户端的数据"></a>响应消息：服务器端发送给客户端的数据</h4><p>数据格式：<br>1.响应行<br>    1.组成:协议/版本 响应状态码 状态码描述<br>    2.响应状态码:服务器告诉客户端浏览器本次请求和响应的一个状态。<br>        1.状态码都是3位数字<br>        2.分类:<br>            1.1xx:服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码<br>            2.2xx:成功。代表:200<br>            3.3xx:重定向。代表:302(重定向)，304(访问缓存)<br>            4.4xx:客户端错误。<br>                代表:<br>                404(请求路径没有对应的资源)<br>                405:请求方式没有对应的doXxx方法<br>            5.5xx:服务器端错误。代表:500(服务器内部出现异常)|<br>    2.响应头</p><pre><code>1. 格式:头名称:值2.常见的响应头:    1.Content-Type:服务器告诉客户端本次响应体数据格式以及编码格式    2 Content-disposition:服务器告诉客户端以什么格式打开响应体数据        值:            in-line:默认值,在当前页面内打开            attachment;filename=xxx:以附件形式打开响应体。文件下载</code></pre><p>3.响应空行<br>4.响应体:传输的数据</p><h4 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h4><p>功能:设置响应消息<br>1.设置响应行<br>    1.格式:HTTP/1.1200 ok<br>    2.设置状态码:setStatus(int sc)<br>2.设置响应头:setHeader(String name, String value)<br>3.设置响应体:<br>    使用步骤:<br>        1.获取输出流<br>            字符输出流:PrintWriter getwriter()<br>            字节输出流:Servletoutputstream getoutputstream()<br>        2.使用输出流，将数据输出到客户端浏览器<br>案例<br>1.完成重定向<br>    重定向:资源跳转的方式<br>    代码实现:<br>    //1.设置状态码为302<br>    response.setStatus(302);<br>    //2.设置响应头location<br>    response.setHeader(“Location”,”/day15/responseDemo2”);<br>    //简单的重定向方法<br>    response.sendRedirect(“/day15/responseDemo2”);<br>重定向的特点:redirect<br>    1.地址栏发生变化<br>    2.重定向可以访问其他站点(服务器)的资源<br>    3.重定向是两次请求。不能使用request对象来共享数据<br>转发的特点:forward<br>    1.转发地址栏路径不变<br>    2.转发只能访问当前服务器下的资源<br>    3.转发是一次请求，可以使用request对象来共享数据<br>面试常考题：forward和 redirect区别</p><h4 id="路径写法"><a href="#路径写法" class="headerlink" title="路径写法"></a>路径写法</h4><p>1.路径分类<br>    1.相对路径:通过相对路径不可以确定唯一资源<br>        如:./index.html<br>        不以/开头，以.开头路径<br>        规则:找到当前资源和目标资源之间的相对位置关系<br>        ./:当前目录<br>        ../后退一级目录<br>    2.绝对路径:通过绝对路径可以确定唯一资源<br>        如:<a href="http://localhost/day15/responseDemo2">http://localhost/day15/responseDemo2</a><br>        以/开头的路径<br>        /day15/responseDemo2<br>        规则：判断定义的路径是给谁用的？判断请求将来从哪里发出<br>            给客户端浏览器使用：需要加虚拟目录（项目的访问路径）<br>                建议虚拟目录动态获取：request.getContextPath()<br>                <code>&lt;a&gt; &lt;form&gt;</code>重定向<br>            给服务器使用： 不需要加虚拟目录<br>                转发路径<br>2、服务器输出字符数据到浏览器<br>步骤：<br>    1、获取字符输出流<br>    2、输出数据<br>注意：<br>    乱码问题：<br>    1、PrintWriter pw=response.getWriter();获取的流的默认编码是ISO-8859-1<br>    2、设置该流的默认编码<br>    3、告诉浏览器响应体使用的编码<br>    //简单的形式，设置编码，实在获取流之前设置<br>    response.setContentType(“text/html;charset=utf-8”);<br>3、服务器输出字节数据到浏览器<br>    步骤：<br>    1、获取字节输出流<br>    2、输出数据<br>4、验证码<br>    1、本质：图片<br>    2、目的：防止恶意表单注册</p><h4 id="ServletContext对象："><a href="#ServletContext对象：" class="headerlink" title="ServletContext对象："></a>ServletContext对象：</h4><p>1.概念:代表整个web应用，可以和程序的容器(服务器)来通信<br>2、获取：<br>    1、通过request对象获取<br>        request.getServletConext();<br>        2、通过HttpServlet获取<br>        this.getServletContext();<br>3、功能:<br>1.获取MIME类型：</p><ul><li>MIME类型：在互联网通信过程中定义的一种文件数据类型</li><li>格式：大类型/小类型 text/html image/jpeg<br>2.域对象：共享数据<br>  1.setAttribute(String name,Object value)<br>  2.getAttribute(String name)<br>  3.removeAttribute(String name)<br>  3.ServletContext对象范围：所有用户所有请求的数据<br>3.获取文件的真实（服务器）路径<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方法:String getRealPath(String path)</span><br><span class="line">String b=context.getRealPath(&quot;/b.txt&quot;);//web目录下资源访问</span><br><span class="line">System.out.println(b);</span><br><span class="line">String c=context.getRealPath(&quot;/WEB-INF/c.txt&quot;);//WEB-INF目录下的资源访问</span><br><span class="line">System.out.println(c);</span><br><span class="line">String a=context.getRealPath(&quot;/WEB-INF/classes/a.txt&quot;);//src目录下的资源访问</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br></pre></td></tr></table></figure>案例：</li></ul><p>文件下载需求:<br>    1.页面显示超链接<br>    2.点击超链接后弹出下载提示框<br>    3.完成图片文件下载<br>分析:<br>    1.超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求<br>    2.任何资源都必须弹出下载提示框<br>    3.使用响应头设置资源的打开方式:<br>    content-disposition:attachment;filename=xxx<br>步骤:<br>1.定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename<br>2.定义servlet<br>    1.获取文件名称<br>    2.使用字节输入流加载文件进内存<br>    3.指定response的响应头: content-disposition:attachment;filename=xxx<br>    4.将数据写出到response输出流<br>问题：<br>    中文文件问题<br>    解决思路<br>        1、获取客户端使用的浏览器版本信息<br>        2、根据不同的版本信息，设置filename的编码方式不同</p><h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>1.会话：一次会话中包含多次请求和响应。<br>一次会话:浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止<br>2.功能:在一次会话的范围内的多次请求间，共享数据<br>3.方式:<br>    1.客户端会话技术:Cookie<br>    2.服务器端会话技术:Session</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>1.概念:客户端会话技术，将数据保存到客户端<br>2 快速入门:</p><ul><li>使用步骤:<br>  1.创建cookie对象，绑定数据<br>  new Cookie(String name, String value)<br>  2.发送cookie对象<br>  response.addCookie(Cookie cookie)<br>  3.获取cookie，拿到数据<br>  Cookie[] request.getCookies()<br>3、实现原理<br>  基于响应头set-cookie和请求头cookie实现<br>![[Pasted image 20240807205916.png]]<br>4.cookie的细节<br>1.一次可不可以发送多个cookie?</li><li>可以</li><li>可以创建多个cookie对象，使用response调用多次addCookie方法发送cookie即可。<br>2.cookie在浏览器中保存多长时间?<br>  1.默认情况下，当浏览器关闭后，cookie数据被销毁<br>  2.持久化存储:<ul><li>setMaxAge(int seconds)<br>  1.正数:将cookie数据写到硬盘的文件中。持久化存储。cookie存活时间。<br>  2.负数:默认值<br>  3.零:删除cookie信息</li></ul></li></ul><p>3.cookie能不能存中文?</p><ul><li>在tomcat 8之前cookie中不能直接存储中文数据。</li><li>需要将中文数据转码—-一般采用URL编码(%E3)</li><li>在tomcat 8之后，cookie支持中文数据。</li></ul><p>4.cookie共享问题？<br>        1.假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？默认情况下cookie不能共享<br>         setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录如果要共享，则可以将path设置为”/“<br>    2.本同的tomcat服务器间cookie共享问题?<br>        setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享<br>        setDomain(“baidu.com”),那么tieba.baidu.com和news.baidu.com中cookie可以共享<br>5 Cookie的特点和作用</p><ol><li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie的大小有限制(4kb)以及 对同一个域名下的总cookie数量也有限制(20个)<br>作用:</li><li><p>cookie一般用于存出少量的不太敏感的数据<br> 2.在不登录的情况下，完成服务器对客户端的身份识别<br>6、案例：记住上一次访问时间</p></li><li><p>需求：</p><ol><li>访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</li><li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</li></ol></li><li>分析：<ol><li>可以采用Cookie来完成</li><li>在服务器中的Servlet判断是否有一个名为lastTime的cookie</li><li>有：不是第一次访问<ol><li>响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20</li><li>写回Cookie : lastTime=2018年6月10日11:50:01</li></ol></li><li>没有：是第一次访问<ol><li>响应数据：您好，欢迎您首次访问</li><li>写回Cookie : lastTime=2018年6月10日11:50:01<h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3>1 概念:<br>Java Server Pages : java服务器端页面<br>可以理解为:一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码<br>用于简化书写！！！<br>2.原理<br>JSP本质上就是一个servlet<br>3.JSP的脚本:JSP定义Java代码的方式<br>1.&lt;%代码 %&gt;:定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。<br>2.&lt;%!代码 %&gt;:定义的java代码，在jsp转换后的java类的成员位置。|<br>3.&lt;%=代码 %&gt;:定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。<br>4.JSP内置对象:<br>在jsp页面中不需要获取和创建，可以直接使用的对象<br>jsp一共有9个内置对象。<br>今天学习3个:</li></ol></li></ol></li></ol><ul><li>request</li><li>response</li><li>out:字符输出流对象。可以将数据输出到页面上。和response.getwriter()类似<ul><li>response.getwriter()和out.write()的区别:</li><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</li><li>response.getwriter()数据输出永远在out.write()之前<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3>1.概念:服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession<br>2.快速入门:<br>1.获取HttpSession对象:<br>  HttpSession session = request.getSession();<br>2 使用HttpSession对象:<br>  Object getAttribute(String name)<br>  void setAttribute(String name, Object value)<br>  void removeAttribute(String name)<br>3、原理<br>Session的实现是依赖于Cookie的<br>4.细节:<br>1.当客户端关闭后，服务器不关闭，两次获取session是否为同一个?<br>  默认情况下。不是。<br>  如果需要相同，则可以创建cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。<br>  Cookie c = new Cookie(“JSESSIONID”, session.getId());<br>  c.setMaxAge(60*60);<br>  response.addCookie(c);<br>2.客户端不关闭，服务器关闭后，两次获取的session是同一个吗?<br>  不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作<br>  session的钝化:<br>  在服务器正常关闭之前，将session对象序列化到硬盘上<br>  session的活化:<br>  在服务器启动后，将session文件转化为内存中的session对象即可。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3. session什么时候被销毁？</span><br><span class="line">1. 服务器关闭</span><br><span class="line">2. session对象调用invalidate()。</span><br><span class="line">3. session默认失效时间30分钟</span><br><span class="line">选择性配置修改</span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">&lt;session-timeout&gt;30&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>5、session的特点<br>1、session用于储存一次会话的多次请求的数据，存在服务器端<br>2、session可以储存任意类型，任意大小的数据<br>session与Cookie的区别<br>  1、session存储数据在服务器端，Cookie在客户端<br>  2、session没有数据大小限制，Cookie有<br>  3、session数据安全，Cookie相对不安全</li></ul></li></ul><h4 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h4><p>![[Pasted image 20240808144834.png]]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">import javax.imageio.ImageIO;  </span><br><span class="line">import javax.servlet.ServletException;  </span><br><span class="line">import javax.servlet.annotation.WebServlet;  </span><br><span class="line">import javax.servlet.http.HttpServlet;  </span><br><span class="line">import javax.servlet.http.HttpServletRequest;  </span><br><span class="line">import javax.servlet.http.HttpServletResponse;  </span><br><span class="line">import java.awt.*;  </span><br><span class="line">import java.awt.image.BufferedImage;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.util.Random;  </span><br><span class="line">  </span><br><span class="line">@WebServlet( &quot;/checkCodeServlet1&quot;)  </span><br><span class="line">public class CheckCodeServlet1 extends HttpServlet &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;  </span><br><span class="line">        int width=100;  </span><br><span class="line">        int height=50 ;  </span><br><span class="line">  </span><br><span class="line">        //创建一对象，在内存中图片（验证码图片对象）  </span><br><span class="line">        BufferedImage image =new BufferedImage(width,height,BufferedImage.TYPE_INT_BGR);  </span><br><span class="line">        Graphics g=image.getGraphics();  </span><br><span class="line">        g.setColor(Color.white);  </span><br><span class="line">        g.fillRect(0, 0, width, height);  </span><br><span class="line">  </span><br><span class="line">        g.setColor(Color.blue);  </span><br><span class="line">        g.drawRect(0,0,width -1,height -1);  </span><br><span class="line">        String str=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;  </span><br><span class="line">        //生成随机角标  </span><br><span class="line">        Random ran=new Random();  </span><br><span class="line">        StringBuilder sb=new StringBuilder();  </span><br><span class="line">        for(int i=1;i&lt;=4;i++) &#123;  </span><br><span class="line">           int index= ran.nextInt(str.length());  </span><br><span class="line">            char ch=str.charAt(index);  </span><br><span class="line">            sb.append(ch);  </span><br><span class="line">            g.drawString(ch+&quot;&quot;, width/5*i, height/2);  </span><br><span class="line">        &#125;  </span><br><span class="line">        String checkCode_session=sb.toString();  </span><br><span class="line">        //将验证码存入session  </span><br><span class="line">        request.getSession().setAttribute(&quot;checkCode_session&quot;,checkCode_session);  </span><br><span class="line">        g.setColor(Color.red);  </span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;  </span><br><span class="line">            int x1= ran.nextInt(width);  </span><br><span class="line">            int x2=ran.nextInt(width);  </span><br><span class="line">            int y1= ran.nextInt(height);  </span><br><span class="line">            int y2=ran.nextInt(height);  </span><br><span class="line">            g.drawLine(x1,y1,x2,y2);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        ImageIO.write(image,&quot;jpg&quot;,response.getOutputStream());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;  </span><br><span class="line">    this.doPost(request,response);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;  </span><br><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt;  </span><br><span class="line">    &lt;title&gt;login&lt;/title&gt;  </span><br><span class="line">    &lt;script&gt;        window.onload=function ()&#123;  </span><br><span class="line">            document.getElementById(&quot;img&quot;).onclick=function () &#123;  </span><br><span class="line">                this.src=&quot;/day15/checkCodeServlet1?time=&quot;+new Date().getTime();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &lt;/script&gt;  </span><br><span class="line">    &lt;style&gt;        div&#123;  </span><br><span class="line">            color: red;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &lt;/style&gt;  </span><br><span class="line">&lt;/head&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line">&lt;form action=&quot;/day15/loginServlet&quot; method=&quot;post&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;table&gt;        &lt;tr&gt;            &lt;td&gt;用户名&lt;/td&gt;  </span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/td&gt;  </span><br><span class="line">        &lt;/tr&gt;  </span><br><span class="line">        &lt;tr&gt;            &lt;td&gt;密码&lt;/td&gt;  </span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/td&gt;  </span><br><span class="line">        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;验证码&lt;/td&gt;  </span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;checkCode&quot;&gt;&lt;/td&gt;  </span><br><span class="line">        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan=&quot;2&quot;&gt;&lt;img id=&quot;img&quot; src=&quot;/day15/checkCodeServlet1&quot;&gt;&lt;/td&gt;  </span><br><span class="line">        &lt;/tr&gt;        &lt;tr&gt;  </span><br><span class="line">            &lt;td colspan=&quot;2&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;&lt;/td&gt;  </span><br><span class="line">        &lt;/tr&gt;  </span><br><span class="line">    &lt;/table&gt;&lt;div&gt; &lt;%=request.getAttribute(&quot;cc_error&quot;)==null?&quot;&quot;:request.getAttribute(&quot;cc_error&quot;)%&gt;&lt;/div&gt;  </span><br><span class="line">    &lt;div&gt; &lt;%=request.getAttribute(&quot;login_error&quot;)==null?&quot;&quot;:request.getAttribute(&quot;login_error&quot;)%&gt;&lt;/div&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/form&gt;  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException;  </span><br><span class="line">import javax.servlet.annotation.WebServlet;  </span><br><span class="line">import javax.servlet.http.HttpServlet;  </span><br><span class="line">import javax.servlet.http.HttpServletRequest;  </span><br><span class="line">import javax.servlet.http.HttpServletResponse;  </span><br><span class="line">import javax.servlet.http.HttpSession;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.io.PrintWriter;  </span><br><span class="line">  </span><br><span class="line">@WebServlet( &quot;/loginServlet&quot;)  </span><br><span class="line">public class LoginServlet extends HttpServlet &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;  </span><br><span class="line">    //设置request编码  </span><br><span class="line">        request.setCharacterEncoding(&quot;utf-8&quot;);  </span><br><span class="line">        //获取参数  </span><br><span class="line">        String username = request.getParameter(&quot;username&quot;);  </span><br><span class="line">        String password = request.getParameter(&quot;password&quot;);  </span><br><span class="line">        String checkCode = request.getParameter(&quot;checkCode&quot;);  </span><br><span class="line">        //先获取生成的验证码  </span><br><span class="line">        HttpSession session=request.getSession();  </span><br><span class="line">        String checkCode_session=(String) session.getAttribute(&quot;checkCode_session&quot;);  </span><br><span class="line">        //删除session中存储的验证码  </span><br><span class="line">        session.removeAttribute(&quot;checkCode_session&quot;);  </span><br><span class="line">        //先判断验证码是否正确  </span><br><span class="line">        if(checkCode_session!=null &amp;&amp; checkCode_session.equalsIgnoreCase(checkCode))&#123;  </span><br><span class="line">            //忽略大小写  </span><br><span class="line">            //判断用户名和密码是否一致  </span><br><span class="line">            if(&quot;zhangsan&quot;.equals(username)&amp;&amp;&quot;123&quot;.equals(password))&#123;//需要调用UserDao查询数据库  </span><br><span class="line">                //登陆成功  </span><br><span class="line">                //储存信息，用户信息  </span><br><span class="line">                session.setAttribute(&quot;user&quot;,username);  </span><br><span class="line">                response.sendRedirect(request.getContextPath()+&quot;/success.jsp&quot;);  </span><br><span class="line">            &#125;else &#123;  </span><br><span class="line">                //登陆失败  </span><br><span class="line">                //储存提示信息到request  </span><br><span class="line">                request.setAttribute(&quot;login_error&quot;,&quot;用户名或密码错误&quot;);  </span><br><span class="line">                //转发到登陆页面  </span><br><span class="line">                request.getRequestDispatcher(&quot;/login.jsp&quot;).forward(request,response);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;else &#123;  </span><br><span class="line">            //验证码不一致  </span><br><span class="line">            //储存提示信息到reques  </span><br><span class="line">            request.setAttribute(&quot;cc_error&quot;,&quot;验证码错误&quot;);  </span><br><span class="line">            //转发到登陆页面  </span><br><span class="line">            request.getRequestDispatcher(&quot;/login.jsp&quot;).forward(request, response);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;  </span><br><span class="line">    this.doPost(request,response);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;  </span><br><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt;  </span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;  </span><br><span class="line">&lt;/head&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line">&lt;h1&gt;&lt;%= request.getSession().getAttribute(&quot;user&quot;)%&gt;&lt;/h1&gt;  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="JSP-1"><a href="#JSP-1" class="headerlink" title="JSP"></a>JSP</h3><p>1、指令<br>    作用: 用于配置 JSP 页面，导入资源文件<br>    格式:<br>    <code>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;</code><br>    1、 分类:</p><pre><code>    1. page: 配置 JSP 页面的       contentType: 等同于 response.setContentType()         1. 设置响应体的 MIME 类型以及字符集         2. 设置当前 JSP 页面的编码 (只能是高级的 JDK 才能生效，如果使用低级工具，则需要设置 pageEncoding 属性设置当前页面的字符集)    2. import: 导包       errorPage: 当前页面发生异常后，会自动跳转到指定的错误页面       isErrorPage: 标识当前页面是否是错误页面。       true: 是，可以使用内置对象 exception       false: 否。默认值。不可以使用内置对象 exception2.include:页面包含的。导入页面的资源文件    `&lt;%@include file=&quot;top.jsp&quot;%&gt;3.taglib:导入资源    `&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;    prefix:前缀，自定义的</code></pre><p>2、注释<br>    1.html注释:<br>    `<!-- --->:只能注释html代码片段<br>    2.jsp注释:推荐使用<br>    &lt;%— —%&gt;:可以注释所有</p><p>3.内置对象<br>在jsp页面中不需要创建，直接使用的对象<br>一共有9个：</p><div class="table-container"><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面共享数据，还可以获取其他几个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求访问的多个资源(转发)</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话的多个请求间共享数据</td></tr><tr><td>application</td><td>ServletContext</td><td>所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象</td></tr><tr><td>page</td><td>Object</td><td>当前页面(Servlet)的对象 this</td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet的配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>异常对象</td></tr></tbody></table></div><h3 id="MVC-开发模式"><a href="#MVC-开发模式" class="headerlink" title="MVC:开发模式"></a>MVC:开发模式</h3><p>1.jsp演变历史</p><pre><code>1. 早期只有servlet，只能使用response输出标签数据，非常麻烦2. 后来又jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中即写大量的java代码，有写html表，造成难于维护，难于分工协作3. 再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性</code></pre><p>![[Pasted image 20240808203612.png]]<br>2、MVC<br>1.M: Model，模型。JavaBean<br>完成具体的业务操作，如：查询数据库，封装对象<br>2 V: View，视图。JSP<br>展示数据<br>3.C: Controller，控制器。Servlet<br>    获取用户的输入<br>    调用模型<br>    将数据交给视图进行展示<br>优缺点：<br>1.优点：<br>    1.耦合性低，方便维护，可以利于分工协作<br>    2.重用性高<br>2.缺点：<br>    1.使得项目架构变得复杂，对开发人员要求高</p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><ol><li>概念：Expression Language 表达式语言   </li><li>作用：替换和简化jsp页面中java代码的编写  </li><li>语法：${表达式}  </li><li>注意：  <ul><li>jsp默认支持el表达式的。如果要忽略el表达式  </li></ul><ol><li>设置jsp中page指令中:isELIgnored=”true”忽略当前jsp页面中所有的el表达式  </li><li>${表达式} ：忽略当前这个el表达式</li></ol></li><li>使用:</li><li>运算:<ul><li>运算符:<ol><li>算数运算符: + - * /(div) %(mod)</li><li>比较运算符: &gt; &lt; &gt;= &lt;= == !=</li><li>逻辑运算符: &amp;&amp;(and) ||(or) !(not)</li><li>空运算符: empty</li></ol></li><li>功能:用于判断字符串、集合、数组对象是否为null并且长度是否为0</li><li>$ {empty list}<p>  功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0<br>  \{\{empty list\}\}:判断字符串、集合、数组对象是否为null或者长度为0<br>  \{\{not empty str\}\}:表 示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0</p></li></ul></li></ol><p>2、 获取值</p><pre><code>1. el表达式只能从域对象中获取值* 语法:      1.$ &#123;域名.键名&#125;:从指定域中获取指定键的值        * 域名:          1. pageScope --&gt; pageContext          2. requestScope --&gt; request          3. sessionScope --&gt; session          4. applicationScope --&gt; application (ServletContext)        * 举例:在request域中存储了name=张三        * 获取:$ &#123;requestScope.name&#125;2. $ &#123;键名&#125;:表示依次从最小的域中查找是否有该键对应的值，直到找到为止。3.获取对象、List集合、Map集合的值    1.对象：$&#123;域名称.键名.属性名&#125;        本质上会去调用对象的getter方法    `2.List集合：$&#123;域名称.键名[索引]&#125;    3.Map集合：         $&#123;域名称.键名.key名称&#125;        ` $&#123;域名称.键名[&quot;key名称&quot;]&#125;3.隐式对象: el表达式中有11个隐式对象 pageContext :  获取jsp其他八个内置对象  $&#123;pageContext.request.contextPath&#125; :|</code></pre><h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h3><p> ![[Pasted image 20240809105816.png]]![[Pasted image 20240809143927.png]]</p><h4 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h4><p>![[Pasted image 20240809152834.png]]</p><h4 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h4><p>1.需求:用户信息的增删改查操作<br>2.设计:<br>    1.技术选型:Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtils+tomcat<br>    2.数据库设计:<br>        create database day17; —创建数据库<br>        use day17;<br>        —使用数据库<br>        create table user( —创建表<br>        id int primary key auto_increment,<br>        name varchar(20) not null,<br>        gender varchar(5),<br>        age int,<br>        address varchar(32),<br>        qq varchar(20),<br>        email varchar(50)<br>        );<br>3.开发:<br>    1.环境搭建<br>        1.创建数据库环境<br>        2.创建项目，导入需要的jar包<br>    2.编码<br>    ![[Pasted image 20240809161343.png]]<br>4、测试<br>5、部署运维</p><p> %MAVEN_HOME%\bin</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Web开发 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
